
FinalProject_MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c4  00800060  000026a0  00002734  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800124  00800124  000027f8  2**0
                  ALLOC
  3 .stab         00002370  00000000  00000000  000027f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001140  00000000  00000000  00004b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007ba1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000983c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000999c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009c29  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a3f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ea       	ldi	r30, 0xA0	; 160
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 32       	cpi	r26, 0x24	; 36
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e2       	ldi	r26, 0x24	; 36
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 32       	cpi	r26, 0x28	; 40
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <main>
      8a:	0c 94 4e 13 	jmp	0x269c	; 0x269c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ac 12 	jmp	0x2558	; 0x2558 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e1       	ldi	r26, 0x13	; 19
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c8 12 	jmp	0x2590	; 0x2590 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b8 12 	jmp	0x2570	; 0x2570 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d4 12 	jmp	0x25a8	; 0x25a8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b8 12 	jmp	0x2570	; 0x2570 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d4 12 	jmp	0x25a8	; 0x25a8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ac 12 	jmp	0x2558	; 0x2558 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	83 e1       	ldi	r24, 0x13	; 19
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c8 12 	jmp	0x2590	; 0x2590 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b8 12 	jmp	0x2570	; 0x2570 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d4 12 	jmp	0x25a8	; 0x25a8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b8 12 	jmp	0x2570	; 0x2570 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d4 12 	jmp	0x25a8	; 0x25a8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b8 12 	jmp	0x2570	; 0x2570 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d4 12 	jmp	0x25a8	; 0x25a8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 bc 12 	jmp	0x2578	; 0x2578 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d8 12 	jmp	0x25b0	; 0x25b0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <KeyPad_getPressedKey>:
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number);
/*function responsible for adjusting the output of some buttons in 4x4 keypad*/
#endif


uint8 KeyPad_getPressedKey(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	60 97       	sbiw	r28, 0x10	; 16
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /*colomns loop*/
     b5a:	18 8a       	std	Y+16, r1	; 0x10
     b5c:	c3 c0       	rjmp	.+390    	; 0xce4 <KeyPad_getPressedKey+0x19e>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	aa e7       	ldi	r26, 0x7A	; 122
     b64:	b3 e4       	ldi	r27, 0x43	; 67
     b66:	8b 87       	std	Y+11, r24	; 0x0b
     b68:	9c 87       	std	Y+12, r25	; 0x0c
     b6a:	ad 87       	std	Y+13, r26	; 0x0d
     b6c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b6e:	6b 85       	ldd	r22, Y+11	; 0x0b
     b70:	7c 85       	ldd	r23, Y+12	; 0x0c
     b72:	8d 85       	ldd	r24, Y+13	; 0x0d
     b74:	9e 85       	ldd	r25, Y+14	; 0x0e
     b76:	20 e0       	ldi	r18, 0x00	; 0
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	4a ef       	ldi	r20, 0xFA	; 250
     b7c:	54 e4       	ldi	r21, 0x44	; 68
     b7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     b82:	dc 01       	movw	r26, r24
     b84:	cb 01       	movw	r24, r22
     b86:	8f 83       	std	Y+7, r24	; 0x07
     b88:	98 87       	std	Y+8, r25	; 0x08
     b8a:	a9 87       	std	Y+9, r26	; 0x09
     b8c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b8e:	6f 81       	ldd	r22, Y+7	; 0x07
     b90:	78 85       	ldd	r23, Y+8	; 0x08
     b92:	89 85       	ldd	r24, Y+9	; 0x09
     b94:	9a 85       	ldd	r25, Y+10	; 0x0a
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	40 e8       	ldi	r20, 0x80	; 128
     b9c:	5f e3       	ldi	r21, 0x3F	; 63
     b9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ba2:	88 23       	and	r24, r24
     ba4:	2c f4       	brge	.+10     	; 0xbb0 <KeyPad_getPressedKey+0x6a>
		__ticks = 1;
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	9e 83       	std	Y+6, r25	; 0x06
     bac:	8d 83       	std	Y+5, r24	; 0x05
     bae:	3f c0       	rjmp	.+126    	; 0xc2e <KeyPad_getPressedKey+0xe8>
	else if (__tmp > 65535)
     bb0:	6f 81       	ldd	r22, Y+7	; 0x07
     bb2:	78 85       	ldd	r23, Y+8	; 0x08
     bb4:	89 85       	ldd	r24, Y+9	; 0x09
     bb6:	9a 85       	ldd	r25, Y+10	; 0x0a
     bb8:	20 e0       	ldi	r18, 0x00	; 0
     bba:	3f ef       	ldi	r19, 0xFF	; 255
     bbc:	4f e7       	ldi	r20, 0x7F	; 127
     bbe:	57 e4       	ldi	r21, 0x47	; 71
     bc0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bc4:	18 16       	cp	r1, r24
     bc6:	4c f5       	brge	.+82     	; 0xc1a <KeyPad_getPressedKey+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bc8:	6b 85       	ldd	r22, Y+11	; 0x0b
     bca:	7c 85       	ldd	r23, Y+12	; 0x0c
     bcc:	8d 85       	ldd	r24, Y+13	; 0x0d
     bce:	9e 85       	ldd	r25, Y+14	; 0x0e
     bd0:	20 e0       	ldi	r18, 0x00	; 0
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	40 e2       	ldi	r20, 0x20	; 32
     bd6:	51 e4       	ldi	r21, 0x41	; 65
     bd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bdc:	dc 01       	movw	r26, r24
     bde:	cb 01       	movw	r24, r22
     be0:	bc 01       	movw	r22, r24
     be2:	cd 01       	movw	r24, r26
     be4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     be8:	dc 01       	movw	r26, r24
     bea:	cb 01       	movw	r24, r22
     bec:	9e 83       	std	Y+6, r25	; 0x06
     bee:	8d 83       	std	Y+5, r24	; 0x05
     bf0:	0f c0       	rjmp	.+30     	; 0xc10 <KeyPad_getPressedKey+0xca>
     bf2:	88 ec       	ldi	r24, 0xC8	; 200
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	9c 83       	std	Y+4, r25	; 0x04
     bf8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     bfa:	8b 81       	ldd	r24, Y+3	; 0x03
     bfc:	9c 81       	ldd	r25, Y+4	; 0x04
     bfe:	01 97       	sbiw	r24, 0x01	; 1
     c00:	f1 f7       	brne	.-4      	; 0xbfe <KeyPad_getPressedKey+0xb8>
     c02:	9c 83       	std	Y+4, r25	; 0x04
     c04:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c06:	8d 81       	ldd	r24, Y+5	; 0x05
     c08:	9e 81       	ldd	r25, Y+6	; 0x06
     c0a:	01 97       	sbiw	r24, 0x01	; 1
     c0c:	9e 83       	std	Y+6, r25	; 0x06
     c0e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c10:	8d 81       	ldd	r24, Y+5	; 0x05
     c12:	9e 81       	ldd	r25, Y+6	; 0x06
     c14:	00 97       	sbiw	r24, 0x00	; 0
     c16:	69 f7       	brne	.-38     	; 0xbf2 <KeyPad_getPressedKey+0xac>
     c18:	14 c0       	rjmp	.+40     	; 0xc42 <KeyPad_getPressedKey+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c1a:	6f 81       	ldd	r22, Y+7	; 0x07
     c1c:	78 85       	ldd	r23, Y+8	; 0x08
     c1e:	89 85       	ldd	r24, Y+9	; 0x09
     c20:	9a 85       	ldd	r25, Y+10	; 0x0a
     c22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c26:	dc 01       	movw	r26, r24
     c28:	cb 01       	movw	r24, r22
     c2a:	9e 83       	std	Y+6, r25	; 0x06
     c2c:	8d 83       	std	Y+5, r24	; 0x05
     c2e:	8d 81       	ldd	r24, Y+5	; 0x05
     c30:	9e 81       	ldd	r25, Y+6	; 0x06
     c32:	9a 83       	std	Y+2, r25	; 0x02
     c34:	89 83       	std	Y+1, r24	; 0x01
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	9a 81       	ldd	r25, Y+2	; 0x02
     c3a:	01 97       	sbiw	r24, 0x01	; 1
     c3c:	f1 f7       	brne	.-4      	; 0xc3a <KeyPad_getPressedKey+0xf4>
     c3e:	9a 83       	std	Y+2, r25	; 0x02
     c40:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(250); /*delay to make the keypad wait after accepting an input from the user*/
			/*each loop a different column is output and the others are input*/
			KEYPAD_PORT_DIR = (0b00010000<<col);
     c42:	e7 e3       	ldi	r30, 0x37	; 55
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	88 89       	ldd	r24, Y+16	; 0x10
     c48:	28 2f       	mov	r18, r24
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	80 e1       	ldi	r24, 0x10	; 16
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	02 c0       	rjmp	.+4      	; 0xc56 <KeyPad_getPressedKey+0x110>
     c52:	88 0f       	add	r24, r24
     c54:	99 1f       	adc	r25, r25
     c56:	2a 95       	dec	r18
     c58:	e2 f7       	brpl	.-8      	; 0xc52 <KeyPad_getPressedKey+0x10c>
     c5a:	80 83       	st	Z, r24
			/*enable internal pull up resistor for rows and clear the output pin of column*/
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
     c5c:	e8 e3       	ldi	r30, 0x38	; 56
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	88 89       	ldd	r24, Y+16	; 0x10
     c62:	28 2f       	mov	r18, r24
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	80 e1       	ldi	r24, 0x10	; 16
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	02 2e       	mov	r0, r18
     c6c:	02 c0       	rjmp	.+4      	; 0xc72 <KeyPad_getPressedKey+0x12c>
     c6e:	88 0f       	add	r24, r24
     c70:	99 1f       	adc	r25, r25
     c72:	0a 94       	dec	r0
     c74:	e2 f7       	brpl	.-8      	; 0xc6e <KeyPad_getPressedKey+0x128>
     c76:	80 95       	com	r24
     c78:	80 83       	st	Z, r24
			for(row=0;row<N_row;row++) /*rows loop*/
     c7a:	1f 86       	std	Y+15, r1	; 0x0f
     c7c:	2d c0       	rjmp	.+90     	; 0xcd8 <KeyPad_getPressedKey+0x192>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row))
     c7e:	e6 e3       	ldi	r30, 0x36	; 54
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	80 81       	ld	r24, Z
     c84:	28 2f       	mov	r18, r24
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	8f 85       	ldd	r24, Y+15	; 0x0f
     c8a:	88 2f       	mov	r24, r24
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	a9 01       	movw	r20, r18
     c90:	02 c0       	rjmp	.+4      	; 0xc96 <KeyPad_getPressedKey+0x150>
     c92:	55 95       	asr	r21
     c94:	47 95       	ror	r20
     c96:	8a 95       	dec	r24
     c98:	e2 f7       	brpl	.-8      	; 0xc92 <KeyPad_getPressedKey+0x14c>
     c9a:	ca 01       	movw	r24, r20
     c9c:	81 70       	andi	r24, 0x01	; 1
     c9e:	90 70       	andi	r25, 0x00	; 0
     ca0:	00 97       	sbiw	r24, 0x00	; 0
     ca2:	b9 f4       	brne	.+46     	; 0xcd2 <KeyPad_getPressedKey+0x18c>
					/*
					 * if a switch is pressed in the current row apply the equation to-
					 * know the value of the pressed key
					 */
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); /*return the value of the pressed key in keypad 4x3*/
     ca4:	8f 85       	ldd	r24, Y+15	; 0x0f
     ca6:	28 2f       	mov	r18, r24
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	c9 01       	movw	r24, r18
     cac:	88 0f       	add	r24, r24
     cae:	99 1f       	adc	r25, r25
     cb0:	82 0f       	add	r24, r18
     cb2:	93 1f       	adc	r25, r19
     cb4:	98 2f       	mov	r25, r24
     cb6:	88 89       	ldd	r24, Y+16	; 0x10
     cb8:	89 0f       	add	r24, r25
     cba:	8f 5f       	subi	r24, 0xFF	; 255
     cbc:	0e 94 77 06 	call	0xcee	; 0xcee <KeyPad_4x3_adjustKeyNumber>
				}

			}
		}
	}
}
     cc0:	60 96       	adiw	r28, 0x10	; 16
     cc2:	0f b6       	in	r0, 0x3f	; 63
     cc4:	f8 94       	cli
     cc6:	de bf       	out	0x3e, r29	; 62
     cc8:	0f be       	out	0x3f, r0	; 63
     cca:	cd bf       	out	0x3d, r28	; 61
     ccc:	cf 91       	pop	r28
     cce:	df 91       	pop	r29
     cd0:	08 95       	ret
			_delay_ms(250); /*delay to make the keypad wait after accepting an input from the user*/
			/*each loop a different column is output and the others are input*/
			KEYPAD_PORT_DIR = (0b00010000<<col);
			/*enable internal pull up resistor for rows and clear the output pin of column*/
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
			for(row=0;row<N_row;row++) /*rows loop*/
     cd2:	8f 85       	ldd	r24, Y+15	; 0x0f
     cd4:	8f 5f       	subi	r24, 0xFF	; 255
     cd6:	8f 87       	std	Y+15, r24	; 0x0f
     cd8:	8f 85       	ldd	r24, Y+15	; 0x0f
     cda:	84 30       	cpi	r24, 0x04	; 4
     cdc:	80 f2       	brcs	.-96     	; 0xc7e <KeyPad_getPressedKey+0x138>

uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /*colomns loop*/
     cde:	88 89       	ldd	r24, Y+16	; 0x10
     ce0:	8f 5f       	subi	r24, 0xFF	; 255
     ce2:	88 8b       	std	Y+16, r24	; 0x10
     ce4:	88 89       	ldd	r24, Y+16	; 0x10
     ce6:	83 30       	cpi	r24, 0x03	; 3
     ce8:	08 f4       	brcc	.+2      	; 0xcec <KeyPad_getPressedKey+0x1a6>
     cea:	39 cf       	rjmp	.-398    	; 0xb5e <KeyPad_getPressedKey+0x18>
     cec:	36 cf       	rjmp	.-404    	; 0xb5a <KeyPad_getPressedKey+0x14>

00000cee <KeyPad_4x3_adjustKeyNumber>:
}

#if (N_col == 3)

static uint8 KeyPad_4x3_adjustKeyNumber(uint8 button_number)
{
     cee:	df 93       	push	r29
     cf0:	cf 93       	push	r28
     cf2:	00 d0       	rcall	.+0      	; 0xcf4 <KeyPad_4x3_adjustKeyNumber+0x6>
     cf4:	00 d0       	rcall	.+0      	; 0xcf6 <KeyPad_4x3_adjustKeyNumber+0x8>
     cf6:	cd b7       	in	r28, 0x3d	; 61
     cf8:	de b7       	in	r29, 0x3e	; 62
     cfa:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
     cfc:	89 81       	ldd	r24, Y+1	; 0x01
     cfe:	28 2f       	mov	r18, r24
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	3c 83       	std	Y+4, r19	; 0x04
     d04:	2b 83       	std	Y+3, r18	; 0x03
     d06:	8b 81       	ldd	r24, Y+3	; 0x03
     d08:	9c 81       	ldd	r25, Y+4	; 0x04
     d0a:	8a 30       	cpi	r24, 0x0A	; 10
     d0c:	91 05       	cpc	r25, r1
     d0e:	81 f0       	breq	.+32     	; 0xd30 <KeyPad_4x3_adjustKeyNumber+0x42>
     d10:	2b 81       	ldd	r18, Y+3	; 0x03
     d12:	3c 81       	ldd	r19, Y+4	; 0x04
     d14:	2a 30       	cpi	r18, 0x0A	; 10
     d16:	31 05       	cpc	r19, r1
     d18:	9c f0       	brlt	.+38     	; 0xd40 <KeyPad_4x3_adjustKeyNumber+0x52>
     d1a:	8b 81       	ldd	r24, Y+3	; 0x03
     d1c:	9c 81       	ldd	r25, Y+4	; 0x04
     d1e:	8b 30       	cpi	r24, 0x0B	; 11
     d20:	91 05       	cpc	r25, r1
     d22:	49 f0       	breq	.+18     	; 0xd36 <KeyPad_4x3_adjustKeyNumber+0x48>
     d24:	2b 81       	ldd	r18, Y+3	; 0x03
     d26:	3c 81       	ldd	r19, Y+4	; 0x04
     d28:	2c 30       	cpi	r18, 0x0C	; 12
     d2a:	31 05       	cpc	r19, r1
     d2c:	31 f0       	breq	.+12     	; 0xd3a <KeyPad_4x3_adjustKeyNumber+0x4c>
     d2e:	08 c0       	rjmp	.+16     	; 0xd40 <KeyPad_4x3_adjustKeyNumber+0x52>
	{
	/*
	 * function responsible for adjusting the output of some buttons in 4x3 keypad
	 */
		case 10: return '*';
     d30:	3a e2       	ldi	r19, 0x2A	; 42
     d32:	3a 83       	std	Y+2, r19	; 0x02
     d34:	07 c0       	rjmp	.+14     	; 0xd44 <KeyPad_4x3_adjustKeyNumber+0x56>
				 break;
		case 11: return 0;
     d36:	1a 82       	std	Y+2, r1	; 0x02
     d38:	05 c0       	rjmp	.+10     	; 0xd44 <KeyPad_4x3_adjustKeyNumber+0x56>
				 break;
		case 12: return '#';
     d3a:	83 e2       	ldi	r24, 0x23	; 35
     d3c:	8a 83       	std	Y+2, r24	; 0x02
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <KeyPad_4x3_adjustKeyNumber+0x56>
				 break;
		default: return button_number;
     d40:	99 81       	ldd	r25, Y+1	; 0x01
     d42:	9a 83       	std	Y+2, r25	; 0x02
     d44:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
     d46:	0f 90       	pop	r0
     d48:	0f 90       	pop	r0
     d4a:	0f 90       	pop	r0
     d4c:	0f 90       	pop	r0
     d4e:	cf 91       	pop	r28
     d50:	df 91       	pop	r29
     d52:	08 95       	ret

00000d54 <LCD_init>:
#include "lcd.h"



void LCD_init(void)
{
     d54:	df 93       	push	r29
     d56:	cf 93       	push	r28
     d58:	cd b7       	in	r28, 0x3d	; 61
     d5a:	de b7       	in	r29, 0x3e	; 62
     d5c:	2e 97       	sbiw	r28, 0x0e	; 14
     d5e:	0f b6       	in	r0, 0x3f	; 63
     d60:	f8 94       	cli
     d62:	de bf       	out	0x3e, r29	; 62
     d64:	0f be       	out	0x3f, r0	; 63
     d66:	cd bf       	out	0x3d, r28	; 61
	/*
	 * Configure the control pins(E,RS,RW) as output pins
	 */
	LCD_CTRL_DDR |= (1<<RS) | (1<<RW) | (1<<E);
     d68:	a4 e3       	ldi	r26, 0x34	; 52
     d6a:	b0 e0       	ldi	r27, 0x00	; 0
     d6c:	e4 e3       	ldi	r30, 0x34	; 52
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	80 81       	ld	r24, Z
     d72:	87 60       	ori	r24, 0x07	; 7
     d74:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RS);
     d76:	a5 e3       	ldi	r26, 0x35	; 53
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	e5 e3       	ldi	r30, 0x35	; 53
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	8e 7f       	andi	r24, 0xFE	; 254
     d82:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW);
     d84:	a5 e3       	ldi	r26, 0x35	; 53
     d86:	b0 e0       	ldi	r27, 0x00	; 0
     d88:	e5 e3       	ldi	r30, 0x35	; 53
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	8d 7f       	andi	r24, 0xFD	; 253
     d90:	8c 93       	st	X, r24
	SET_BIT(LCD_CTRL_PORT,E);
     d92:	a5 e3       	ldi	r26, 0x35	; 53
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	e5 e3       	ldi	r30, 0x35	; 53
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	84 60       	ori	r24, 0x04	; 4
     d9e:	8c 93       	st	X, r24
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	a0 e8       	ldi	r26, 0x80	; 128
     da6:	bf e3       	ldi	r27, 0x3F	; 63
     da8:	8b 87       	std	Y+11, r24	; 0x0b
     daa:	9c 87       	std	Y+12, r25	; 0x0c
     dac:	ad 87       	std	Y+13, r26	; 0x0d
     dae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     db0:	6b 85       	ldd	r22, Y+11	; 0x0b
     db2:	7c 85       	ldd	r23, Y+12	; 0x0c
     db4:	8d 85       	ldd	r24, Y+13	; 0x0d
     db6:	9e 85       	ldd	r25, Y+14	; 0x0e
     db8:	20 e0       	ldi	r18, 0x00	; 0
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	4a ef       	ldi	r20, 0xFA	; 250
     dbe:	54 e4       	ldi	r21, 0x44	; 68
     dc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dc4:	dc 01       	movw	r26, r24
     dc6:	cb 01       	movw	r24, r22
     dc8:	8f 83       	std	Y+7, r24	; 0x07
     dca:	98 87       	std	Y+8, r25	; 0x08
     dcc:	a9 87       	std	Y+9, r26	; 0x09
     dce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dd0:	6f 81       	ldd	r22, Y+7	; 0x07
     dd2:	78 85       	ldd	r23, Y+8	; 0x08
     dd4:	89 85       	ldd	r24, Y+9	; 0x09
     dd6:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd8:	20 e0       	ldi	r18, 0x00	; 0
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	40 e8       	ldi	r20, 0x80	; 128
     dde:	5f e3       	ldi	r21, 0x3F	; 63
     de0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     de4:	88 23       	and	r24, r24
     de6:	2c f4       	brge	.+10     	; 0xdf2 <LCD_init+0x9e>
		__ticks = 1;
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	9e 83       	std	Y+6, r25	; 0x06
     dee:	8d 83       	std	Y+5, r24	; 0x05
     df0:	3f c0       	rjmp	.+126    	; 0xe70 <LCD_init+0x11c>
	else if (__tmp > 65535)
     df2:	6f 81       	ldd	r22, Y+7	; 0x07
     df4:	78 85       	ldd	r23, Y+8	; 0x08
     df6:	89 85       	ldd	r24, Y+9	; 0x09
     df8:	9a 85       	ldd	r25, Y+10	; 0x0a
     dfa:	20 e0       	ldi	r18, 0x00	; 0
     dfc:	3f ef       	ldi	r19, 0xFF	; 255
     dfe:	4f e7       	ldi	r20, 0x7F	; 127
     e00:	57 e4       	ldi	r21, 0x47	; 71
     e02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e06:	18 16       	cp	r1, r24
     e08:	4c f5       	brge	.+82     	; 0xe5c <LCD_init+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e0a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e0c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e0e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e10:	9e 85       	ldd	r25, Y+14	; 0x0e
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	40 e2       	ldi	r20, 0x20	; 32
     e18:	51 e4       	ldi	r21, 0x41	; 65
     e1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e1e:	dc 01       	movw	r26, r24
     e20:	cb 01       	movw	r24, r22
     e22:	bc 01       	movw	r22, r24
     e24:	cd 01       	movw	r24, r26
     e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e2a:	dc 01       	movw	r26, r24
     e2c:	cb 01       	movw	r24, r22
     e2e:	9e 83       	std	Y+6, r25	; 0x06
     e30:	8d 83       	std	Y+5, r24	; 0x05
     e32:	0f c0       	rjmp	.+30     	; 0xe52 <LCD_init+0xfe>
     e34:	88 ec       	ldi	r24, 0xC8	; 200
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	9c 83       	std	Y+4, r25	; 0x04
     e3a:	8b 83       	std	Y+3, r24	; 0x03
     e3c:	8b 81       	ldd	r24, Y+3	; 0x03
     e3e:	9c 81       	ldd	r25, Y+4	; 0x04
     e40:	01 97       	sbiw	r24, 0x01	; 1
     e42:	f1 f7       	brne	.-4      	; 0xe40 <LCD_init+0xec>
     e44:	9c 83       	std	Y+4, r25	; 0x04
     e46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e48:	8d 81       	ldd	r24, Y+5	; 0x05
     e4a:	9e 81       	ldd	r25, Y+6	; 0x06
     e4c:	01 97       	sbiw	r24, 0x01	; 1
     e4e:	9e 83       	std	Y+6, r25	; 0x06
     e50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e52:	8d 81       	ldd	r24, Y+5	; 0x05
     e54:	9e 81       	ldd	r25, Y+6	; 0x06
     e56:	00 97       	sbiw	r24, 0x00	; 0
     e58:	69 f7       	brne	.-38     	; 0xe34 <LCD_init+0xe0>
     e5a:	14 c0       	rjmp	.+40     	; 0xe84 <LCD_init+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e5c:	6f 81       	ldd	r22, Y+7	; 0x07
     e5e:	78 85       	ldd	r23, Y+8	; 0x08
     e60:	89 85       	ldd	r24, Y+9	; 0x09
     e62:	9a 85       	ldd	r25, Y+10	; 0x0a
     e64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e68:	dc 01       	movw	r26, r24
     e6a:	cb 01       	movw	r24, r22
     e6c:	9e 83       	std	Y+6, r25	; 0x06
     e6e:	8d 83       	std	Y+5, r24	; 0x05
     e70:	8d 81       	ldd	r24, Y+5	; 0x05
     e72:	9e 81       	ldd	r25, Y+6	; 0x06
     e74:	9a 83       	std	Y+2, r25	; 0x02
     e76:	89 83       	std	Y+1, r24	; 0x01
     e78:	89 81       	ldd	r24, Y+1	; 0x01
     e7a:	9a 81       	ldd	r25, Y+2	; 0x02
     e7c:	01 97       	sbiw	r24, 0x01	; 1
     e7e:	f1 f7       	brne	.-4      	; 0xe7c <LCD_init+0x128>
     e80:	9a 83       	std	Y+2, r25	; 0x02
     e82:	89 83       	std	Y+1, r24	; 0x01
	LCD_sendCommand(ONE_LINE_EIGHT_BIT_MODE);
	#elif(LCD_LINES == 1 && LCD_MODE == 4)
	LCD_DATA_DDR|= LCD_SEL_PINS;
	LCD_sendCommand(ONE_LINE_FOUR_BIT_MODE);
	#elif(LCD_LINES == 2 && LCD_MODE == 8)
	LCD_DATA_DDR=0XFF;/* Configure the data port as output port */
     e84:	ea e3       	ldi	r30, 0x3A	; 58
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	8f ef       	ldi	r24, 0xFF	; 255
     e8a:	80 83       	st	Z, r24
	LCD_sendCommand(TWO_LINE_EIGHT_BIT_MODE);
     e8c:	88 e3       	ldi	r24, 0x38	; 56
     e8e:	0e 94 58 07 	call	0xeb0	; 0xeb0 <LCD_sendCommand>
	#elif(LCD_LINES == 2 && LCD_MODE == 4)
	LCD_DATA_DDR|= LCD_SEL_PINS;
	LCD_sendCommand(TWO_LINE_FOUR_BIT_MODE);
	#endif
	LCD_sendCommand(CURSOR_OFF);/* turn off cursor */
     e92:	8c e0       	ldi	r24, 0x0C	; 12
     e94:	0e 94 58 07 	call	0xeb0	; 0xeb0 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_DISPLAY_SCREEN); /* clear LCD at the beginning */
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	0e 94 58 07 	call	0xeb0	; 0xeb0 <LCD_sendCommand>

}
     e9e:	2e 96       	adiw	r28, 0x0e	; 14
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	f8 94       	cli
     ea4:	de bf       	out	0x3e, r29	; 62
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	cd bf       	out	0x3d, r28	; 61
     eaa:	cf 91       	pop	r28
     eac:	df 91       	pop	r29
     eae:	08 95       	ret

00000eb0 <LCD_sendCommand>:
void LCD_sendCommand(uint8 command)
{
     eb0:	0f 93       	push	r16
     eb2:	1f 93       	push	r17
     eb4:	df 93       	push	r29
     eb6:	cf 93       	push	r28
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
     ebc:	c7 54       	subi	r28, 0x47	; 71
     ebe:	d0 40       	sbci	r29, 0x00	; 0
     ec0:	0f b6       	in	r0, 0x3f	; 63
     ec2:	f8 94       	cli
     ec4:	de bf       	out	0x3e, r29	; 62
     ec6:	0f be       	out	0x3f, r0	; 63
     ec8:	cd bf       	out	0x3d, r28	; 61
     eca:	fe 01       	movw	r30, r28
     ecc:	e9 5b       	subi	r30, 0xB9	; 185
     ece:	ff 4f       	sbci	r31, 0xFF	; 255
     ed0:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT,RS);/* Instruction  RS=0 */
     ed2:	a5 e3       	ldi	r26, 0x35	; 53
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	e5 e3       	ldi	r30, 0x35	; 53
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	8e 7f       	andi	r24, 0xFE	; 254
     ede:	8c 93       	st	X, r24
     ee0:	fe 01       	movw	r30, r28
     ee2:	ed 5b       	subi	r30, 0xBD	; 189
     ee4:	ff 4f       	sbci	r31, 0xFF	; 255
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	a0 e8       	ldi	r26, 0x80	; 128
     eec:	bf e3       	ldi	r27, 0x3F	; 63
     eee:	80 83       	st	Z, r24
     ef0:	91 83       	std	Z+1, r25	; 0x01
     ef2:	a2 83       	std	Z+2, r26	; 0x02
     ef4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ef6:	8e 01       	movw	r16, r28
     ef8:	01 5c       	subi	r16, 0xC1	; 193
     efa:	1f 4f       	sbci	r17, 0xFF	; 255
     efc:	fe 01       	movw	r30, r28
     efe:	ed 5b       	subi	r30, 0xBD	; 189
     f00:	ff 4f       	sbci	r31, 0xFF	; 255
     f02:	60 81       	ld	r22, Z
     f04:	71 81       	ldd	r23, Z+1	; 0x01
     f06:	82 81       	ldd	r24, Z+2	; 0x02
     f08:	93 81       	ldd	r25, Z+3	; 0x03
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	4a ef       	ldi	r20, 0xFA	; 250
     f10:	54 e4       	ldi	r21, 0x44	; 68
     f12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f16:	dc 01       	movw	r26, r24
     f18:	cb 01       	movw	r24, r22
     f1a:	f8 01       	movw	r30, r16
     f1c:	80 83       	st	Z, r24
     f1e:	91 83       	std	Z+1, r25	; 0x01
     f20:	a2 83       	std	Z+2, r26	; 0x02
     f22:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f24:	fe 01       	movw	r30, r28
     f26:	ff 96       	adiw	r30, 0x3f	; 63
     f28:	60 81       	ld	r22, Z
     f2a:	71 81       	ldd	r23, Z+1	; 0x01
     f2c:	82 81       	ldd	r24, Z+2	; 0x02
     f2e:	93 81       	ldd	r25, Z+3	; 0x03
     f30:	20 e0       	ldi	r18, 0x00	; 0
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	40 e8       	ldi	r20, 0x80	; 128
     f36:	5f e3       	ldi	r21, 0x3F	; 63
     f38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f3c:	88 23       	and	r24, r24
     f3e:	2c f4       	brge	.+10     	; 0xf4a <LCD_sendCommand+0x9a>
		__ticks = 1;
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	9e af       	std	Y+62, r25	; 0x3e
     f46:	8d af       	std	Y+61, r24	; 0x3d
     f48:	46 c0       	rjmp	.+140    	; 0xfd6 <LCD_sendCommand+0x126>
	else if (__tmp > 65535)
     f4a:	fe 01       	movw	r30, r28
     f4c:	ff 96       	adiw	r30, 0x3f	; 63
     f4e:	60 81       	ld	r22, Z
     f50:	71 81       	ldd	r23, Z+1	; 0x01
     f52:	82 81       	ldd	r24, Z+2	; 0x02
     f54:	93 81       	ldd	r25, Z+3	; 0x03
     f56:	20 e0       	ldi	r18, 0x00	; 0
     f58:	3f ef       	ldi	r19, 0xFF	; 255
     f5a:	4f e7       	ldi	r20, 0x7F	; 127
     f5c:	57 e4       	ldi	r21, 0x47	; 71
     f5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f62:	18 16       	cp	r1, r24
     f64:	64 f5       	brge	.+88     	; 0xfbe <LCD_sendCommand+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f66:	fe 01       	movw	r30, r28
     f68:	ed 5b       	subi	r30, 0xBD	; 189
     f6a:	ff 4f       	sbci	r31, 0xFF	; 255
     f6c:	60 81       	ld	r22, Z
     f6e:	71 81       	ldd	r23, Z+1	; 0x01
     f70:	82 81       	ldd	r24, Z+2	; 0x02
     f72:	93 81       	ldd	r25, Z+3	; 0x03
     f74:	20 e0       	ldi	r18, 0x00	; 0
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	40 e2       	ldi	r20, 0x20	; 32
     f7a:	51 e4       	ldi	r21, 0x41	; 65
     f7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f80:	dc 01       	movw	r26, r24
     f82:	cb 01       	movw	r24, r22
     f84:	bc 01       	movw	r22, r24
     f86:	cd 01       	movw	r24, r26
     f88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f8c:	dc 01       	movw	r26, r24
     f8e:	cb 01       	movw	r24, r22
     f90:	9e af       	std	Y+62, r25	; 0x3e
     f92:	8d af       	std	Y+61, r24	; 0x3d
     f94:	0f c0       	rjmp	.+30     	; 0xfb4 <LCD_sendCommand+0x104>
     f96:	88 ec       	ldi	r24, 0xC8	; 200
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	9c af       	std	Y+60, r25	; 0x3c
     f9c:	8b af       	std	Y+59, r24	; 0x3b
     f9e:	8b ad       	ldd	r24, Y+59	; 0x3b
     fa0:	9c ad       	ldd	r25, Y+60	; 0x3c
     fa2:	01 97       	sbiw	r24, 0x01	; 1
     fa4:	f1 f7       	brne	.-4      	; 0xfa2 <LCD_sendCommand+0xf2>
     fa6:	9c af       	std	Y+60, r25	; 0x3c
     fa8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     faa:	8d ad       	ldd	r24, Y+61	; 0x3d
     fac:	9e ad       	ldd	r25, Y+62	; 0x3e
     fae:	01 97       	sbiw	r24, 0x01	; 1
     fb0:	9e af       	std	Y+62, r25	; 0x3e
     fb2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fb4:	8d ad       	ldd	r24, Y+61	; 0x3d
     fb6:	9e ad       	ldd	r25, Y+62	; 0x3e
     fb8:	00 97       	sbiw	r24, 0x00	; 0
     fba:	69 f7       	brne	.-38     	; 0xf96 <LCD_sendCommand+0xe6>
     fbc:	16 c0       	rjmp	.+44     	; 0xfea <LCD_sendCommand+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fbe:	fe 01       	movw	r30, r28
     fc0:	ff 96       	adiw	r30, 0x3f	; 63
     fc2:	60 81       	ld	r22, Z
     fc4:	71 81       	ldd	r23, Z+1	; 0x01
     fc6:	82 81       	ldd	r24, Z+2	; 0x02
     fc8:	93 81       	ldd	r25, Z+3	; 0x03
     fca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fce:	dc 01       	movw	r26, r24
     fd0:	cb 01       	movw	r24, r22
     fd2:	9e af       	std	Y+62, r25	; 0x3e
     fd4:	8d af       	std	Y+61, r24	; 0x3d
     fd6:	8d ad       	ldd	r24, Y+61	; 0x3d
     fd8:	9e ad       	ldd	r25, Y+62	; 0x3e
     fda:	9a af       	std	Y+58, r25	; 0x3a
     fdc:	89 af       	std	Y+57, r24	; 0x39
     fde:	89 ad       	ldd	r24, Y+57	; 0x39
     fe0:	9a ad       	ldd	r25, Y+58	; 0x3a
     fe2:	01 97       	sbiw	r24, 0x01	; 1
     fe4:	f1 f7       	brne	.-4      	; 0xfe2 <LCD_sendCommand+0x132>
     fe6:	9a af       	std	Y+58, r25	; 0x3a
     fe8:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1); /* add delay for lcd processing */
	CLEAR_BIT(LCD_CTRL_PORT,RW);/* Instruction  RW=0 to write data */
     fea:	a5 e3       	ldi	r26, 0x35	; 53
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	e5 e3       	ldi	r30, 0x35	; 53
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	8d 7f       	andi	r24, 0xFD	; 253
     ff6:	8c 93       	st	X, r24
     ff8:	80 e0       	ldi	r24, 0x00	; 0
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	a0 e8       	ldi	r26, 0x80	; 128
     ffe:	bf e3       	ldi	r27, 0x3F	; 63
    1000:	8d ab       	std	Y+53, r24	; 0x35
    1002:	9e ab       	std	Y+54, r25	; 0x36
    1004:	af ab       	std	Y+55, r26	; 0x37
    1006:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1008:	6d a9       	ldd	r22, Y+53	; 0x35
    100a:	7e a9       	ldd	r23, Y+54	; 0x36
    100c:	8f a9       	ldd	r24, Y+55	; 0x37
    100e:	98 ad       	ldd	r25, Y+56	; 0x38
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	4a ef       	ldi	r20, 0xFA	; 250
    1016:	54 e4       	ldi	r21, 0x44	; 68
    1018:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    101c:	dc 01       	movw	r26, r24
    101e:	cb 01       	movw	r24, r22
    1020:	89 ab       	std	Y+49, r24	; 0x31
    1022:	9a ab       	std	Y+50, r25	; 0x32
    1024:	ab ab       	std	Y+51, r26	; 0x33
    1026:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1028:	69 a9       	ldd	r22, Y+49	; 0x31
    102a:	7a a9       	ldd	r23, Y+50	; 0x32
    102c:	8b a9       	ldd	r24, Y+51	; 0x33
    102e:	9c a9       	ldd	r25, Y+52	; 0x34
    1030:	20 e0       	ldi	r18, 0x00	; 0
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	40 e8       	ldi	r20, 0x80	; 128
    1036:	5f e3       	ldi	r21, 0x3F	; 63
    1038:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    103c:	88 23       	and	r24, r24
    103e:	2c f4       	brge	.+10     	; 0x104a <LCD_sendCommand+0x19a>
		__ticks = 1;
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	98 ab       	std	Y+48, r25	; 0x30
    1046:	8f a7       	std	Y+47, r24	; 0x2f
    1048:	3f c0       	rjmp	.+126    	; 0x10c8 <LCD_sendCommand+0x218>
	else if (__tmp > 65535)
    104a:	69 a9       	ldd	r22, Y+49	; 0x31
    104c:	7a a9       	ldd	r23, Y+50	; 0x32
    104e:	8b a9       	ldd	r24, Y+51	; 0x33
    1050:	9c a9       	ldd	r25, Y+52	; 0x34
    1052:	20 e0       	ldi	r18, 0x00	; 0
    1054:	3f ef       	ldi	r19, 0xFF	; 255
    1056:	4f e7       	ldi	r20, 0x7F	; 127
    1058:	57 e4       	ldi	r21, 0x47	; 71
    105a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    105e:	18 16       	cp	r1, r24
    1060:	4c f5       	brge	.+82     	; 0x10b4 <LCD_sendCommand+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1062:	6d a9       	ldd	r22, Y+53	; 0x35
    1064:	7e a9       	ldd	r23, Y+54	; 0x36
    1066:	8f a9       	ldd	r24, Y+55	; 0x37
    1068:	98 ad       	ldd	r25, Y+56	; 0x38
    106a:	20 e0       	ldi	r18, 0x00	; 0
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	40 e2       	ldi	r20, 0x20	; 32
    1070:	51 e4       	ldi	r21, 0x41	; 65
    1072:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1076:	dc 01       	movw	r26, r24
    1078:	cb 01       	movw	r24, r22
    107a:	bc 01       	movw	r22, r24
    107c:	cd 01       	movw	r24, r26
    107e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1082:	dc 01       	movw	r26, r24
    1084:	cb 01       	movw	r24, r22
    1086:	98 ab       	std	Y+48, r25	; 0x30
    1088:	8f a7       	std	Y+47, r24	; 0x2f
    108a:	0f c0       	rjmp	.+30     	; 0x10aa <LCD_sendCommand+0x1fa>
    108c:	88 ec       	ldi	r24, 0xC8	; 200
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	9e a7       	std	Y+46, r25	; 0x2e
    1092:	8d a7       	std	Y+45, r24	; 0x2d
    1094:	8d a5       	ldd	r24, Y+45	; 0x2d
    1096:	9e a5       	ldd	r25, Y+46	; 0x2e
    1098:	01 97       	sbiw	r24, 0x01	; 1
    109a:	f1 f7       	brne	.-4      	; 0x1098 <LCD_sendCommand+0x1e8>
    109c:	9e a7       	std	Y+46, r25	; 0x2e
    109e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    10a2:	98 a9       	ldd	r25, Y+48	; 0x30
    10a4:	01 97       	sbiw	r24, 0x01	; 1
    10a6:	98 ab       	std	Y+48, r25	; 0x30
    10a8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    10ac:	98 a9       	ldd	r25, Y+48	; 0x30
    10ae:	00 97       	sbiw	r24, 0x00	; 0
    10b0:	69 f7       	brne	.-38     	; 0x108c <LCD_sendCommand+0x1dc>
    10b2:	14 c0       	rjmp	.+40     	; 0x10dc <LCD_sendCommand+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10b4:	69 a9       	ldd	r22, Y+49	; 0x31
    10b6:	7a a9       	ldd	r23, Y+50	; 0x32
    10b8:	8b a9       	ldd	r24, Y+51	; 0x33
    10ba:	9c a9       	ldd	r25, Y+52	; 0x34
    10bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10c0:	dc 01       	movw	r26, r24
    10c2:	cb 01       	movw	r24, r22
    10c4:	98 ab       	std	Y+48, r25	; 0x30
    10c6:	8f a7       	std	Y+47, r24	; 0x2f
    10c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    10ca:	98 a9       	ldd	r25, Y+48	; 0x30
    10cc:	9c a7       	std	Y+44, r25	; 0x2c
    10ce:	8b a7       	std	Y+43, r24	; 0x2b
    10d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    10d2:	9c a5       	ldd	r25, Y+44	; 0x2c
    10d4:	01 97       	sbiw	r24, 0x01	; 1
    10d6:	f1 f7       	brne	.-4      	; 0x10d4 <LCD_sendCommand+0x224>
    10d8:	9c a7       	std	Y+44, r25	; 0x2c
    10da:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* add delay for lcd processing */
	SET_BIT(LCD_CTRL_PORT,E);/* Enable LCD */
    10dc:	a5 e3       	ldi	r26, 0x35	; 53
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	e5 e3       	ldi	r30, 0x35	; 53
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	84 60       	ori	r24, 0x04	; 4
    10e8:	8c 93       	st	X, r24
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	a0 e8       	ldi	r26, 0x80	; 128
    10f0:	bf e3       	ldi	r27, 0x3F	; 63
    10f2:	8f a3       	std	Y+39, r24	; 0x27
    10f4:	98 a7       	std	Y+40, r25	; 0x28
    10f6:	a9 a7       	std	Y+41, r26	; 0x29
    10f8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10fa:	6f a1       	ldd	r22, Y+39	; 0x27
    10fc:	78 a5       	ldd	r23, Y+40	; 0x28
    10fe:	89 a5       	ldd	r24, Y+41	; 0x29
    1100:	9a a5       	ldd	r25, Y+42	; 0x2a
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	4a ef       	ldi	r20, 0xFA	; 250
    1108:	54 e4       	ldi	r21, 0x44	; 68
    110a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    110e:	dc 01       	movw	r26, r24
    1110:	cb 01       	movw	r24, r22
    1112:	8b a3       	std	Y+35, r24	; 0x23
    1114:	9c a3       	std	Y+36, r25	; 0x24
    1116:	ad a3       	std	Y+37, r26	; 0x25
    1118:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    111a:	6b a1       	ldd	r22, Y+35	; 0x23
    111c:	7c a1       	ldd	r23, Y+36	; 0x24
    111e:	8d a1       	ldd	r24, Y+37	; 0x25
    1120:	9e a1       	ldd	r25, Y+38	; 0x26
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	40 e8       	ldi	r20, 0x80	; 128
    1128:	5f e3       	ldi	r21, 0x3F	; 63
    112a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    112e:	88 23       	and	r24, r24
    1130:	2c f4       	brge	.+10     	; 0x113c <LCD_sendCommand+0x28c>
		__ticks = 1;
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	9a a3       	std	Y+34, r25	; 0x22
    1138:	89 a3       	std	Y+33, r24	; 0x21
    113a:	3f c0       	rjmp	.+126    	; 0x11ba <LCD_sendCommand+0x30a>
	else if (__tmp > 65535)
    113c:	6b a1       	ldd	r22, Y+35	; 0x23
    113e:	7c a1       	ldd	r23, Y+36	; 0x24
    1140:	8d a1       	ldd	r24, Y+37	; 0x25
    1142:	9e a1       	ldd	r25, Y+38	; 0x26
    1144:	20 e0       	ldi	r18, 0x00	; 0
    1146:	3f ef       	ldi	r19, 0xFF	; 255
    1148:	4f e7       	ldi	r20, 0x7F	; 127
    114a:	57 e4       	ldi	r21, 0x47	; 71
    114c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1150:	18 16       	cp	r1, r24
    1152:	4c f5       	brge	.+82     	; 0x11a6 <LCD_sendCommand+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1154:	6f a1       	ldd	r22, Y+39	; 0x27
    1156:	78 a5       	ldd	r23, Y+40	; 0x28
    1158:	89 a5       	ldd	r24, Y+41	; 0x29
    115a:	9a a5       	ldd	r25, Y+42	; 0x2a
    115c:	20 e0       	ldi	r18, 0x00	; 0
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	40 e2       	ldi	r20, 0x20	; 32
    1162:	51 e4       	ldi	r21, 0x41	; 65
    1164:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1168:	dc 01       	movw	r26, r24
    116a:	cb 01       	movw	r24, r22
    116c:	bc 01       	movw	r22, r24
    116e:	cd 01       	movw	r24, r26
    1170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1174:	dc 01       	movw	r26, r24
    1176:	cb 01       	movw	r24, r22
    1178:	9a a3       	std	Y+34, r25	; 0x22
    117a:	89 a3       	std	Y+33, r24	; 0x21
    117c:	0f c0       	rjmp	.+30     	; 0x119c <LCD_sendCommand+0x2ec>
    117e:	88 ec       	ldi	r24, 0xC8	; 200
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	98 a3       	std	Y+32, r25	; 0x20
    1184:	8f 8f       	std	Y+31, r24	; 0x1f
    1186:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1188:	98 a1       	ldd	r25, Y+32	; 0x20
    118a:	01 97       	sbiw	r24, 0x01	; 1
    118c:	f1 f7       	brne	.-4      	; 0x118a <LCD_sendCommand+0x2da>
    118e:	98 a3       	std	Y+32, r25	; 0x20
    1190:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1192:	89 a1       	ldd	r24, Y+33	; 0x21
    1194:	9a a1       	ldd	r25, Y+34	; 0x22
    1196:	01 97       	sbiw	r24, 0x01	; 1
    1198:	9a a3       	std	Y+34, r25	; 0x22
    119a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    119c:	89 a1       	ldd	r24, Y+33	; 0x21
    119e:	9a a1       	ldd	r25, Y+34	; 0x22
    11a0:	00 97       	sbiw	r24, 0x00	; 0
    11a2:	69 f7       	brne	.-38     	; 0x117e <LCD_sendCommand+0x2ce>
    11a4:	14 c0       	rjmp	.+40     	; 0x11ce <LCD_sendCommand+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11a6:	6b a1       	ldd	r22, Y+35	; 0x23
    11a8:	7c a1       	ldd	r23, Y+36	; 0x24
    11aa:	8d a1       	ldd	r24, Y+37	; 0x25
    11ac:	9e a1       	ldd	r25, Y+38	; 0x26
    11ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11b2:	dc 01       	movw	r26, r24
    11b4:	cb 01       	movw	r24, r22
    11b6:	9a a3       	std	Y+34, r25	; 0x22
    11b8:	89 a3       	std	Y+33, r24	; 0x21
    11ba:	89 a1       	ldd	r24, Y+33	; 0x21
    11bc:	9a a1       	ldd	r25, Y+34	; 0x22
    11be:	9e 8f       	std	Y+30, r25	; 0x1e
    11c0:	8d 8f       	std	Y+29, r24	; 0x1d
    11c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11c4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11c6:	01 97       	sbiw	r24, 0x01	; 1
    11c8:	f1 f7       	brne	.-4      	; 0x11c6 <LCD_sendCommand+0x316>
    11ca:	9e 8f       	std	Y+30, r25	; 0x1e
    11cc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);/* add delay for lcd processing */
	#if (LCD_MODE == 8)
	LCD_DATA_PORT = command;
    11ce:	ab e3       	ldi	r26, 0x3B	; 59
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	fe 01       	movw	r30, r28
    11d4:	e9 5b       	subi	r30, 0xB9	; 185
    11d6:	ff 4f       	sbci	r31, 0xFF	; 255
    11d8:	80 81       	ld	r24, Z
    11da:	8c 93       	st	X, r24
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	a0 e8       	ldi	r26, 0x80	; 128
    11e2:	bf e3       	ldi	r27, 0x3F	; 63
    11e4:	89 8f       	std	Y+25, r24	; 0x19
    11e6:	9a 8f       	std	Y+26, r25	; 0x1a
    11e8:	ab 8f       	std	Y+27, r26	; 0x1b
    11ea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11ec:	69 8d       	ldd	r22, Y+25	; 0x19
    11ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11f4:	20 e0       	ldi	r18, 0x00	; 0
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	4a ef       	ldi	r20, 0xFA	; 250
    11fa:	54 e4       	ldi	r21, 0x44	; 68
    11fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1200:	dc 01       	movw	r26, r24
    1202:	cb 01       	movw	r24, r22
    1204:	8d 8b       	std	Y+21, r24	; 0x15
    1206:	9e 8b       	std	Y+22, r25	; 0x16
    1208:	af 8b       	std	Y+23, r26	; 0x17
    120a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    120c:	6d 89       	ldd	r22, Y+21	; 0x15
    120e:	7e 89       	ldd	r23, Y+22	; 0x16
    1210:	8f 89       	ldd	r24, Y+23	; 0x17
    1212:	98 8d       	ldd	r25, Y+24	; 0x18
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	40 e8       	ldi	r20, 0x80	; 128
    121a:	5f e3       	ldi	r21, 0x3F	; 63
    121c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1220:	88 23       	and	r24, r24
    1222:	2c f4       	brge	.+10     	; 0x122e <LCD_sendCommand+0x37e>
		__ticks = 1;
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	9c 8b       	std	Y+20, r25	; 0x14
    122a:	8b 8b       	std	Y+19, r24	; 0x13
    122c:	3f c0       	rjmp	.+126    	; 0x12ac <LCD_sendCommand+0x3fc>
	else if (__tmp > 65535)
    122e:	6d 89       	ldd	r22, Y+21	; 0x15
    1230:	7e 89       	ldd	r23, Y+22	; 0x16
    1232:	8f 89       	ldd	r24, Y+23	; 0x17
    1234:	98 8d       	ldd	r25, Y+24	; 0x18
    1236:	20 e0       	ldi	r18, 0x00	; 0
    1238:	3f ef       	ldi	r19, 0xFF	; 255
    123a:	4f e7       	ldi	r20, 0x7F	; 127
    123c:	57 e4       	ldi	r21, 0x47	; 71
    123e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1242:	18 16       	cp	r1, r24
    1244:	4c f5       	brge	.+82     	; 0x1298 <LCD_sendCommand+0x3e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1246:	69 8d       	ldd	r22, Y+25	; 0x19
    1248:	7a 8d       	ldd	r23, Y+26	; 0x1a
    124a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    124c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    124e:	20 e0       	ldi	r18, 0x00	; 0
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	40 e2       	ldi	r20, 0x20	; 32
    1254:	51 e4       	ldi	r21, 0x41	; 65
    1256:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    125a:	dc 01       	movw	r26, r24
    125c:	cb 01       	movw	r24, r22
    125e:	bc 01       	movw	r22, r24
    1260:	cd 01       	movw	r24, r26
    1262:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1266:	dc 01       	movw	r26, r24
    1268:	cb 01       	movw	r24, r22
    126a:	9c 8b       	std	Y+20, r25	; 0x14
    126c:	8b 8b       	std	Y+19, r24	; 0x13
    126e:	0f c0       	rjmp	.+30     	; 0x128e <LCD_sendCommand+0x3de>
    1270:	88 ec       	ldi	r24, 0xC8	; 200
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	9a 8b       	std	Y+18, r25	; 0x12
    1276:	89 8b       	std	Y+17, r24	; 0x11
    1278:	89 89       	ldd	r24, Y+17	; 0x11
    127a:	9a 89       	ldd	r25, Y+18	; 0x12
    127c:	01 97       	sbiw	r24, 0x01	; 1
    127e:	f1 f7       	brne	.-4      	; 0x127c <LCD_sendCommand+0x3cc>
    1280:	9a 8b       	std	Y+18, r25	; 0x12
    1282:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1284:	8b 89       	ldd	r24, Y+19	; 0x13
    1286:	9c 89       	ldd	r25, Y+20	; 0x14
    1288:	01 97       	sbiw	r24, 0x01	; 1
    128a:	9c 8b       	std	Y+20, r25	; 0x14
    128c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    128e:	8b 89       	ldd	r24, Y+19	; 0x13
    1290:	9c 89       	ldd	r25, Y+20	; 0x14
    1292:	00 97       	sbiw	r24, 0x00	; 0
    1294:	69 f7       	brne	.-38     	; 0x1270 <LCD_sendCommand+0x3c0>
    1296:	14 c0       	rjmp	.+40     	; 0x12c0 <LCD_sendCommand+0x410>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1298:	6d 89       	ldd	r22, Y+21	; 0x15
    129a:	7e 89       	ldd	r23, Y+22	; 0x16
    129c:	8f 89       	ldd	r24, Y+23	; 0x17
    129e:	98 8d       	ldd	r25, Y+24	; 0x18
    12a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a4:	dc 01       	movw	r26, r24
    12a6:	cb 01       	movw	r24, r22
    12a8:	9c 8b       	std	Y+20, r25	; 0x14
    12aa:	8b 8b       	std	Y+19, r24	; 0x13
    12ac:	8b 89       	ldd	r24, Y+19	; 0x13
    12ae:	9c 89       	ldd	r25, Y+20	; 0x14
    12b0:	98 8b       	std	Y+16, r25	; 0x10
    12b2:	8f 87       	std	Y+15, r24	; 0x0f
    12b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    12b6:	98 89       	ldd	r25, Y+16	; 0x10
    12b8:	01 97       	sbiw	r24, 0x01	; 1
    12ba:	f1 f7       	brne	.-4      	; 0x12b8 <LCD_sendCommand+0x408>
    12bc:	98 8b       	std	Y+16, r25	; 0x10
    12be:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	command = (command << 4) | (command >> 4);
	LCD_DATA_PORT=(LCD_DATA_PORT & LCD_SEL_PINS ) | (command & LCD_SEL_PINS);
	#endif
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT,E);/* Clear E in lcd */
    12c0:	a5 e3       	ldi	r26, 0x35	; 53
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	e5 e3       	ldi	r30, 0x35	; 53
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	8b 7f       	andi	r24, 0xFB	; 251
    12cc:	8c 93       	st	X, r24
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	a0 e8       	ldi	r26, 0x80	; 128
    12d4:	bf e3       	ldi	r27, 0x3F	; 63
    12d6:	8b 87       	std	Y+11, r24	; 0x0b
    12d8:	9c 87       	std	Y+12, r25	; 0x0c
    12da:	ad 87       	std	Y+13, r26	; 0x0d
    12dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12de:	6b 85       	ldd	r22, Y+11	; 0x0b
    12e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    12e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    12e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	4a ef       	ldi	r20, 0xFA	; 250
    12ec:	54 e4       	ldi	r21, 0x44	; 68
    12ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f2:	dc 01       	movw	r26, r24
    12f4:	cb 01       	movw	r24, r22
    12f6:	8f 83       	std	Y+7, r24	; 0x07
    12f8:	98 87       	std	Y+8, r25	; 0x08
    12fa:	a9 87       	std	Y+9, r26	; 0x09
    12fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1300:	78 85       	ldd	r23, Y+8	; 0x08
    1302:	89 85       	ldd	r24, Y+9	; 0x09
    1304:	9a 85       	ldd	r25, Y+10	; 0x0a
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	40 e8       	ldi	r20, 0x80	; 128
    130c:	5f e3       	ldi	r21, 0x3F	; 63
    130e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1312:	88 23       	and	r24, r24
    1314:	2c f4       	brge	.+10     	; 0x1320 <LCD_sendCommand+0x470>
		__ticks = 1;
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	9e 83       	std	Y+6, r25	; 0x06
    131c:	8d 83       	std	Y+5, r24	; 0x05
    131e:	3f c0       	rjmp	.+126    	; 0x139e <LCD_sendCommand+0x4ee>
	else if (__tmp > 65535)
    1320:	6f 81       	ldd	r22, Y+7	; 0x07
    1322:	78 85       	ldd	r23, Y+8	; 0x08
    1324:	89 85       	ldd	r24, Y+9	; 0x09
    1326:	9a 85       	ldd	r25, Y+10	; 0x0a
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	3f ef       	ldi	r19, 0xFF	; 255
    132c:	4f e7       	ldi	r20, 0x7F	; 127
    132e:	57 e4       	ldi	r21, 0x47	; 71
    1330:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1334:	18 16       	cp	r1, r24
    1336:	4c f5       	brge	.+82     	; 0x138a <LCD_sendCommand+0x4da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1338:	6b 85       	ldd	r22, Y+11	; 0x0b
    133a:	7c 85       	ldd	r23, Y+12	; 0x0c
    133c:	8d 85       	ldd	r24, Y+13	; 0x0d
    133e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1340:	20 e0       	ldi	r18, 0x00	; 0
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	40 e2       	ldi	r20, 0x20	; 32
    1346:	51 e4       	ldi	r21, 0x41	; 65
    1348:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    134c:	dc 01       	movw	r26, r24
    134e:	cb 01       	movw	r24, r22
    1350:	bc 01       	movw	r22, r24
    1352:	cd 01       	movw	r24, r26
    1354:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1358:	dc 01       	movw	r26, r24
    135a:	cb 01       	movw	r24, r22
    135c:	9e 83       	std	Y+6, r25	; 0x06
    135e:	8d 83       	std	Y+5, r24	; 0x05
    1360:	0f c0       	rjmp	.+30     	; 0x1380 <LCD_sendCommand+0x4d0>
    1362:	88 ec       	ldi	r24, 0xC8	; 200
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	9c 83       	std	Y+4, r25	; 0x04
    1368:	8b 83       	std	Y+3, r24	; 0x03
    136a:	8b 81       	ldd	r24, Y+3	; 0x03
    136c:	9c 81       	ldd	r25, Y+4	; 0x04
    136e:	01 97       	sbiw	r24, 0x01	; 1
    1370:	f1 f7       	brne	.-4      	; 0x136e <LCD_sendCommand+0x4be>
    1372:	9c 83       	std	Y+4, r25	; 0x04
    1374:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1376:	8d 81       	ldd	r24, Y+5	; 0x05
    1378:	9e 81       	ldd	r25, Y+6	; 0x06
    137a:	01 97       	sbiw	r24, 0x01	; 1
    137c:	9e 83       	std	Y+6, r25	; 0x06
    137e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1380:	8d 81       	ldd	r24, Y+5	; 0x05
    1382:	9e 81       	ldd	r25, Y+6	; 0x06
    1384:	00 97       	sbiw	r24, 0x00	; 0
    1386:	69 f7       	brne	.-38     	; 0x1362 <LCD_sendCommand+0x4b2>
    1388:	14 c0       	rjmp	.+40     	; 0x13b2 <LCD_sendCommand+0x502>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    138a:	6f 81       	ldd	r22, Y+7	; 0x07
    138c:	78 85       	ldd	r23, Y+8	; 0x08
    138e:	89 85       	ldd	r24, Y+9	; 0x09
    1390:	9a 85       	ldd	r25, Y+10	; 0x0a
    1392:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1396:	dc 01       	movw	r26, r24
    1398:	cb 01       	movw	r24, r22
    139a:	9e 83       	std	Y+6, r25	; 0x06
    139c:	8d 83       	std	Y+5, r24	; 0x05
    139e:	8d 81       	ldd	r24, Y+5	; 0x05
    13a0:	9e 81       	ldd	r25, Y+6	; 0x06
    13a2:	9a 83       	std	Y+2, r25	; 0x02
    13a4:	89 83       	std	Y+1, r24	; 0x01
    13a6:	89 81       	ldd	r24, Y+1	; 0x01
    13a8:	9a 81       	ldd	r25, Y+2	; 0x02
    13aa:	01 97       	sbiw	r24, 0x01	; 1
    13ac:	f1 f7       	brne	.-4      	; 0x13aa <LCD_sendCommand+0x4fa>
    13ae:	9a 83       	std	Y+2, r25	; 0x02
    13b0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    13b2:	c9 5b       	subi	r28, 0xB9	; 185
    13b4:	df 4f       	sbci	r29, 0xFF	; 255
    13b6:	0f b6       	in	r0, 0x3f	; 63
    13b8:	f8 94       	cli
    13ba:	de bf       	out	0x3e, r29	; 62
    13bc:	0f be       	out	0x3f, r0	; 63
    13be:	cd bf       	out	0x3d, r28	; 61
    13c0:	cf 91       	pop	r28
    13c2:	df 91       	pop	r29
    13c4:	1f 91       	pop	r17
    13c6:	0f 91       	pop	r16
    13c8:	08 95       	ret

000013ca <LCD_displayCharacter>:
void LCD_displayCharacter(uint8 data)
{
    13ca:	0f 93       	push	r16
    13cc:	1f 93       	push	r17
    13ce:	df 93       	push	r29
    13d0:	cf 93       	push	r28
    13d2:	cd b7       	in	r28, 0x3d	; 61
    13d4:	de b7       	in	r29, 0x3e	; 62
    13d6:	c7 54       	subi	r28, 0x47	; 71
    13d8:	d0 40       	sbci	r29, 0x00	; 0
    13da:	0f b6       	in	r0, 0x3f	; 63
    13dc:	f8 94       	cli
    13de:	de bf       	out	0x3e, r29	; 62
    13e0:	0f be       	out	0x3f, r0	; 63
    13e2:	cd bf       	out	0x3d, r28	; 61
    13e4:	fe 01       	movw	r30, r28
    13e6:	e9 5b       	subi	r30, 0xB9	; 185
    13e8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ea:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* Instruction  RS=1 */
    13ec:	a5 e3       	ldi	r26, 0x35	; 53
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	e5 e3       	ldi	r30, 0x35	; 53
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	81 60       	ori	r24, 0x01	; 1
    13f8:	8c 93       	st	X, r24
    13fa:	fe 01       	movw	r30, r28
    13fc:	ed 5b       	subi	r30, 0xBD	; 189
    13fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	a0 e8       	ldi	r26, 0x80	; 128
    1406:	bf e3       	ldi	r27, 0x3F	; 63
    1408:	80 83       	st	Z, r24
    140a:	91 83       	std	Z+1, r25	; 0x01
    140c:	a2 83       	std	Z+2, r26	; 0x02
    140e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1410:	8e 01       	movw	r16, r28
    1412:	01 5c       	subi	r16, 0xC1	; 193
    1414:	1f 4f       	sbci	r17, 0xFF	; 255
    1416:	fe 01       	movw	r30, r28
    1418:	ed 5b       	subi	r30, 0xBD	; 189
    141a:	ff 4f       	sbci	r31, 0xFF	; 255
    141c:	60 81       	ld	r22, Z
    141e:	71 81       	ldd	r23, Z+1	; 0x01
    1420:	82 81       	ldd	r24, Z+2	; 0x02
    1422:	93 81       	ldd	r25, Z+3	; 0x03
    1424:	20 e0       	ldi	r18, 0x00	; 0
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	4a ef       	ldi	r20, 0xFA	; 250
    142a:	54 e4       	ldi	r21, 0x44	; 68
    142c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1430:	dc 01       	movw	r26, r24
    1432:	cb 01       	movw	r24, r22
    1434:	f8 01       	movw	r30, r16
    1436:	80 83       	st	Z, r24
    1438:	91 83       	std	Z+1, r25	; 0x01
    143a:	a2 83       	std	Z+2, r26	; 0x02
    143c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    143e:	fe 01       	movw	r30, r28
    1440:	ff 96       	adiw	r30, 0x3f	; 63
    1442:	60 81       	ld	r22, Z
    1444:	71 81       	ldd	r23, Z+1	; 0x01
    1446:	82 81       	ldd	r24, Z+2	; 0x02
    1448:	93 81       	ldd	r25, Z+3	; 0x03
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	40 e8       	ldi	r20, 0x80	; 128
    1450:	5f e3       	ldi	r21, 0x3F	; 63
    1452:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1456:	88 23       	and	r24, r24
    1458:	2c f4       	brge	.+10     	; 0x1464 <LCD_displayCharacter+0x9a>
		__ticks = 1;
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	9e af       	std	Y+62, r25	; 0x3e
    1460:	8d af       	std	Y+61, r24	; 0x3d
    1462:	46 c0       	rjmp	.+140    	; 0x14f0 <LCD_displayCharacter+0x126>
	else if (__tmp > 65535)
    1464:	fe 01       	movw	r30, r28
    1466:	ff 96       	adiw	r30, 0x3f	; 63
    1468:	60 81       	ld	r22, Z
    146a:	71 81       	ldd	r23, Z+1	; 0x01
    146c:	82 81       	ldd	r24, Z+2	; 0x02
    146e:	93 81       	ldd	r25, Z+3	; 0x03
    1470:	20 e0       	ldi	r18, 0x00	; 0
    1472:	3f ef       	ldi	r19, 0xFF	; 255
    1474:	4f e7       	ldi	r20, 0x7F	; 127
    1476:	57 e4       	ldi	r21, 0x47	; 71
    1478:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    147c:	18 16       	cp	r1, r24
    147e:	64 f5       	brge	.+88     	; 0x14d8 <LCD_displayCharacter+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1480:	fe 01       	movw	r30, r28
    1482:	ed 5b       	subi	r30, 0xBD	; 189
    1484:	ff 4f       	sbci	r31, 0xFF	; 255
    1486:	60 81       	ld	r22, Z
    1488:	71 81       	ldd	r23, Z+1	; 0x01
    148a:	82 81       	ldd	r24, Z+2	; 0x02
    148c:	93 81       	ldd	r25, Z+3	; 0x03
    148e:	20 e0       	ldi	r18, 0x00	; 0
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	40 e2       	ldi	r20, 0x20	; 32
    1494:	51 e4       	ldi	r21, 0x41	; 65
    1496:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    149a:	dc 01       	movw	r26, r24
    149c:	cb 01       	movw	r24, r22
    149e:	bc 01       	movw	r22, r24
    14a0:	cd 01       	movw	r24, r26
    14a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14a6:	dc 01       	movw	r26, r24
    14a8:	cb 01       	movw	r24, r22
    14aa:	9e af       	std	Y+62, r25	; 0x3e
    14ac:	8d af       	std	Y+61, r24	; 0x3d
    14ae:	0f c0       	rjmp	.+30     	; 0x14ce <LCD_displayCharacter+0x104>
    14b0:	88 ec       	ldi	r24, 0xC8	; 200
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	9c af       	std	Y+60, r25	; 0x3c
    14b6:	8b af       	std	Y+59, r24	; 0x3b
    14b8:	8b ad       	ldd	r24, Y+59	; 0x3b
    14ba:	9c ad       	ldd	r25, Y+60	; 0x3c
    14bc:	01 97       	sbiw	r24, 0x01	; 1
    14be:	f1 f7       	brne	.-4      	; 0x14bc <LCD_displayCharacter+0xf2>
    14c0:	9c af       	std	Y+60, r25	; 0x3c
    14c2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14c4:	8d ad       	ldd	r24, Y+61	; 0x3d
    14c6:	9e ad       	ldd	r25, Y+62	; 0x3e
    14c8:	01 97       	sbiw	r24, 0x01	; 1
    14ca:	9e af       	std	Y+62, r25	; 0x3e
    14cc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ce:	8d ad       	ldd	r24, Y+61	; 0x3d
    14d0:	9e ad       	ldd	r25, Y+62	; 0x3e
    14d2:	00 97       	sbiw	r24, 0x00	; 0
    14d4:	69 f7       	brne	.-38     	; 0x14b0 <LCD_displayCharacter+0xe6>
    14d6:	16 c0       	rjmp	.+44     	; 0x1504 <LCD_displayCharacter+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14d8:	fe 01       	movw	r30, r28
    14da:	ff 96       	adiw	r30, 0x3f	; 63
    14dc:	60 81       	ld	r22, Z
    14de:	71 81       	ldd	r23, Z+1	; 0x01
    14e0:	82 81       	ldd	r24, Z+2	; 0x02
    14e2:	93 81       	ldd	r25, Z+3	; 0x03
    14e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14e8:	dc 01       	movw	r26, r24
    14ea:	cb 01       	movw	r24, r22
    14ec:	9e af       	std	Y+62, r25	; 0x3e
    14ee:	8d af       	std	Y+61, r24	; 0x3d
    14f0:	8d ad       	ldd	r24, Y+61	; 0x3d
    14f2:	9e ad       	ldd	r25, Y+62	; 0x3e
    14f4:	9a af       	std	Y+58, r25	; 0x3a
    14f6:	89 af       	std	Y+57, r24	; 0x39
    14f8:	89 ad       	ldd	r24, Y+57	; 0x39
    14fa:	9a ad       	ldd	r25, Y+58	; 0x3a
    14fc:	01 97       	sbiw	r24, 0x01	; 1
    14fe:	f1 f7       	brne	.-4      	; 0x14fc <LCD_displayCharacter+0x132>
    1500:	9a af       	std	Y+58, r25	; 0x3a
    1502:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1); /* add delay for lcd processing */
	CLEAR_BIT(LCD_CTRL_PORT,RW);
    1504:	a5 e3       	ldi	r26, 0x35	; 53
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	e5 e3       	ldi	r30, 0x35	; 53
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	8d 7f       	andi	r24, 0xFD	; 253
    1510:	8c 93       	st	X, r24
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	a0 e8       	ldi	r26, 0x80	; 128
    1518:	bf e3       	ldi	r27, 0x3F	; 63
    151a:	8d ab       	std	Y+53, r24	; 0x35
    151c:	9e ab       	std	Y+54, r25	; 0x36
    151e:	af ab       	std	Y+55, r26	; 0x37
    1520:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1522:	6d a9       	ldd	r22, Y+53	; 0x35
    1524:	7e a9       	ldd	r23, Y+54	; 0x36
    1526:	8f a9       	ldd	r24, Y+55	; 0x37
    1528:	98 ad       	ldd	r25, Y+56	; 0x38
    152a:	20 e0       	ldi	r18, 0x00	; 0
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	4a ef       	ldi	r20, 0xFA	; 250
    1530:	54 e4       	ldi	r21, 0x44	; 68
    1532:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1536:	dc 01       	movw	r26, r24
    1538:	cb 01       	movw	r24, r22
    153a:	89 ab       	std	Y+49, r24	; 0x31
    153c:	9a ab       	std	Y+50, r25	; 0x32
    153e:	ab ab       	std	Y+51, r26	; 0x33
    1540:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1542:	69 a9       	ldd	r22, Y+49	; 0x31
    1544:	7a a9       	ldd	r23, Y+50	; 0x32
    1546:	8b a9       	ldd	r24, Y+51	; 0x33
    1548:	9c a9       	ldd	r25, Y+52	; 0x34
    154a:	20 e0       	ldi	r18, 0x00	; 0
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	40 e8       	ldi	r20, 0x80	; 128
    1550:	5f e3       	ldi	r21, 0x3F	; 63
    1552:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1556:	88 23       	and	r24, r24
    1558:	2c f4       	brge	.+10     	; 0x1564 <LCD_displayCharacter+0x19a>
		__ticks = 1;
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	98 ab       	std	Y+48, r25	; 0x30
    1560:	8f a7       	std	Y+47, r24	; 0x2f
    1562:	3f c0       	rjmp	.+126    	; 0x15e2 <LCD_displayCharacter+0x218>
	else if (__tmp > 65535)
    1564:	69 a9       	ldd	r22, Y+49	; 0x31
    1566:	7a a9       	ldd	r23, Y+50	; 0x32
    1568:	8b a9       	ldd	r24, Y+51	; 0x33
    156a:	9c a9       	ldd	r25, Y+52	; 0x34
    156c:	20 e0       	ldi	r18, 0x00	; 0
    156e:	3f ef       	ldi	r19, 0xFF	; 255
    1570:	4f e7       	ldi	r20, 0x7F	; 127
    1572:	57 e4       	ldi	r21, 0x47	; 71
    1574:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1578:	18 16       	cp	r1, r24
    157a:	4c f5       	brge	.+82     	; 0x15ce <LCD_displayCharacter+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    157c:	6d a9       	ldd	r22, Y+53	; 0x35
    157e:	7e a9       	ldd	r23, Y+54	; 0x36
    1580:	8f a9       	ldd	r24, Y+55	; 0x37
    1582:	98 ad       	ldd	r25, Y+56	; 0x38
    1584:	20 e0       	ldi	r18, 0x00	; 0
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	40 e2       	ldi	r20, 0x20	; 32
    158a:	51 e4       	ldi	r21, 0x41	; 65
    158c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1590:	dc 01       	movw	r26, r24
    1592:	cb 01       	movw	r24, r22
    1594:	bc 01       	movw	r22, r24
    1596:	cd 01       	movw	r24, r26
    1598:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    159c:	dc 01       	movw	r26, r24
    159e:	cb 01       	movw	r24, r22
    15a0:	98 ab       	std	Y+48, r25	; 0x30
    15a2:	8f a7       	std	Y+47, r24	; 0x2f
    15a4:	0f c0       	rjmp	.+30     	; 0x15c4 <LCD_displayCharacter+0x1fa>
    15a6:	88 ec       	ldi	r24, 0xC8	; 200
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	9e a7       	std	Y+46, r25	; 0x2e
    15ac:	8d a7       	std	Y+45, r24	; 0x2d
    15ae:	8d a5       	ldd	r24, Y+45	; 0x2d
    15b0:	9e a5       	ldd	r25, Y+46	; 0x2e
    15b2:	01 97       	sbiw	r24, 0x01	; 1
    15b4:	f1 f7       	brne	.-4      	; 0x15b2 <LCD_displayCharacter+0x1e8>
    15b6:	9e a7       	std	Y+46, r25	; 0x2e
    15b8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    15bc:	98 a9       	ldd	r25, Y+48	; 0x30
    15be:	01 97       	sbiw	r24, 0x01	; 1
    15c0:	98 ab       	std	Y+48, r25	; 0x30
    15c2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    15c6:	98 a9       	ldd	r25, Y+48	; 0x30
    15c8:	00 97       	sbiw	r24, 0x00	; 0
    15ca:	69 f7       	brne	.-38     	; 0x15a6 <LCD_displayCharacter+0x1dc>
    15cc:	14 c0       	rjmp	.+40     	; 0x15f6 <LCD_displayCharacter+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15ce:	69 a9       	ldd	r22, Y+49	; 0x31
    15d0:	7a a9       	ldd	r23, Y+50	; 0x32
    15d2:	8b a9       	ldd	r24, Y+51	; 0x33
    15d4:	9c a9       	ldd	r25, Y+52	; 0x34
    15d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15da:	dc 01       	movw	r26, r24
    15dc:	cb 01       	movw	r24, r22
    15de:	98 ab       	std	Y+48, r25	; 0x30
    15e0:	8f a7       	std	Y+47, r24	; 0x2f
    15e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    15e4:	98 a9       	ldd	r25, Y+48	; 0x30
    15e6:	9c a7       	std	Y+44, r25	; 0x2c
    15e8:	8b a7       	std	Y+43, r24	; 0x2b
    15ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    15ec:	9c a5       	ldd	r25, Y+44	; 0x2c
    15ee:	01 97       	sbiw	r24, 0x01	; 1
    15f0:	f1 f7       	brne	.-4      	; 0x15ee <LCD_displayCharacter+0x224>
    15f2:	9c a7       	std	Y+44, r25	; 0x2c
    15f4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* add delay for lcd processing */
	SET_BIT(LCD_CTRL_PORT,E);
    15f6:	a5 e3       	ldi	r26, 0x35	; 53
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	e5 e3       	ldi	r30, 0x35	; 53
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	84 60       	ori	r24, 0x04	; 4
    1602:	8c 93       	st	X, r24
    1604:	80 e0       	ldi	r24, 0x00	; 0
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	a0 e8       	ldi	r26, 0x80	; 128
    160a:	bf e3       	ldi	r27, 0x3F	; 63
    160c:	8f a3       	std	Y+39, r24	; 0x27
    160e:	98 a7       	std	Y+40, r25	; 0x28
    1610:	a9 a7       	std	Y+41, r26	; 0x29
    1612:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1614:	6f a1       	ldd	r22, Y+39	; 0x27
    1616:	78 a5       	ldd	r23, Y+40	; 0x28
    1618:	89 a5       	ldd	r24, Y+41	; 0x29
    161a:	9a a5       	ldd	r25, Y+42	; 0x2a
    161c:	20 e0       	ldi	r18, 0x00	; 0
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	4a ef       	ldi	r20, 0xFA	; 250
    1622:	54 e4       	ldi	r21, 0x44	; 68
    1624:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1628:	dc 01       	movw	r26, r24
    162a:	cb 01       	movw	r24, r22
    162c:	8b a3       	std	Y+35, r24	; 0x23
    162e:	9c a3       	std	Y+36, r25	; 0x24
    1630:	ad a3       	std	Y+37, r26	; 0x25
    1632:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1634:	6b a1       	ldd	r22, Y+35	; 0x23
    1636:	7c a1       	ldd	r23, Y+36	; 0x24
    1638:	8d a1       	ldd	r24, Y+37	; 0x25
    163a:	9e a1       	ldd	r25, Y+38	; 0x26
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	40 e8       	ldi	r20, 0x80	; 128
    1642:	5f e3       	ldi	r21, 0x3F	; 63
    1644:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1648:	88 23       	and	r24, r24
    164a:	2c f4       	brge	.+10     	; 0x1656 <LCD_displayCharacter+0x28c>
		__ticks = 1;
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	9a a3       	std	Y+34, r25	; 0x22
    1652:	89 a3       	std	Y+33, r24	; 0x21
    1654:	3f c0       	rjmp	.+126    	; 0x16d4 <LCD_displayCharacter+0x30a>
	else if (__tmp > 65535)
    1656:	6b a1       	ldd	r22, Y+35	; 0x23
    1658:	7c a1       	ldd	r23, Y+36	; 0x24
    165a:	8d a1       	ldd	r24, Y+37	; 0x25
    165c:	9e a1       	ldd	r25, Y+38	; 0x26
    165e:	20 e0       	ldi	r18, 0x00	; 0
    1660:	3f ef       	ldi	r19, 0xFF	; 255
    1662:	4f e7       	ldi	r20, 0x7F	; 127
    1664:	57 e4       	ldi	r21, 0x47	; 71
    1666:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    166a:	18 16       	cp	r1, r24
    166c:	4c f5       	brge	.+82     	; 0x16c0 <LCD_displayCharacter+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    166e:	6f a1       	ldd	r22, Y+39	; 0x27
    1670:	78 a5       	ldd	r23, Y+40	; 0x28
    1672:	89 a5       	ldd	r24, Y+41	; 0x29
    1674:	9a a5       	ldd	r25, Y+42	; 0x2a
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	40 e2       	ldi	r20, 0x20	; 32
    167c:	51 e4       	ldi	r21, 0x41	; 65
    167e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1682:	dc 01       	movw	r26, r24
    1684:	cb 01       	movw	r24, r22
    1686:	bc 01       	movw	r22, r24
    1688:	cd 01       	movw	r24, r26
    168a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    168e:	dc 01       	movw	r26, r24
    1690:	cb 01       	movw	r24, r22
    1692:	9a a3       	std	Y+34, r25	; 0x22
    1694:	89 a3       	std	Y+33, r24	; 0x21
    1696:	0f c0       	rjmp	.+30     	; 0x16b6 <LCD_displayCharacter+0x2ec>
    1698:	88 ec       	ldi	r24, 0xC8	; 200
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	98 a3       	std	Y+32, r25	; 0x20
    169e:	8f 8f       	std	Y+31, r24	; 0x1f
    16a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16a2:	98 a1       	ldd	r25, Y+32	; 0x20
    16a4:	01 97       	sbiw	r24, 0x01	; 1
    16a6:	f1 f7       	brne	.-4      	; 0x16a4 <LCD_displayCharacter+0x2da>
    16a8:	98 a3       	std	Y+32, r25	; 0x20
    16aa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ac:	89 a1       	ldd	r24, Y+33	; 0x21
    16ae:	9a a1       	ldd	r25, Y+34	; 0x22
    16b0:	01 97       	sbiw	r24, 0x01	; 1
    16b2:	9a a3       	std	Y+34, r25	; 0x22
    16b4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16b6:	89 a1       	ldd	r24, Y+33	; 0x21
    16b8:	9a a1       	ldd	r25, Y+34	; 0x22
    16ba:	00 97       	sbiw	r24, 0x00	; 0
    16bc:	69 f7       	brne	.-38     	; 0x1698 <LCD_displayCharacter+0x2ce>
    16be:	14 c0       	rjmp	.+40     	; 0x16e8 <LCD_displayCharacter+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16c0:	6b a1       	ldd	r22, Y+35	; 0x23
    16c2:	7c a1       	ldd	r23, Y+36	; 0x24
    16c4:	8d a1       	ldd	r24, Y+37	; 0x25
    16c6:	9e a1       	ldd	r25, Y+38	; 0x26
    16c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16cc:	dc 01       	movw	r26, r24
    16ce:	cb 01       	movw	r24, r22
    16d0:	9a a3       	std	Y+34, r25	; 0x22
    16d2:	89 a3       	std	Y+33, r24	; 0x21
    16d4:	89 a1       	ldd	r24, Y+33	; 0x21
    16d6:	9a a1       	ldd	r25, Y+34	; 0x22
    16d8:	9e 8f       	std	Y+30, r25	; 0x1e
    16da:	8d 8f       	std	Y+29, r24	; 0x1d
    16dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16de:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16e0:	01 97       	sbiw	r24, 0x01	; 1
    16e2:	f1 f7       	brne	.-4      	; 0x16e0 <LCD_displayCharacter+0x316>
    16e4:	9e 8f       	std	Y+30, r25	; 0x1e
    16e6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* add delay for lcd processing */
	#if (LCD_MODE == 8)
	LCD_DATA_PORT = data;
    16e8:	ab e3       	ldi	r26, 0x3B	; 59
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	fe 01       	movw	r30, r28
    16ee:	e9 5b       	subi	r30, 0xB9	; 185
    16f0:	ff 4f       	sbci	r31, 0xFF	; 255
    16f2:	80 81       	ld	r24, Z
    16f4:	8c 93       	st	X, r24
    16f6:	80 e0       	ldi	r24, 0x00	; 0
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	a0 e8       	ldi	r26, 0x80	; 128
    16fc:	bf e3       	ldi	r27, 0x3F	; 63
    16fe:	89 8f       	std	Y+25, r24	; 0x19
    1700:	9a 8f       	std	Y+26, r25	; 0x1a
    1702:	ab 8f       	std	Y+27, r26	; 0x1b
    1704:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1706:	69 8d       	ldd	r22, Y+25	; 0x19
    1708:	7a 8d       	ldd	r23, Y+26	; 0x1a
    170a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    170c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    170e:	20 e0       	ldi	r18, 0x00	; 0
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	4a ef       	ldi	r20, 0xFA	; 250
    1714:	54 e4       	ldi	r21, 0x44	; 68
    1716:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    171a:	dc 01       	movw	r26, r24
    171c:	cb 01       	movw	r24, r22
    171e:	8d 8b       	std	Y+21, r24	; 0x15
    1720:	9e 8b       	std	Y+22, r25	; 0x16
    1722:	af 8b       	std	Y+23, r26	; 0x17
    1724:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1726:	6d 89       	ldd	r22, Y+21	; 0x15
    1728:	7e 89       	ldd	r23, Y+22	; 0x16
    172a:	8f 89       	ldd	r24, Y+23	; 0x17
    172c:	98 8d       	ldd	r25, Y+24	; 0x18
    172e:	20 e0       	ldi	r18, 0x00	; 0
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	40 e8       	ldi	r20, 0x80	; 128
    1734:	5f e3       	ldi	r21, 0x3F	; 63
    1736:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    173a:	88 23       	and	r24, r24
    173c:	2c f4       	brge	.+10     	; 0x1748 <LCD_displayCharacter+0x37e>
		__ticks = 1;
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	9c 8b       	std	Y+20, r25	; 0x14
    1744:	8b 8b       	std	Y+19, r24	; 0x13
    1746:	3f c0       	rjmp	.+126    	; 0x17c6 <LCD_displayCharacter+0x3fc>
	else if (__tmp > 65535)
    1748:	6d 89       	ldd	r22, Y+21	; 0x15
    174a:	7e 89       	ldd	r23, Y+22	; 0x16
    174c:	8f 89       	ldd	r24, Y+23	; 0x17
    174e:	98 8d       	ldd	r25, Y+24	; 0x18
    1750:	20 e0       	ldi	r18, 0x00	; 0
    1752:	3f ef       	ldi	r19, 0xFF	; 255
    1754:	4f e7       	ldi	r20, 0x7F	; 127
    1756:	57 e4       	ldi	r21, 0x47	; 71
    1758:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    175c:	18 16       	cp	r1, r24
    175e:	4c f5       	brge	.+82     	; 0x17b2 <LCD_displayCharacter+0x3e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1760:	69 8d       	ldd	r22, Y+25	; 0x19
    1762:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1764:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1766:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1768:	20 e0       	ldi	r18, 0x00	; 0
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	40 e2       	ldi	r20, 0x20	; 32
    176e:	51 e4       	ldi	r21, 0x41	; 65
    1770:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1774:	dc 01       	movw	r26, r24
    1776:	cb 01       	movw	r24, r22
    1778:	bc 01       	movw	r22, r24
    177a:	cd 01       	movw	r24, r26
    177c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1780:	dc 01       	movw	r26, r24
    1782:	cb 01       	movw	r24, r22
    1784:	9c 8b       	std	Y+20, r25	; 0x14
    1786:	8b 8b       	std	Y+19, r24	; 0x13
    1788:	0f c0       	rjmp	.+30     	; 0x17a8 <LCD_displayCharacter+0x3de>
    178a:	88 ec       	ldi	r24, 0xC8	; 200
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	9a 8b       	std	Y+18, r25	; 0x12
    1790:	89 8b       	std	Y+17, r24	; 0x11
    1792:	89 89       	ldd	r24, Y+17	; 0x11
    1794:	9a 89       	ldd	r25, Y+18	; 0x12
    1796:	01 97       	sbiw	r24, 0x01	; 1
    1798:	f1 f7       	brne	.-4      	; 0x1796 <LCD_displayCharacter+0x3cc>
    179a:	9a 8b       	std	Y+18, r25	; 0x12
    179c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    179e:	8b 89       	ldd	r24, Y+19	; 0x13
    17a0:	9c 89       	ldd	r25, Y+20	; 0x14
    17a2:	01 97       	sbiw	r24, 0x01	; 1
    17a4:	9c 8b       	std	Y+20, r25	; 0x14
    17a6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17a8:	8b 89       	ldd	r24, Y+19	; 0x13
    17aa:	9c 89       	ldd	r25, Y+20	; 0x14
    17ac:	00 97       	sbiw	r24, 0x00	; 0
    17ae:	69 f7       	brne	.-38     	; 0x178a <LCD_displayCharacter+0x3c0>
    17b0:	14 c0       	rjmp	.+40     	; 0x17da <LCD_displayCharacter+0x410>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17b2:	6d 89       	ldd	r22, Y+21	; 0x15
    17b4:	7e 89       	ldd	r23, Y+22	; 0x16
    17b6:	8f 89       	ldd	r24, Y+23	; 0x17
    17b8:	98 8d       	ldd	r25, Y+24	; 0x18
    17ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17be:	dc 01       	movw	r26, r24
    17c0:	cb 01       	movw	r24, r22
    17c2:	9c 8b       	std	Y+20, r25	; 0x14
    17c4:	8b 8b       	std	Y+19, r24	; 0x13
    17c6:	8b 89       	ldd	r24, Y+19	; 0x13
    17c8:	9c 89       	ldd	r25, Y+20	; 0x14
    17ca:	98 8b       	std	Y+16, r25	; 0x10
    17cc:	8f 87       	std	Y+15, r24	; 0x0f
    17ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    17d0:	98 89       	ldd	r25, Y+16	; 0x10
    17d2:	01 97       	sbiw	r24, 0x01	; 1
    17d4:	f1 f7       	brne	.-4      	; 0x17d2 <LCD_displayCharacter+0x408>
    17d6:	98 8b       	std	Y+16, r25	; 0x10
    17d8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	data = (data << 4) | (data >> 4);
	LCD_DATA_PORT=(LCD_DATA_PORT & LCD_SEL_PINS ) | (data & LCD_SEL_PINS);
	#endif
	_delay_ms(1); /* add delay for lcd processing */
	CLEAR_BIT(LCD_CTRL_PORT,E);
    17da:	a5 e3       	ldi	r26, 0x35	; 53
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	e5 e3       	ldi	r30, 0x35	; 53
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	8b 7f       	andi	r24, 0xFB	; 251
    17e6:	8c 93       	st	X, r24
    17e8:	80 e0       	ldi	r24, 0x00	; 0
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	a0 e8       	ldi	r26, 0x80	; 128
    17ee:	bf e3       	ldi	r27, 0x3F	; 63
    17f0:	8b 87       	std	Y+11, r24	; 0x0b
    17f2:	9c 87       	std	Y+12, r25	; 0x0c
    17f4:	ad 87       	std	Y+13, r26	; 0x0d
    17f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    17fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    17fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    17fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	4a ef       	ldi	r20, 0xFA	; 250
    1806:	54 e4       	ldi	r21, 0x44	; 68
    1808:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    180c:	dc 01       	movw	r26, r24
    180e:	cb 01       	movw	r24, r22
    1810:	8f 83       	std	Y+7, r24	; 0x07
    1812:	98 87       	std	Y+8, r25	; 0x08
    1814:	a9 87       	std	Y+9, r26	; 0x09
    1816:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1818:	6f 81       	ldd	r22, Y+7	; 0x07
    181a:	78 85       	ldd	r23, Y+8	; 0x08
    181c:	89 85       	ldd	r24, Y+9	; 0x09
    181e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	40 e8       	ldi	r20, 0x80	; 128
    1826:	5f e3       	ldi	r21, 0x3F	; 63
    1828:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    182c:	88 23       	and	r24, r24
    182e:	2c f4       	brge	.+10     	; 0x183a <LCD_displayCharacter+0x470>
		__ticks = 1;
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	9e 83       	std	Y+6, r25	; 0x06
    1836:	8d 83       	std	Y+5, r24	; 0x05
    1838:	3f c0       	rjmp	.+126    	; 0x18b8 <LCD_displayCharacter+0x4ee>
	else if (__tmp > 65535)
    183a:	6f 81       	ldd	r22, Y+7	; 0x07
    183c:	78 85       	ldd	r23, Y+8	; 0x08
    183e:	89 85       	ldd	r24, Y+9	; 0x09
    1840:	9a 85       	ldd	r25, Y+10	; 0x0a
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	3f ef       	ldi	r19, 0xFF	; 255
    1846:	4f e7       	ldi	r20, 0x7F	; 127
    1848:	57 e4       	ldi	r21, 0x47	; 71
    184a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    184e:	18 16       	cp	r1, r24
    1850:	4c f5       	brge	.+82     	; 0x18a4 <LCD_displayCharacter+0x4da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1852:	6b 85       	ldd	r22, Y+11	; 0x0b
    1854:	7c 85       	ldd	r23, Y+12	; 0x0c
    1856:	8d 85       	ldd	r24, Y+13	; 0x0d
    1858:	9e 85       	ldd	r25, Y+14	; 0x0e
    185a:	20 e0       	ldi	r18, 0x00	; 0
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	40 e2       	ldi	r20, 0x20	; 32
    1860:	51 e4       	ldi	r21, 0x41	; 65
    1862:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1866:	dc 01       	movw	r26, r24
    1868:	cb 01       	movw	r24, r22
    186a:	bc 01       	movw	r22, r24
    186c:	cd 01       	movw	r24, r26
    186e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1872:	dc 01       	movw	r26, r24
    1874:	cb 01       	movw	r24, r22
    1876:	9e 83       	std	Y+6, r25	; 0x06
    1878:	8d 83       	std	Y+5, r24	; 0x05
    187a:	0f c0       	rjmp	.+30     	; 0x189a <LCD_displayCharacter+0x4d0>
    187c:	88 ec       	ldi	r24, 0xC8	; 200
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	9c 83       	std	Y+4, r25	; 0x04
    1882:	8b 83       	std	Y+3, r24	; 0x03
    1884:	8b 81       	ldd	r24, Y+3	; 0x03
    1886:	9c 81       	ldd	r25, Y+4	; 0x04
    1888:	01 97       	sbiw	r24, 0x01	; 1
    188a:	f1 f7       	brne	.-4      	; 0x1888 <LCD_displayCharacter+0x4be>
    188c:	9c 83       	std	Y+4, r25	; 0x04
    188e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1890:	8d 81       	ldd	r24, Y+5	; 0x05
    1892:	9e 81       	ldd	r25, Y+6	; 0x06
    1894:	01 97       	sbiw	r24, 0x01	; 1
    1896:	9e 83       	std	Y+6, r25	; 0x06
    1898:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    189a:	8d 81       	ldd	r24, Y+5	; 0x05
    189c:	9e 81       	ldd	r25, Y+6	; 0x06
    189e:	00 97       	sbiw	r24, 0x00	; 0
    18a0:	69 f7       	brne	.-38     	; 0x187c <LCD_displayCharacter+0x4b2>
    18a2:	14 c0       	rjmp	.+40     	; 0x18cc <LCD_displayCharacter+0x502>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18a4:	6f 81       	ldd	r22, Y+7	; 0x07
    18a6:	78 85       	ldd	r23, Y+8	; 0x08
    18a8:	89 85       	ldd	r24, Y+9	; 0x09
    18aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	9e 83       	std	Y+6, r25	; 0x06
    18b6:	8d 83       	std	Y+5, r24	; 0x05
    18b8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ba:	9e 81       	ldd	r25, Y+6	; 0x06
    18bc:	9a 83       	std	Y+2, r25	; 0x02
    18be:	89 83       	std	Y+1, r24	; 0x01
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
    18c2:	9a 81       	ldd	r25, Y+2	; 0x02
    18c4:	01 97       	sbiw	r24, 0x01	; 1
    18c6:	f1 f7       	brne	.-4      	; 0x18c4 <LCD_displayCharacter+0x4fa>
    18c8:	9a 83       	std	Y+2, r25	; 0x02
    18ca:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* add delay for lcd processing */
}
    18cc:	c9 5b       	subi	r28, 0xB9	; 185
    18ce:	df 4f       	sbci	r29, 0xFF	; 255
    18d0:	0f b6       	in	r0, 0x3f	; 63
    18d2:	f8 94       	cli
    18d4:	de bf       	out	0x3e, r29	; 62
    18d6:	0f be       	out	0x3f, r0	; 63
    18d8:	cd bf       	out	0x3d, r28	; 61
    18da:	cf 91       	pop	r28
    18dc:	df 91       	pop	r29
    18de:	1f 91       	pop	r17
    18e0:	0f 91       	pop	r16
    18e2:	08 95       	ret

000018e4 <LCD_displayString>:
void LCD_displayString(uint8* string)
{
    18e4:	df 93       	push	r29
    18e6:	cf 93       	push	r28
    18e8:	00 d0       	rcall	.+0      	; 0x18ea <LCD_displayString+0x6>
    18ea:	0f 92       	push	r0
    18ec:	cd b7       	in	r28, 0x3d	; 61
    18ee:	de b7       	in	r29, 0x3e	; 62
    18f0:	9b 83       	std	Y+3, r25	; 0x03
    18f2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    18f4:	19 82       	std	Y+1, r1	; 0x01
    18f6:	14 c0       	rjmp	.+40     	; 0x1920 <LCD_displayString+0x3c>
	while(string[i] != '\0') /*loop on the string till reach \0 */
	{
		LCD_displayCharacter(string[i]);
    18f8:	89 81       	ldd	r24, Y+1	; 0x01
    18fa:	28 2f       	mov	r18, r24
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1900:	9b 81       	ldd	r25, Y+3	; 0x03
    1902:	fc 01       	movw	r30, r24
    1904:	e2 0f       	add	r30, r18
    1906:	f3 1f       	adc	r31, r19
    1908:	80 81       	ld	r24, Z
    190a:	0e 94 e5 09 	call	0x13ca	; 0x13ca <LCD_displayCharacter>
		i++;
    190e:	89 81       	ldd	r24, Y+1	; 0x01
    1910:	8f 5f       	subi	r24, 0xFF	; 255
    1912:	89 83       	std	Y+1, r24	; 0x01
		#if (LCD_LINES == 2)
		if (i == 16) /*jump to next line in 2 line displays*/
    1914:	89 81       	ldd	r24, Y+1	; 0x01
    1916:	80 31       	cpi	r24, 0x10	; 16
    1918:	19 f4       	brne	.+6      	; 0x1920 <LCD_displayString+0x3c>
		{
			LCD_sendCommand(CURSOR_BEGIN_LINE_2);
    191a:	80 ec       	ldi	r24, 0xC0	; 192
    191c:	0e 94 58 07 	call	0xeb0	; 0xeb0 <LCD_sendCommand>
	_delay_ms(1); /* add delay for lcd processing */
}
void LCD_displayString(uint8* string)
{
	uint8 i=0;
	while(string[i] != '\0') /*loop on the string till reach \0 */
    1920:	89 81       	ldd	r24, Y+1	; 0x01
    1922:	28 2f       	mov	r18, r24
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	8a 81       	ldd	r24, Y+2	; 0x02
    1928:	9b 81       	ldd	r25, Y+3	; 0x03
    192a:	fc 01       	movw	r30, r24
    192c:	e2 0f       	add	r30, r18
    192e:	f3 1f       	adc	r31, r19
    1930:	80 81       	ld	r24, Z
    1932:	88 23       	and	r24, r24
    1934:	09 f7       	brne	.-62     	; 0x18f8 <LCD_displayString+0x14>
		{
			LCD_sendCommand(CURSOR_BEGIN_LINE_2);
		}
		#endif
	}
}
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	cf 91       	pop	r28
    193e:	df 91       	pop	r29
    1940:	08 95       	ret

00001942 <LCD_goToRowColumn>:
void LCD_goToRowColumn(uint8 row , uint8 col)
{
    1942:	df 93       	push	r29
    1944:	cf 93       	push	r28
    1946:	00 d0       	rcall	.+0      	; 0x1948 <LCD_goToRowColumn+0x6>
    1948:	0f 92       	push	r0
    194a:	cd b7       	in	r28, 0x3d	; 61
    194c:	de b7       	in	r29, 0x3e	; 62
    194e:	8a 83       	std	Y+2, r24	; 0x02
    1950:	6b 83       	std	Y+3, r22	; 0x03
	uint8 i=1;
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	89 83       	std	Y+1, r24	; 0x01
	if (row == 0) /*jump to first line if requested row is 0 */
    1956:	8a 81       	ldd	r24, Y+2	; 0x02
    1958:	88 23       	and	r24, r24
    195a:	21 f4       	brne	.+8      	; 0x1964 <LCD_goToRowColumn+0x22>
	{
		LCD_sendCommand(CURSOR_BEGIN_LINE_1);
    195c:	80 e8       	ldi	r24, 0x80	; 128
    195e:	0e 94 58 07 	call	0xeb0	; 0xeb0 <LCD_sendCommand>
    1962:	0d c0       	rjmp	.+26     	; 0x197e <LCD_goToRowColumn+0x3c>
	}
	else if ( row == 1) /*jump to second line if requested row is 0 */
    1964:	8a 81       	ldd	r24, Y+2	; 0x02
    1966:	81 30       	cpi	r24, 0x01	; 1
    1968:	51 f4       	brne	.+20     	; 0x197e <LCD_goToRowColumn+0x3c>
	{
		LCD_sendCommand(CURSOR_BEGIN_LINE_2);
    196a:	80 ec       	ldi	r24, 0xC0	; 192
    196c:	0e 94 58 07 	call	0xeb0	; 0xeb0 <LCD_sendCommand>
    1970:	06 c0       	rjmp	.+12     	; 0x197e <LCD_goToRowColumn+0x3c>
	}
	while (i < col) /*Shift cursor to requested column by looping on cursor right command*/
	{
		LCD_sendCommand(SHIFT_CURSOR_RIGHT);
    1972:	84 e1       	ldi	r24, 0x14	; 20
    1974:	0e 94 58 07 	call	0xeb0	; 0xeb0 <LCD_sendCommand>
		i++;
    1978:	89 81       	ldd	r24, Y+1	; 0x01
    197a:	8f 5f       	subi	r24, 0xFF	; 255
    197c:	89 83       	std	Y+1, r24	; 0x01
	}
	else if ( row == 1) /*jump to second line if requested row is 0 */
	{
		LCD_sendCommand(CURSOR_BEGIN_LINE_2);
	}
	while (i < col) /*Shift cursor to requested column by looping on cursor right command*/
    197e:	99 81       	ldd	r25, Y+1	; 0x01
    1980:	8b 81       	ldd	r24, Y+3	; 0x03
    1982:	98 17       	cp	r25, r24
    1984:	b0 f3       	brcs	.-20     	; 0x1972 <LCD_goToRowColumn+0x30>
	{
		LCD_sendCommand(SHIFT_CURSOR_RIGHT);
		i++;
	}
}
    1986:	0f 90       	pop	r0
    1988:	0f 90       	pop	r0
    198a:	0f 90       	pop	r0
    198c:	cf 91       	pop	r28
    198e:	df 91       	pop	r29
    1990:	08 95       	ret

00001992 <LCD_displayStringRowColumn>:
void LCD_displayStringRowColumn(uint8* string , uint8 row , uint8 col)
{
    1992:	df 93       	push	r29
    1994:	cf 93       	push	r28
    1996:	00 d0       	rcall	.+0      	; 0x1998 <LCD_displayStringRowColumn+0x6>
    1998:	00 d0       	rcall	.+0      	; 0x199a <LCD_displayStringRowColumn+0x8>
    199a:	cd b7       	in	r28, 0x3d	; 61
    199c:	de b7       	in	r29, 0x3e	; 62
    199e:	9a 83       	std	Y+2, r25	; 0x02
    19a0:	89 83       	std	Y+1, r24	; 0x01
    19a2:	6b 83       	std	Y+3, r22	; 0x03
    19a4:	4c 83       	std	Y+4, r20	; 0x04
	LCD_goToRowColumn(row , col); /* go to to the required LCD position */
    19a6:	8b 81       	ldd	r24, Y+3	; 0x03
    19a8:	6c 81       	ldd	r22, Y+4	; 0x04
    19aa:	0e 94 a1 0c 	call	0x1942	; 0x1942 <LCD_goToRowColumn>
	LCD_displayString(string);/* display the string */
    19ae:	89 81       	ldd	r24, Y+1	; 0x01
    19b0:	9a 81       	ldd	r25, Y+2	; 0x02
    19b2:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <LCD_displayString>

}
    19b6:	0f 90       	pop	r0
    19b8:	0f 90       	pop	r0
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	cf 91       	pop	r28
    19c0:	df 91       	pop	r29
    19c2:	08 95       	ret

000019c4 <LCD_clearScreen>:
void LCD_clearScreen(void)
{
    19c4:	df 93       	push	r29
    19c6:	cf 93       	push	r28
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_DISPLAY_SCREEN);/*clear display */
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	0e 94 58 07 	call	0xeb0	; 0xeb0 <LCD_sendCommand>
}
    19d2:	cf 91       	pop	r28
    19d4:	df 91       	pop	r29
    19d6:	08 95       	ret

000019d8 <LCD_integerToString>:
void LCD_integerToString(int num)
{
    19d8:	df 93       	push	r29
    19da:	cf 93       	push	r28
    19dc:	cd b7       	in	r28, 0x3d	; 61
    19de:	de b7       	in	r29, 0x3e	; 62
    19e0:	62 97       	sbiw	r28, 0x12	; 18
    19e2:	0f b6       	in	r0, 0x3f	; 63
    19e4:	f8 94       	cli
    19e6:	de bf       	out	0x3e, r29	; 62
    19e8:	0f be       	out	0x3f, r0	; 63
    19ea:	cd bf       	out	0x3d, r28	; 61
    19ec:	9a 8b       	std	Y+18, r25	; 0x12
    19ee:	89 8b       	std	Y+17, r24	; 0x11
	uint8 string [16];/* String to hold the ascii result */
	itoa(num, string, 10);/*convert from integer to asci and save asci in the string*/
    19f0:	89 89       	ldd	r24, Y+17	; 0x11
    19f2:	9a 89       	ldd	r25, Y+18	; 0x12
    19f4:	9e 01       	movw	r18, r28
    19f6:	2f 5f       	subi	r18, 0xFF	; 255
    19f8:	3f 4f       	sbci	r19, 0xFF	; 255
    19fa:	b9 01       	movw	r22, r18
    19fc:	4a e0       	ldi	r20, 0x0A	; 10
    19fe:	50 e0       	ldi	r21, 0x00	; 0
    1a00:	0e 94 01 13 	call	0x2602	; 0x2602 <itoa>
	LCD_displayString(string);/*display string*/
    1a04:	ce 01       	movw	r24, r28
    1a06:	01 96       	adiw	r24, 0x01	; 1
    1a08:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <LCD_displayString>
}
    1a0c:	62 96       	adiw	r28, 0x12	; 18
    1a0e:	0f b6       	in	r0, 0x3f	; 63
    1a10:	f8 94       	cli
    1a12:	de bf       	out	0x3e, r29	; 62
    1a14:	0f be       	out	0x3f, r0	; 63
    1a16:	cd bf       	out	0x3d, r28	; 61
    1a18:	cf 91       	pop	r28
    1a1a:	df 91       	pop	r29
    1a1c:	08 95       	ret

00001a1e <Receive_Flag>:

uint32 Password=0 ; /*global variable to hold the password*/
uint32 Stored_Password=-1; /*global variable to store password sent by the MC2*/

uint8 Receive_Flag(void)
{
    1a1e:	df 93       	push	r29
    1a20:	cf 93       	push	r28
    1a22:	0f 92       	push	r0
    1a24:	cd b7       	in	r28, 0x3d	; 61
    1a26:	de b7       	in	r29, 0x3e	; 62
	 * the function receives a flag from MC2
	 * this flag determines if it is the first time for the user to start the app.
	 * function returns the flag
	 */
	uint8 flag;
	flag = UART_recieveByte();
    1a28:	0e 94 1b 12 	call	0x2436	; 0x2436 <UART_recieveByte>
    1a2c:	89 83       	std	Y+1, r24	; 0x01
	return flag;
    1a2e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a30:	0f 90       	pop	r0
    1a32:	cf 91       	pop	r28
    1a34:	df 91       	pop	r29
    1a36:	08 95       	ret

00001a38 <Receive_Stored_Password>:

void Receive_Stored_Password()
{
    1a38:	df 93       	push	r29
    1a3a:	cf 93       	push	r28
    1a3c:	0f 92       	push	r0
    1a3e:	cd b7       	in	r28, 0x3d	; 61
    1a40:	de b7       	in	r29, 0x3e	; 62
	 * the function receives the 4 byte password from MC2
	 * it saves the password in the Stored_Password variable
	 * by this technique we can compare passwords without sending them to MC2 every time-
	 * thus optimizing the code and saving time
	 */
	uint8 i; Stored_Password=0;
    1a42:	10 92 1b 01 	sts	0x011B, r1
    1a46:	10 92 1c 01 	sts	0x011C, r1
    1a4a:	10 92 1d 01 	sts	0x011D, r1
    1a4e:	10 92 1e 01 	sts	0x011E, r1
	for(i=0;i<4;i++)
    1a52:	19 82       	std	Y+1, r1	; 0x01
    1a54:	2d c0       	rjmp	.+90     	; 0x1ab0 <Receive_Stored_Password+0x78>
		/*
		 * loop to receive all 4 bytes
		 * shifting the received byte 8 bits to the right compared to the latest received byte
		 * by this technique we store the first byte in the LSBs and next bytes are in next to it
		 */
		Stored_Password |= (((uint32)UART_recieveByte())<<(i*8));
    1a56:	0e 94 1b 12 	call	0x2436	; 0x2436 <UART_recieveByte>
    1a5a:	28 2f       	mov	r18, r24
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	40 e0       	ldi	r20, 0x00	; 0
    1a60:	50 e0       	ldi	r21, 0x00	; 0
    1a62:	89 81       	ldd	r24, Y+1	; 0x01
    1a64:	88 2f       	mov	r24, r24
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	88 0f       	add	r24, r24
    1a6a:	99 1f       	adc	r25, r25
    1a6c:	88 0f       	add	r24, r24
    1a6e:	99 1f       	adc	r25, r25
    1a70:	88 0f       	add	r24, r24
    1a72:	99 1f       	adc	r25, r25
    1a74:	04 c0       	rjmp	.+8      	; 0x1a7e <Receive_Stored_Password+0x46>
    1a76:	22 0f       	add	r18, r18
    1a78:	33 1f       	adc	r19, r19
    1a7a:	44 1f       	adc	r20, r20
    1a7c:	55 1f       	adc	r21, r21
    1a7e:	8a 95       	dec	r24
    1a80:	d2 f7       	brpl	.-12     	; 0x1a76 <Receive_Stored_Password+0x3e>
    1a82:	80 91 1b 01 	lds	r24, 0x011B
    1a86:	90 91 1c 01 	lds	r25, 0x011C
    1a8a:	a0 91 1d 01 	lds	r26, 0x011D
    1a8e:	b0 91 1e 01 	lds	r27, 0x011E
    1a92:	82 2b       	or	r24, r18
    1a94:	93 2b       	or	r25, r19
    1a96:	a4 2b       	or	r26, r20
    1a98:	b5 2b       	or	r27, r21
    1a9a:	80 93 1b 01 	sts	0x011B, r24
    1a9e:	90 93 1c 01 	sts	0x011C, r25
    1aa2:	a0 93 1d 01 	sts	0x011D, r26
    1aa6:	b0 93 1e 01 	sts	0x011E, r27
	 * it saves the password in the Stored_Password variable
	 * by this technique we can compare passwords without sending them to MC2 every time-
	 * thus optimizing the code and saving time
	 */
	uint8 i; Stored_Password=0;
	for(i=0;i<4;i++)
    1aaa:	89 81       	ldd	r24, Y+1	; 0x01
    1aac:	8f 5f       	subi	r24, 0xFF	; 255
    1aae:	89 83       	std	Y+1, r24	; 0x01
    1ab0:	89 81       	ldd	r24, Y+1	; 0x01
    1ab2:	84 30       	cpi	r24, 0x04	; 4
    1ab4:	80 f2       	brcs	.-96     	; 0x1a56 <Receive_Stored_Password+0x1e>
		 * by this technique we store the first byte in the LSBs and next bytes are in next to it
		 */
		Stored_Password |= (((uint32)UART_recieveByte())<<(i*8));
	}

}
    1ab6:	0f 90       	pop	r0
    1ab8:	cf 91       	pop	r28
    1aba:	df 91       	pop	r29
    1abc:	08 95       	ret

00001abe <Create_Password>:

void Create_Password(void)
{
    1abe:	0f 93       	push	r16
    1ac0:	1f 93       	push	r17
    1ac2:	df 93       	push	r29
    1ac4:	cf 93       	push	r28
    1ac6:	cd b7       	in	r28, 0x3d	; 61
    1ac8:	de b7       	in	r29, 0x3e	; 62
    1aca:	a7 97       	sbiw	r28, 0x27	; 39
    1acc:	0f b6       	in	r0, 0x3f	; 63
    1ace:	f8 94       	cli
    1ad0:	de bf       	out	0x3e, r29	; 62
    1ad2:	0f be       	out	0x3f, r0	; 63
    1ad4:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen(); /*clear screen before starting the process*/
    1ad6:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <LCD_clearScreen>
	uint8 PasswordArray1[10] ; /*array to hold the first password entered by the user*/
	uint8 PasswordArray2[10] = {0};/*array to hold the second password entered by the user*/
    1ada:	8a e0       	ldi	r24, 0x0A	; 10
    1adc:	fe 01       	movw	r30, r28
    1ade:	7e 96       	adiw	r30, 0x1e	; 30
    1ae0:	df 01       	movw	r26, r30
    1ae2:	98 2f       	mov	r25, r24
    1ae4:	1d 92       	st	X+, r1
    1ae6:	9a 95       	dec	r25
    1ae8:	e9 f7       	brne	.-6      	; 0x1ae4 <Create_Password+0x26>
	uint32 Password2 = -1; uint8 i=0;
    1aea:	8f ef       	ldi	r24, 0xFF	; 255
    1aec:	9f ef       	ldi	r25, 0xFF	; 255
    1aee:	af ef       	ldi	r26, 0xFF	; 255
    1af0:	bf ef       	ldi	r27, 0xFF	; 255
    1af2:	88 8b       	std	Y+16, r24	; 0x10
    1af4:	99 8b       	std	Y+17, r25	; 0x11
    1af6:	aa 8b       	std	Y+18, r26	; 0x12
    1af8:	bb 8b       	std	Y+19, r27	; 0x13
    1afa:	1f 86       	std	Y+15, r1	; 0x0f
	do
	{
		LCD_displayString("Create New Pass:"); /*Displays Create New Pass: on the screen*/
    1afc:	80 e6       	ldi	r24, 0x60	; 96
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <LCD_displayString>
		LCD_goToRowColumn( 1 , 0 ); /*moves cursor to the next line*/
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	60 e0       	ldi	r22, 0x00	; 0
    1b08:	0e 94 a1 0c 	call	0x1942	; 0x1942 <LCD_goToRowColumn>
		for(i=0;i<5;i++)
    1b0c:	1f 86       	std	Y+15, r1	; 0x0f
    1b0e:	13 c0       	rjmp	.+38     	; 0x1b36 <Create_Password+0x78>
			/*
			 * loop to get the five digits entered from the user on the keypad
			 * adding '0' to the returned value of the keypad to transform the number into asci format
			 * displaying * on the screen after each digit entered by the user
			 */
			PasswordArray1[i] = (KeyPad_getPressedKey() + '0');
    1b10:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b12:	08 2f       	mov	r16, r24
    1b14:	10 e0       	ldi	r17, 0x00	; 0
    1b16:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    1b1a:	28 2f       	mov	r18, r24
    1b1c:	20 5d       	subi	r18, 0xD0	; 208
    1b1e:	ce 01       	movw	r24, r28
    1b20:	44 96       	adiw	r24, 0x14	; 20
    1b22:	fc 01       	movw	r30, r24
    1b24:	e0 0f       	add	r30, r16
    1b26:	f1 1f       	adc	r31, r17
    1b28:	20 83       	st	Z, r18
			LCD_displayCharacter('*');
    1b2a:	8a e2       	ldi	r24, 0x2A	; 42
    1b2c:	0e 94 e5 09 	call	0x13ca	; 0x13ca <LCD_displayCharacter>
	uint32 Password2 = -1; uint8 i=0;
	do
	{
		LCD_displayString("Create New Pass:"); /*Displays Create New Pass: on the screen*/
		LCD_goToRowColumn( 1 , 0 ); /*moves cursor to the next line*/
		for(i=0;i<5;i++)
    1b30:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b32:	8f 5f       	subi	r24, 0xFF	; 255
    1b34:	8f 87       	std	Y+15, r24	; 0x0f
    1b36:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b38:	85 30       	cpi	r24, 0x05	; 5
    1b3a:	50 f3       	brcs	.-44     	; 0x1b10 <Create_Password+0x52>
			 * displaying * on the screen after each digit entered by the user
			 */
			PasswordArray1[i] = (KeyPad_getPressedKey() + '0');
			LCD_displayCharacter('*');
		}
		PasswordArray1[5] = '\0'; /*adding null in the end of the array for atoi function to work*/
    1b3c:	19 8e       	std	Y+25, r1	; 0x19
		 * converting string into integer for easy compare
		 * having the password as integer makes us able to send it by uart or i2c in only 4 bytes
		 * also it makes any future increase in the number of digits of the password much easier and-
		 * the change in the code is minimum because we will send and receive it in only 4 bytes anyway.
		 */
		Password = atoi(PasswordArray1);
    1b3e:	ce 01       	movw	r24, r28
    1b40:	44 96       	adiw	r24, 0x14	; 20
    1b42:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <atoi>
    1b46:	aa 27       	eor	r26, r26
    1b48:	97 fd       	sbrc	r25, 7
    1b4a:	a0 95       	com	r26
    1b4c:	ba 2f       	mov	r27, r26
    1b4e:	80 93 24 01 	sts	0x0124, r24
    1b52:	90 93 25 01 	sts	0x0125, r25
    1b56:	a0 93 26 01 	sts	0x0126, r26
    1b5a:	b0 93 27 01 	sts	0x0127, r27

		LCD_clearScreen(); /*clear screen before starting the process again*/
    1b5e:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <LCD_clearScreen>

		LCD_displayString("Type Pass Again:"); /*Displays Type Pass Again: on the screen*/
    1b62:	81 e7       	ldi	r24, 0x71	; 113
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <LCD_displayString>
		LCD_goToRowColumn( 1 , 0 ); /*moves cursor to the next line*/
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	60 e0       	ldi	r22, 0x00	; 0
    1b6e:	0e 94 a1 0c 	call	0x1942	; 0x1942 <LCD_goToRowColumn>
		for(i=0;i<5;i++)
    1b72:	1f 86       	std	Y+15, r1	; 0x0f
    1b74:	13 c0       	rjmp	.+38     	; 0x1b9c <Create_Password+0xde>
			/*
			 * loop to get the five digits entered from the user on the keypad (second time)
			 * adding '0' to the returned value of the keypad to transform the number into asci format
			 * displaying * on the screen after each digit entered by the user
			 */
			PasswordArray2[i] = (KeyPad_getPressedKey() + '0');
    1b76:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b78:	08 2f       	mov	r16, r24
    1b7a:	10 e0       	ldi	r17, 0x00	; 0
    1b7c:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    1b80:	28 2f       	mov	r18, r24
    1b82:	20 5d       	subi	r18, 0xD0	; 208
    1b84:	ce 01       	movw	r24, r28
    1b86:	4e 96       	adiw	r24, 0x1e	; 30
    1b88:	fc 01       	movw	r30, r24
    1b8a:	e0 0f       	add	r30, r16
    1b8c:	f1 1f       	adc	r31, r17
    1b8e:	20 83       	st	Z, r18
			LCD_displayCharacter('*');
    1b90:	8a e2       	ldi	r24, 0x2A	; 42
    1b92:	0e 94 e5 09 	call	0x13ca	; 0x13ca <LCD_displayCharacter>

		LCD_clearScreen(); /*clear screen before starting the process again*/

		LCD_displayString("Type Pass Again:"); /*Displays Type Pass Again: on the screen*/
		LCD_goToRowColumn( 1 , 0 ); /*moves cursor to the next line*/
		for(i=0;i<5;i++)
    1b96:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b98:	8f 5f       	subi	r24, 0xFF	; 255
    1b9a:	8f 87       	std	Y+15, r24	; 0x0f
    1b9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b9e:	85 30       	cpi	r24, 0x05	; 5
    1ba0:	50 f3       	brcs	.-44     	; 0x1b76 <Create_Password+0xb8>
			 * displaying * on the screen after each digit entered by the user
			 */
			PasswordArray2[i] = (KeyPad_getPressedKey() + '0');
			LCD_displayCharacter('*');
		}
		PasswordArray2[i] = '\0'; /*adding null in the end of the array for atoi function to work*/
    1ba2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ba4:	28 2f       	mov	r18, r24
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	ce 01       	movw	r24, r28
    1baa:	4e 96       	adiw	r24, 0x1e	; 30
    1bac:	fc 01       	movw	r30, r24
    1bae:	e2 0f       	add	r30, r18
    1bb0:	f3 1f       	adc	r31, r19
    1bb2:	10 82       	st	Z, r1
		 * converting string into integer for easy compare
		 * having the password as integer makes us able to send it by uart or i2c in only 4 bytes
		 * also it makes any future increase in the number of digits of the password much easier and-
		 * the change in the code is minimum because we will send and receive it in only 4 bytes anyway.
		 */
		Password2 = atoi(PasswordArray2);
    1bb4:	ce 01       	movw	r24, r28
    1bb6:	4e 96       	adiw	r24, 0x1e	; 30
    1bb8:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <atoi>
    1bbc:	aa 27       	eor	r26, r26
    1bbe:	97 fd       	sbrc	r25, 7
    1bc0:	a0 95       	com	r26
    1bc2:	ba 2f       	mov	r27, r26
    1bc4:	88 8b       	std	Y+16, r24	; 0x10
    1bc6:	99 8b       	std	Y+17, r25	; 0x11
    1bc8:	aa 8b       	std	Y+18, r26	; 0x12
    1bca:	bb 8b       	std	Y+19, r27	; 0x13
		LCD_clearScreen(); /*clear screen after finishing the process*/
    1bcc:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <LCD_clearScreen>
		if (Password != Password2)
    1bd0:	20 91 24 01 	lds	r18, 0x0124
    1bd4:	30 91 25 01 	lds	r19, 0x0125
    1bd8:	40 91 26 01 	lds	r20, 0x0126
    1bdc:	50 91 27 01 	lds	r21, 0x0127
    1be0:	88 89       	ldd	r24, Y+16	; 0x10
    1be2:	99 89       	ldd	r25, Y+17	; 0x11
    1be4:	aa 89       	ldd	r26, Y+18	; 0x12
    1be6:	bb 89       	ldd	r27, Y+19	; 0x13
    1be8:	28 17       	cp	r18, r24
    1bea:	39 07       	cpc	r19, r25
    1bec:	4a 07       	cpc	r20, r26
    1bee:	5b 07       	cpc	r21, r27
    1bf0:	09 f4       	brne	.+2      	; 0x1bf4 <Create_Password+0x136>
    1bf2:	80 c0       	rjmp	.+256    	; 0x1cf4 <Create_Password+0x236>
		{
			LCD_displayString("Pass Mismatch !"); /*Displays Pass Mismatch ! on the screen*/
    1bf4:	82 e8       	ldi	r24, 0x82	; 130
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <LCD_displayString>
			LCD_goToRowColumn( 1 , 0 ); /*moves cursor to the next line*/
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	60 e0       	ldi	r22, 0x00	; 0
    1c00:	0e 94 a1 0c 	call	0x1942	; 0x1942 <LCD_goToRowColumn>
			LCD_displayString("Try Again .."); /*Displays Try Again .. on the screen*/
    1c04:	82 e9       	ldi	r24, 0x92	; 146
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <LCD_displayString>
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
    1c0e:	90 e8       	ldi	r25, 0x80	; 128
    1c10:	ab eb       	ldi	r26, 0xBB	; 187
    1c12:	b4 e4       	ldi	r27, 0x44	; 68
    1c14:	8b 87       	std	Y+11, r24	; 0x0b
    1c16:	9c 87       	std	Y+12, r25	; 0x0c
    1c18:	ad 87       	std	Y+13, r26	; 0x0d
    1c1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c20:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c22:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	4a ef       	ldi	r20, 0xFA	; 250
    1c2a:	54 e4       	ldi	r21, 0x44	; 68
    1c2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	8f 83       	std	Y+7, r24	; 0x07
    1c36:	98 87       	std	Y+8, r25	; 0x08
    1c38:	a9 87       	std	Y+9, r26	; 0x09
    1c3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c3e:	78 85       	ldd	r23, Y+8	; 0x08
    1c40:	89 85       	ldd	r24, Y+9	; 0x09
    1c42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c44:	20 e0       	ldi	r18, 0x00	; 0
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	40 e8       	ldi	r20, 0x80	; 128
    1c4a:	5f e3       	ldi	r21, 0x3F	; 63
    1c4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c50:	88 23       	and	r24, r24
    1c52:	2c f4       	brge	.+10     	; 0x1c5e <Create_Password+0x1a0>
		__ticks = 1;
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	9e 83       	std	Y+6, r25	; 0x06
    1c5a:	8d 83       	std	Y+5, r24	; 0x05
    1c5c:	3f c0       	rjmp	.+126    	; 0x1cdc <Create_Password+0x21e>
	else if (__tmp > 65535)
    1c5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c60:	78 85       	ldd	r23, Y+8	; 0x08
    1c62:	89 85       	ldd	r24, Y+9	; 0x09
    1c64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c66:	20 e0       	ldi	r18, 0x00	; 0
    1c68:	3f ef       	ldi	r19, 0xFF	; 255
    1c6a:	4f e7       	ldi	r20, 0x7F	; 127
    1c6c:	57 e4       	ldi	r21, 0x47	; 71
    1c6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c72:	18 16       	cp	r1, r24
    1c74:	4c f5       	brge	.+82     	; 0x1cc8 <Create_Password+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c76:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c78:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	40 e2       	ldi	r20, 0x20	; 32
    1c84:	51 e4       	ldi	r21, 0x41	; 65
    1c86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	bc 01       	movw	r22, r24
    1c90:	cd 01       	movw	r24, r26
    1c92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c96:	dc 01       	movw	r26, r24
    1c98:	cb 01       	movw	r24, r22
    1c9a:	9e 83       	std	Y+6, r25	; 0x06
    1c9c:	8d 83       	std	Y+5, r24	; 0x05
    1c9e:	0f c0       	rjmp	.+30     	; 0x1cbe <Create_Password+0x200>
    1ca0:	88 ec       	ldi	r24, 0xC8	; 200
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	9c 83       	std	Y+4, r25	; 0x04
    1ca6:	8b 83       	std	Y+3, r24	; 0x03
    1ca8:	8b 81       	ldd	r24, Y+3	; 0x03
    1caa:	9c 81       	ldd	r25, Y+4	; 0x04
    1cac:	01 97       	sbiw	r24, 0x01	; 1
    1cae:	f1 f7       	brne	.-4      	; 0x1cac <Create_Password+0x1ee>
    1cb0:	9c 83       	std	Y+4, r25	; 0x04
    1cb2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb8:	01 97       	sbiw	r24, 0x01	; 1
    1cba:	9e 83       	std	Y+6, r25	; 0x06
    1cbc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc2:	00 97       	sbiw	r24, 0x00	; 0
    1cc4:	69 f7       	brne	.-38     	; 0x1ca0 <Create_Password+0x1e2>
    1cc6:	14 c0       	rjmp	.+40     	; 0x1cf0 <Create_Password+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cc8:	6f 81       	ldd	r22, Y+7	; 0x07
    1cca:	78 85       	ldd	r23, Y+8	; 0x08
    1ccc:	89 85       	ldd	r24, Y+9	; 0x09
    1cce:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	9e 83       	std	Y+6, r25	; 0x06
    1cda:	8d 83       	std	Y+5, r24	; 0x05
    1cdc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cde:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce0:	9a 83       	std	Y+2, r25	; 0x02
    1ce2:	89 83       	std	Y+1, r24	; 0x01
    1ce4:	89 81       	ldd	r24, Y+1	; 0x01
    1ce6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce8:	01 97       	sbiw	r24, 0x01	; 1
    1cea:	f1 f7       	brne	.-4      	; 0x1ce8 <Create_Password+0x22a>
    1cec:	9a 83       	std	Y+2, r25	; 0x02
    1cee:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1500); /*delay to make the user read the messege*/
			LCD_clearScreen(); /*clear screen after finishing the process*/
    1cf0:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <LCD_clearScreen>
		}
	}while (Password != Password2); /* repeat the hole process if the two entered passwords aren't equal*/
    1cf4:	20 91 24 01 	lds	r18, 0x0124
    1cf8:	30 91 25 01 	lds	r19, 0x0125
    1cfc:	40 91 26 01 	lds	r20, 0x0126
    1d00:	50 91 27 01 	lds	r21, 0x0127
    1d04:	88 89       	ldd	r24, Y+16	; 0x10
    1d06:	99 89       	ldd	r25, Y+17	; 0x11
    1d08:	aa 89       	ldd	r26, Y+18	; 0x12
    1d0a:	bb 89       	ldd	r27, Y+19	; 0x13
    1d0c:	28 17       	cp	r18, r24
    1d0e:	39 07       	cpc	r19, r25
    1d10:	4a 07       	cpc	r20, r26
    1d12:	5b 07       	cpc	r21, r27
    1d14:	09 f0       	breq	.+2      	; 0x1d18 <Create_Password+0x25a>
    1d16:	f2 ce       	rjmp	.-540    	; 0x1afc <Create_Password+0x3e>
	Stored_Password=Password; /*updating the Store_Password to the latest password*/
    1d18:	80 91 24 01 	lds	r24, 0x0124
    1d1c:	90 91 25 01 	lds	r25, 0x0125
    1d20:	a0 91 26 01 	lds	r26, 0x0126
    1d24:	b0 91 27 01 	lds	r27, 0x0127
    1d28:	80 93 1b 01 	sts	0x011B, r24
    1d2c:	90 93 1c 01 	sts	0x011C, r25
    1d30:	a0 93 1d 01 	sts	0x011D, r26
    1d34:	b0 93 1e 01 	sts	0x011E, r27


}
    1d38:	a7 96       	adiw	r28, 0x27	; 39
    1d3a:	0f b6       	in	r0, 0x3f	; 63
    1d3c:	f8 94       	cli
    1d3e:	de bf       	out	0x3e, r29	; 62
    1d40:	0f be       	out	0x3f, r0	; 63
    1d42:	cd bf       	out	0x3d, r28	; 61
    1d44:	cf 91       	pop	r28
    1d46:	df 91       	pop	r29
    1d48:	1f 91       	pop	r17
    1d4a:	0f 91       	pop	r16
    1d4c:	08 95       	ret

00001d4e <Save_Password>:

uint8 Save_Password(void)
{
    1d4e:	ef 92       	push	r14
    1d50:	ff 92       	push	r15
    1d52:	0f 93       	push	r16
    1d54:	1f 93       	push	r17
    1d56:	df 93       	push	r29
    1d58:	cf 93       	push	r28
    1d5a:	00 d0       	rcall	.+0      	; 0x1d5c <Save_Password+0xe>
    1d5c:	cd b7       	in	r28, 0x3d	; 61
    1d5e:	de b7       	in	r29, 0x3e	; 62
	/*
	 * function sends the password to MC2 to save it in the EEPROM
	 */
	uint8 i=0;uint8 save_status;
    1d60:	1a 82       	std	Y+2, r1	; 0x02
	for(i=0;i<4;i++)
    1d62:	1a 82       	std	Y+2, r1	; 0x02
    1d64:	21 c0       	rjmp	.+66     	; 0x1da8 <Save_Password+0x5a>
	{
		/*
		 * loop to send the 4 bytes of the password
		 * sending the first 8 LSBs then shifting and sending the next 8 bits each loop
		 */
		UART_sendByte((uint8)(Password>>(i*8)));
    1d66:	20 91 24 01 	lds	r18, 0x0124
    1d6a:	30 91 25 01 	lds	r19, 0x0125
    1d6e:	40 91 26 01 	lds	r20, 0x0126
    1d72:	50 91 27 01 	lds	r21, 0x0127
    1d76:	8a 81       	ldd	r24, Y+2	; 0x02
    1d78:	88 2f       	mov	r24, r24
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	88 0f       	add	r24, r24
    1d7e:	99 1f       	adc	r25, r25
    1d80:	88 0f       	add	r24, r24
    1d82:	99 1f       	adc	r25, r25
    1d84:	88 0f       	add	r24, r24
    1d86:	99 1f       	adc	r25, r25
    1d88:	79 01       	movw	r14, r18
    1d8a:	8a 01       	movw	r16, r20
    1d8c:	04 c0       	rjmp	.+8      	; 0x1d96 <Save_Password+0x48>
    1d8e:	16 95       	lsr	r17
    1d90:	07 95       	ror	r16
    1d92:	f7 94       	ror	r15
    1d94:	e7 94       	ror	r14
    1d96:	8a 95       	dec	r24
    1d98:	d2 f7       	brpl	.-12     	; 0x1d8e <Save_Password+0x40>
    1d9a:	d8 01       	movw	r26, r16
    1d9c:	c7 01       	movw	r24, r14
    1d9e:	0e 94 04 12 	call	0x2408	; 0x2408 <UART_sendByte>
{
	/*
	 * function sends the password to MC2 to save it in the EEPROM
	 */
	uint8 i=0;uint8 save_status;
	for(i=0;i<4;i++)
    1da2:	8a 81       	ldd	r24, Y+2	; 0x02
    1da4:	8f 5f       	subi	r24, 0xFF	; 255
    1da6:	8a 83       	std	Y+2, r24	; 0x02
    1da8:	8a 81       	ldd	r24, Y+2	; 0x02
    1daa:	84 30       	cpi	r24, 0x04	; 4
    1dac:	e0 f2       	brcs	.-72     	; 0x1d66 <Save_Password+0x18>
		 * loop to send the 4 bytes of the password
		 * sending the first 8 LSBs then shifting and sending the next 8 bits each loop
		 */
		UART_sendByte((uint8)(Password>>(i*8)));
	}
	save_status = UART_recieveByte(); /*wait for MC2 to reply to keep the synchronization between them*/
    1dae:	0e 94 1b 12 	call	0x2436	; 0x2436 <UART_recieveByte>
    1db2:	89 83       	std	Y+1, r24	; 0x01
	return save_status; /*return save_status to facilitate debug if needed*/
    1db4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1db6:	0f 90       	pop	r0
    1db8:	0f 90       	pop	r0
    1dba:	cf 91       	pop	r28
    1dbc:	df 91       	pop	r29
    1dbe:	1f 91       	pop	r17
    1dc0:	0f 91       	pop	r16
    1dc2:	ff 90       	pop	r15
    1dc4:	ef 90       	pop	r14
    1dc6:	08 95       	ret

00001dc8 <Enter_Password>:

void Enter_Password(void)
{
    1dc8:	0f 93       	push	r16
    1dca:	1f 93       	push	r17
    1dcc:	df 93       	push	r29
    1dce:	cf 93       	push	r28
    1dd0:	00 d0       	rcall	.+0      	; 0x1dd2 <Enter_Password+0xa>
    1dd2:	00 d0       	rcall	.+0      	; 0x1dd4 <Enter_Password+0xc>
    1dd4:	00 d0       	rcall	.+0      	; 0x1dd6 <Enter_Password+0xe>
    1dd6:	cd b7       	in	r28, 0x3d	; 61
    1dd8:	de b7       	in	r29, 0x3e	; 62
	/*
	 * function responsible for the process of entering the password after being created
	 */
	uint8 PasswordArray1[5] = {0}; /*array to hold the password entered by the user*/
    1dda:	85 e0       	ldi	r24, 0x05	; 5
    1ddc:	fe 01       	movw	r30, r28
    1dde:	32 96       	adiw	r30, 0x02	; 2
    1de0:	df 01       	movw	r26, r30
    1de2:	98 2f       	mov	r25, r24
    1de4:	1d 92       	st	X+, r1
    1de6:	9a 95       	dec	r25
    1de8:	e9 f7       	brne	.-6      	; 0x1de4 <Enter_Password+0x1c>
	LCD_clearScreen();/*clear screen in the start of the process*/
    1dea:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <LCD_clearScreen>
	LCD_displayString("Enter Password :"); /*Displays Enter Password : on the screen*/
    1dee:	8f e9       	ldi	r24, 0x9F	; 159
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <LCD_displayString>
	LCD_goToRowColumn( 1 , 0 ); /*moves cursor to the next line*/
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	60 e0       	ldi	r22, 0x00	; 0
    1dfa:	0e 94 a1 0c 	call	0x1942	; 0x1942 <LCD_goToRowColumn>
	uint8 i=0;
    1dfe:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;i<5;i++)
    1e00:	19 82       	std	Y+1, r1	; 0x01
    1e02:	13 c0       	rjmp	.+38     	; 0x1e2a <Enter_Password+0x62>
		/*
		 * loop to get the five digits entered from the user on the keypad
		 * adding '0' to the returned value of the keypad to transform the number into asci format
		 * displaying * on the screen after each digit entered by the user
		 */
		PasswordArray1[i] = (KeyPad_getPressedKey() + '0');
    1e04:	89 81       	ldd	r24, Y+1	; 0x01
    1e06:	08 2f       	mov	r16, r24
    1e08:	10 e0       	ldi	r17, 0x00	; 0
    1e0a:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    1e0e:	28 2f       	mov	r18, r24
    1e10:	20 5d       	subi	r18, 0xD0	; 208
    1e12:	ce 01       	movw	r24, r28
    1e14:	02 96       	adiw	r24, 0x02	; 2
    1e16:	fc 01       	movw	r30, r24
    1e18:	e0 0f       	add	r30, r16
    1e1a:	f1 1f       	adc	r31, r17
    1e1c:	20 83       	st	Z, r18
		LCD_displayCharacter('*');
    1e1e:	8a e2       	ldi	r24, 0x2A	; 42
    1e20:	0e 94 e5 09 	call	0x13ca	; 0x13ca <LCD_displayCharacter>
	uint8 PasswordArray1[5] = {0}; /*array to hold the password entered by the user*/
	LCD_clearScreen();/*clear screen in the start of the process*/
	LCD_displayString("Enter Password :"); /*Displays Enter Password : on the screen*/
	LCD_goToRowColumn( 1 , 0 ); /*moves cursor to the next line*/
	uint8 i=0;
	for(i=0;i<5;i++)
    1e24:	89 81       	ldd	r24, Y+1	; 0x01
    1e26:	8f 5f       	subi	r24, 0xFF	; 255
    1e28:	89 83       	std	Y+1, r24	; 0x01
    1e2a:	89 81       	ldd	r24, Y+1	; 0x01
    1e2c:	85 30       	cpi	r24, 0x05	; 5
    1e2e:	50 f3       	brcs	.-44     	; 0x1e04 <Enter_Password+0x3c>
		 * displaying * on the screen after each digit entered by the user
		 */
		PasswordArray1[i] = (KeyPad_getPressedKey() + '0');
		LCD_displayCharacter('*');
	}
	Password = atoi(PasswordArray1); /*converting string to integer to compare with stored password in validation phase*/
    1e30:	ce 01       	movw	r24, r28
    1e32:	02 96       	adiw	r24, 0x02	; 2
    1e34:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <atoi>
    1e38:	aa 27       	eor	r26, r26
    1e3a:	97 fd       	sbrc	r25, 7
    1e3c:	a0 95       	com	r26
    1e3e:	ba 2f       	mov	r27, r26
    1e40:	80 93 24 01 	sts	0x0124, r24
    1e44:	90 93 25 01 	sts	0x0125, r25
    1e48:	a0 93 26 01 	sts	0x0126, r26
    1e4c:	b0 93 27 01 	sts	0x0127, r27
	LCD_clearScreen();/*clear screen after finishing the process*/
    1e50:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <LCD_clearScreen>
}
    1e54:	26 96       	adiw	r28, 0x06	; 6
    1e56:	0f b6       	in	r0, 0x3f	; 63
    1e58:	f8 94       	cli
    1e5a:	de bf       	out	0x3e, r29	; 62
    1e5c:	0f be       	out	0x3f, r0	; 63
    1e5e:	cd bf       	out	0x3d, r28	; 61
    1e60:	cf 91       	pop	r28
    1e62:	df 91       	pop	r29
    1e64:	1f 91       	pop	r17
    1e66:	0f 91       	pop	r16
    1e68:	08 95       	ret

00001e6a <Validate_Password>:

uint8 Validate_Password(void)
{
    1e6a:	df 93       	push	r29
    1e6c:	cf 93       	push	r28
    1e6e:	0f 92       	push	r0
    1e70:	cd b7       	in	r28, 0x3d	; 61
    1e72:	de b7       	in	r29, 0x3e	; 62
	/*
	 * the function compares the password entered by the user to the stored password
	 * if they are equal it returns a success flag
	 * else it returns a fail flag
	 */
	if(Password == Stored_Password)
    1e74:	20 91 24 01 	lds	r18, 0x0124
    1e78:	30 91 25 01 	lds	r19, 0x0125
    1e7c:	40 91 26 01 	lds	r20, 0x0126
    1e80:	50 91 27 01 	lds	r21, 0x0127
    1e84:	80 91 1b 01 	lds	r24, 0x011B
    1e88:	90 91 1c 01 	lds	r25, 0x011C
    1e8c:	a0 91 1d 01 	lds	r26, 0x011D
    1e90:	b0 91 1e 01 	lds	r27, 0x011E
    1e94:	28 17       	cp	r18, r24
    1e96:	39 07       	cpc	r19, r25
    1e98:	4a 07       	cpc	r20, r26
    1e9a:	5b 07       	cpc	r21, r27
    1e9c:	19 f4       	brne	.+6      	; 0x1ea4 <Validate_Password+0x3a>
	{
		return SUCCESS;
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	89 83       	std	Y+1, r24	; 0x01
    1ea2:	01 c0       	rjmp	.+2      	; 0x1ea6 <Validate_Password+0x3c>
	}
	else
	{
		return FAIL;
    1ea4:	19 82       	std	Y+1, r1	; 0x01
    1ea6:	89 81       	ldd	r24, Y+1	; 0x01
	}
}
    1ea8:	0f 90       	pop	r0
    1eaa:	cf 91       	pop	r28
    1eac:	df 91       	pop	r29
    1eae:	08 95       	ret

00001eb0 <Send_OpenDoor_Command>:

void Send_OpenDoor_Command(void)
{
    1eb0:	df 93       	push	r29
    1eb2:	cf 93       	push	r28
    1eb4:	0f 92       	push	r0
    1eb6:	cd b7       	in	r28, 0x3d	; 61
    1eb8:	de b7       	in	r29, 0x3e	; 62

	uint8 door_status;
	LCD_clearScreen(); /*clear screen in the start of the process*/
    1eba:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <LCD_clearScreen>
	UART_sendByte(OPEN_DOOR); /*send open door command to MC2 to start the door sequence*/
    1ebe:	82 e0       	ldi	r24, 0x02	; 2
    1ec0:	0e 94 04 12 	call	0x2408	; 0x2408 <UART_sendByte>
	LCD_displayString("Opening Door"); /*Displays Opening Door on the screen*/
    1ec4:	80 eb       	ldi	r24, 0xB0	; 176
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <LCD_displayString>
	door_status = UART_recieveByte(); /*wait for MC2 reply to move to the closing door phase*/
    1ecc:	0e 94 1b 12 	call	0x2436	; 0x2436 <UART_recieveByte>
    1ed0:	89 83       	std	Y+1, r24	; 0x01
	LCD_clearScreen(); /*clear screen */
    1ed2:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <LCD_clearScreen>
	LCD_displayString("Closing Door"); /*Displays Closing Door on the screen*/
    1ed6:	8d eb       	ldi	r24, 0xBD	; 189
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <LCD_displayString>
	door_status = UART_recieveByte(); /*wait for MC2 reply know that the door sequence is finished*/
    1ede:	0e 94 1b 12 	call	0x2436	; 0x2436 <UART_recieveByte>
    1ee2:	89 83       	std	Y+1, r24	; 0x01
	LCD_clearScreen(); /*clear screen after finishing the process*/
    1ee4:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <LCD_clearScreen>
}
    1ee8:	0f 90       	pop	r0
    1eea:	cf 91       	pop	r28
    1eec:	df 91       	pop	r29
    1eee:	08 95       	ret

00001ef0 <Send_Buzzer_Command>:

void Send_Buzzer_Command(void)
{
    1ef0:	df 93       	push	r29
    1ef2:	cf 93       	push	r28
    1ef4:	0f 92       	push	r0
    1ef6:	cd b7       	in	r28, 0x3d	; 61
    1ef8:	de b7       	in	r29, 0x3e	; 62
	uint8 buzzer_status;
	LCD_clearScreen(); /*clear screen in the start of the process*/
    1efa:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <LCD_clearScreen>
	UART_sendByte(ALERT); /*send alert command to MC2 to start the buzzer*/
    1efe:	83 e0       	ldi	r24, 0x03	; 3
    1f00:	0e 94 04 12 	call	0x2408	; 0x2408 <UART_sendByte>
	//LCD_displayString("INTRUDER ALERT !"); /*being professional*/
	LCD_displayString("2e2fesh 7araamy"); /*sha2awa*/
    1f04:	8a ec       	ldi	r24, 0xCA	; 202
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <LCD_displayString>
	buzzer_status = UART_recieveByte(); /*wait for MC2 reply know that the alert time is finished*/
    1f0c:	0e 94 1b 12 	call	0x2436	; 0x2436 <UART_recieveByte>
    1f10:	89 83       	std	Y+1, r24	; 0x01
	LCD_clearScreen(); /*clear screen after finishing the process*/
    1f12:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <LCD_clearScreen>
}
    1f16:	0f 90       	pop	r0
    1f18:	cf 91       	pop	r28
    1f1a:	df 91       	pop	r29
    1f1c:	08 95       	ret

00001f1e <Display_MainMenu>:

void Display_MainMenu(void)
{
    1f1e:	df 93       	push	r29
    1f20:	cf 93       	push	r28
    1f22:	cd b7       	in	r28, 0x3d	; 61
    1f24:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen(); /*clear screen in the start of the process*/
    1f26:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <LCD_clearScreen>
	LCD_displayString("* Change Pass"); /*Displays * Change Pass on the screen*/
    1f2a:	8a ed       	ldi	r24, 0xDA	; 218
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <LCD_displayString>
	LCD_goToRowColumn(1 , 0); /*moves cursor to the next line*/
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	60 e0       	ldi	r22, 0x00	; 0
    1f36:	0e 94 a1 0c 	call	0x1942	; 0x1942 <LCD_goToRowColumn>
	LCD_displayString("# Open Door"); /*Displays # Open Door on the screen*/
    1f3a:	88 ee       	ldi	r24, 0xE8	; 232
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <LCD_displayString>
}
    1f42:	cf 91       	pop	r28
    1f44:	df 91       	pop	r29
    1f46:	08 95       	ret

00001f48 <main>:

int main (void)
{
    1f48:	df 93       	push	r29
    1f4a:	cf 93       	push	r28
    1f4c:	cd b7       	in	r28, 0x3d	; 61
    1f4e:	de b7       	in	r29, 0x3e	; 62
    1f50:	e0 97       	sbiw	r28, 0x30	; 48
    1f52:	0f b6       	in	r0, 0x3f	; 63
    1f54:	f8 94       	cli
    1f56:	de bf       	out	0x3e, r29	; 62
    1f58:	0f be       	out	0x3f, r0	; 63
    1f5a:	cd bf       	out	0x3d, r28	; 61
	UartConfig UartSettings = {NO_PARITY,9600,SINGLE,EIGHT_BITS}; /*setting up the uart configuration structure*/
    1f5c:	9e 01       	movw	r18, r28
    1f5e:	2d 5d       	subi	r18, 0xDD	; 221
    1f60:	3f 4f       	sbci	r19, 0xFF	; 255
    1f62:	3d a7       	std	Y+45, r19	; 0x2d
    1f64:	2c a7       	std	Y+44, r18	; 0x2c
    1f66:	8f e1       	ldi	r24, 0x1F	; 31
    1f68:	91 e0       	ldi	r25, 0x01	; 1
    1f6a:	9f a7       	std	Y+47, r25	; 0x2f
    1f6c:	8e a7       	std	Y+46, r24	; 0x2e
    1f6e:	95 e0       	ldi	r25, 0x05	; 5
    1f70:	98 ab       	std	Y+48, r25	; 0x30
    1f72:	ee a5       	ldd	r30, Y+46	; 0x2e
    1f74:	ff a5       	ldd	r31, Y+47	; 0x2f
    1f76:	00 80       	ld	r0, Z
    1f78:	2e a5       	ldd	r18, Y+46	; 0x2e
    1f7a:	3f a5       	ldd	r19, Y+47	; 0x2f
    1f7c:	2f 5f       	subi	r18, 0xFF	; 255
    1f7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f80:	3f a7       	std	Y+47, r19	; 0x2f
    1f82:	2e a7       	std	Y+46, r18	; 0x2e
    1f84:	ec a5       	ldd	r30, Y+44	; 0x2c
    1f86:	fd a5       	ldd	r31, Y+45	; 0x2d
    1f88:	00 82       	st	Z, r0
    1f8a:	2c a5       	ldd	r18, Y+44	; 0x2c
    1f8c:	3d a5       	ldd	r19, Y+45	; 0x2d
    1f8e:	2f 5f       	subi	r18, 0xFF	; 255
    1f90:	3f 4f       	sbci	r19, 0xFF	; 255
    1f92:	3d a7       	std	Y+45, r19	; 0x2d
    1f94:	2c a7       	std	Y+44, r18	; 0x2c
    1f96:	38 a9       	ldd	r19, Y+48	; 0x30
    1f98:	31 50       	subi	r19, 0x01	; 1
    1f9a:	38 ab       	std	Y+48, r19	; 0x30
    1f9c:	88 a9       	ldd	r24, Y+48	; 0x30
    1f9e:	88 23       	and	r24, r24
    1fa0:	41 f7       	brne	.-48     	; 0x1f72 <main+0x2a>
	UART_init(&UartSettings); /*initializing the uart and passing the config struct. to it*/
    1fa2:	ce 01       	movw	r24, r28
    1fa4:	83 96       	adiw	r24, 0x23	; 35
    1fa6:	0e 94 2f 11 	call	0x225e	; 0x225e <UART_init>
	LCD_init(); /*initializing lcd*/
    1faa:	0e 94 aa 06 	call	0xd54	; 0xd54 <LCD_init>
	uint8 Flag_Status;
	Flag_Status = Receive_Flag(); /* receiving flag from MC2 telling us if a password exists*/
    1fae:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <Receive_Flag>
    1fb2:	8a a3       	std	Y+34, r24	; 0x22
	switch (Flag_Status)
    1fb4:	8a a1       	ldd	r24, Y+34	; 0x22
    1fb6:	e8 2f       	mov	r30, r24
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	fb a7       	std	Y+43, r31	; 0x2b
    1fbc:	ea a7       	std	Y+42, r30	; 0x2a
    1fbe:	2a a5       	ldd	r18, Y+42	; 0x2a
    1fc0:	3b a5       	ldd	r19, Y+43	; 0x2b
    1fc2:	21 15       	cp	r18, r1
    1fc4:	31 05       	cpc	r19, r1
    1fc6:	31 f0       	breq	.+12     	; 0x1fd4 <main+0x8c>
    1fc8:	8a a5       	ldd	r24, Y+42	; 0x2a
    1fca:	9b a5       	ldd	r25, Y+43	; 0x2b
    1fcc:	81 30       	cpi	r24, 0x01	; 1
    1fce:	91 05       	cpc	r25, r1
    1fd0:	31 f0       	breq	.+12     	; 0x1fde <main+0x96>
    1fd2:	07 c0       	rjmp	.+14     	; 0x1fe2 <main+0x9a>
	{
	case FAIL: ;  /*no password exist (user first time to open the app)*/
		Create_Password(); /*do create password process*/
    1fd4:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <Create_Password>
		Save_Password(); /*send password to MC2 to save it to the eeprom*/
    1fd8:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <Save_Password>
    1fdc:	02 c0       	rjmp	.+4      	; 0x1fe2 <main+0x9a>
		break;

	case SUCCESS: ; /*password already exists*/
		Receive_Stored_Password(); /*receive the password and store it for future comparisons*/
    1fde:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <Receive_Stored_Password>

	}

	while(1)
	{
		Display_MainMenu(); /*displays main menu with options for the user to choose*/
    1fe2:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <Display_MainMenu>
		uint8 User_Choice;
		User_Choice = KeyPad_getPressedKey(); /*receive the key that the user press to choose from main menu*/
    1fe6:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    1fea:	89 a3       	std	Y+33, r24	; 0x21
		switch (User_Choice)
    1fec:	89 a1       	ldd	r24, Y+33	; 0x21
    1fee:	e8 2f       	mov	r30, r24
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	f9 a7       	std	Y+41, r31	; 0x29
    1ff4:	e8 a7       	std	Y+40, r30	; 0x28
    1ff6:	28 a5       	ldd	r18, Y+40	; 0x28
    1ff8:	39 a5       	ldd	r19, Y+41	; 0x29
    1ffa:	23 32       	cpi	r18, 0x23	; 35
    1ffc:	31 05       	cpc	r19, r1
    1ffe:	09 f4       	brne	.+2      	; 0x2002 <main+0xba>
    2000:	9c c0       	rjmp	.+312    	; 0x213a <main+0x1f2>
    2002:	88 a5       	ldd	r24, Y+40	; 0x28
    2004:	99 a5       	ldd	r25, Y+41	; 0x29
    2006:	8a 32       	cpi	r24, 0x2A	; 42
    2008:	91 05       	cpc	r25, r1
    200a:	59 f7       	brne	.-42     	; 0x1fe2 <main+0x9a>
		{
		case '*' : /* if user entered *  */
		{
			uint8 Validation_Flag;
			uint8 Wrong_Pass_Counter=0;
    200c:	1f 8e       	std	Y+31, r1	; 0x1f
			do
			{
				if(Wrong_Pass_Counter > 0)
    200e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2010:	88 23       	and	r24, r24
    2012:	09 f4       	brne	.+2      	; 0x2016 <main+0xce>
    2014:	7e c0       	rjmp	.+252    	; 0x2112 <main+0x1ca>
				{
					LCD_clearScreen(); /*clear screen*/
    2016:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <LCD_clearScreen>
					LCD_displayString("WRONG PASSWORD"); /* Display WRONG PASSWORD on the screen*/
    201a:	84 ef       	ldi	r24, 0xF4	; 244
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <LCD_displayString>
    2022:	80 e0       	ldi	r24, 0x00	; 0
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	aa e7       	ldi	r26, 0x7A	; 122
    2028:	b4 e4       	ldi	r27, 0x44	; 68
    202a:	89 8f       	std	Y+25, r24	; 0x19
    202c:	9a 8f       	std	Y+26, r25	; 0x1a
    202e:	ab 8f       	std	Y+27, r26	; 0x1b
    2030:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2032:	69 8d       	ldd	r22, Y+25	; 0x19
    2034:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2036:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2038:	9c 8d       	ldd	r25, Y+28	; 0x1c
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	4a ef       	ldi	r20, 0xFA	; 250
    2040:	54 e4       	ldi	r21, 0x44	; 68
    2042:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	8d 8b       	std	Y+21, r24	; 0x15
    204c:	9e 8b       	std	Y+22, r25	; 0x16
    204e:	af 8b       	std	Y+23, r26	; 0x17
    2050:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2052:	6d 89       	ldd	r22, Y+21	; 0x15
    2054:	7e 89       	ldd	r23, Y+22	; 0x16
    2056:	8f 89       	ldd	r24, Y+23	; 0x17
    2058:	98 8d       	ldd	r25, Y+24	; 0x18
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	40 e8       	ldi	r20, 0x80	; 128
    2060:	5f e3       	ldi	r21, 0x3F	; 63
    2062:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2066:	88 23       	and	r24, r24
    2068:	2c f4       	brge	.+10     	; 0x2074 <main+0x12c>
		__ticks = 1;
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	9c 8b       	std	Y+20, r25	; 0x14
    2070:	8b 8b       	std	Y+19, r24	; 0x13
    2072:	3f c0       	rjmp	.+126    	; 0x20f2 <main+0x1aa>
	else if (__tmp > 65535)
    2074:	6d 89       	ldd	r22, Y+21	; 0x15
    2076:	7e 89       	ldd	r23, Y+22	; 0x16
    2078:	8f 89       	ldd	r24, Y+23	; 0x17
    207a:	98 8d       	ldd	r25, Y+24	; 0x18
    207c:	20 e0       	ldi	r18, 0x00	; 0
    207e:	3f ef       	ldi	r19, 0xFF	; 255
    2080:	4f e7       	ldi	r20, 0x7F	; 127
    2082:	57 e4       	ldi	r21, 0x47	; 71
    2084:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2088:	18 16       	cp	r1, r24
    208a:	4c f5       	brge	.+82     	; 0x20de <main+0x196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    208c:	69 8d       	ldd	r22, Y+25	; 0x19
    208e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2090:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2092:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	40 e2       	ldi	r20, 0x20	; 32
    209a:	51 e4       	ldi	r21, 0x41	; 65
    209c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	bc 01       	movw	r22, r24
    20a6:	cd 01       	movw	r24, r26
    20a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	9c 8b       	std	Y+20, r25	; 0x14
    20b2:	8b 8b       	std	Y+19, r24	; 0x13
    20b4:	0f c0       	rjmp	.+30     	; 0x20d4 <main+0x18c>
    20b6:	88 ec       	ldi	r24, 0xC8	; 200
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	9a 8b       	std	Y+18, r25	; 0x12
    20bc:	89 8b       	std	Y+17, r24	; 0x11
    20be:	89 89       	ldd	r24, Y+17	; 0x11
    20c0:	9a 89       	ldd	r25, Y+18	; 0x12
    20c2:	01 97       	sbiw	r24, 0x01	; 1
    20c4:	f1 f7       	brne	.-4      	; 0x20c2 <main+0x17a>
    20c6:	9a 8b       	std	Y+18, r25	; 0x12
    20c8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ca:	8b 89       	ldd	r24, Y+19	; 0x13
    20cc:	9c 89       	ldd	r25, Y+20	; 0x14
    20ce:	01 97       	sbiw	r24, 0x01	; 1
    20d0:	9c 8b       	std	Y+20, r25	; 0x14
    20d2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d4:	8b 89       	ldd	r24, Y+19	; 0x13
    20d6:	9c 89       	ldd	r25, Y+20	; 0x14
    20d8:	00 97       	sbiw	r24, 0x00	; 0
    20da:	69 f7       	brne	.-38     	; 0x20b6 <main+0x16e>
    20dc:	14 c0       	rjmp	.+40     	; 0x2106 <main+0x1be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20de:	6d 89       	ldd	r22, Y+21	; 0x15
    20e0:	7e 89       	ldd	r23, Y+22	; 0x16
    20e2:	8f 89       	ldd	r24, Y+23	; 0x17
    20e4:	98 8d       	ldd	r25, Y+24	; 0x18
    20e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	9c 8b       	std	Y+20, r25	; 0x14
    20f0:	8b 8b       	std	Y+19, r24	; 0x13
    20f2:	8b 89       	ldd	r24, Y+19	; 0x13
    20f4:	9c 89       	ldd	r25, Y+20	; 0x14
    20f6:	98 8b       	std	Y+16, r25	; 0x10
    20f8:	8f 87       	std	Y+15, r24	; 0x0f
    20fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    20fc:	98 89       	ldd	r25, Y+16	; 0x10
    20fe:	01 97       	sbiw	r24, 0x01	; 1
    2100:	f1 f7       	brne	.-4      	; 0x20fe <main+0x1b6>
    2102:	98 8b       	std	Y+16, r25	; 0x10
    2104:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(1000); /*delay to give the user time to read*/
					if(Wrong_Pass_Counter >= 3)
    2106:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2108:	83 30       	cpi	r24, 0x03	; 3
    210a:	18 f0       	brcs	.+6      	; 0x2112 <main+0x1ca>
						/*
						 * if the user entered a wrong password 3 times the program freezes
						 * send the buzzer command to MC2 to activate the buzzer for a minute
						 * reset Wrong_Pass_Counter to give the user three more tries after the penalty ended
						 */
						Send_Buzzer_Command();
    210c:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <Send_Buzzer_Command>
						Wrong_Pass_Counter=0;
    2110:	1f 8e       	std	Y+31, r1	; 0x1f

					}
				}
				Enter_Password(); /* do the enter password process*/
    2112:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <Enter_Password>
				Validation_Flag = Validate_Password(); /*compare entered password with stored password*/
    2116:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <Validate_Password>
    211a:	88 a3       	std	Y+32, r24	; 0x20
				Wrong_Pass_Counter++; /*increase the wrong password counter to use as a flag*/
    211c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    211e:	8f 5f       	subi	r24, 0xFF	; 255
    2120:	8f 8f       	std	Y+31, r24	; 0x1f
			}
			while(Validation_Flag == FAIL); /* if the entered password doesn't match the stored password repeat*/
    2122:	88 a1       	ldd	r24, Y+32	; 0x20
    2124:	88 23       	and	r24, r24
    2126:	09 f4       	brne	.+2      	; 0x212a <main+0x1e2>
    2128:	72 cf       	rjmp	.-284    	; 0x200e <main+0xc6>

			UART_sendByte(CREATE_PASSWORD); /*send create password flag to MC2 keep the synchronization*/
    212a:	84 e0       	ldi	r24, 0x04	; 4
    212c:	0e 94 04 12 	call	0x2408	; 0x2408 <UART_sendByte>
			Create_Password(); /* do the create password process*/
    2130:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <Create_Password>
			Save_Password(); /* send the password to MC2 to save it to the eeprom*/
    2134:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <Save_Password>
    2138:	54 cf       	rjmp	.-344    	; 0x1fe2 <main+0x9a>
		}
		case '#' : /* if user entered # */
		{

			uint8 Validation_Flag;
			uint8 Wrong_Pass_Counter=0;
    213a:	1d 8e       	std	Y+29, r1	; 0x1d
			do
			{
				if(Wrong_Pass_Counter > 0)
    213c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    213e:	88 23       	and	r24, r24
    2140:	09 f4       	brne	.+2      	; 0x2144 <main+0x1fc>
    2142:	7e c0       	rjmp	.+252    	; 0x2240 <main+0x2f8>
				{
					LCD_clearScreen(); /*clear screen*/
    2144:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <LCD_clearScreen>
					LCD_displayString("WRONG PASSWORD!"); /* Display WRONG PASSWORD on the screen*/
    2148:	83 e0       	ldi	r24, 0x03	; 3
    214a:	91 e0       	ldi	r25, 0x01	; 1
    214c:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <LCD_displayString>
    2150:	80 e0       	ldi	r24, 0x00	; 0
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	aa e7       	ldi	r26, 0x7A	; 122
    2156:	b4 e4       	ldi	r27, 0x44	; 68
    2158:	8b 87       	std	Y+11, r24	; 0x0b
    215a:	9c 87       	std	Y+12, r25	; 0x0c
    215c:	ad 87       	std	Y+13, r26	; 0x0d
    215e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2160:	6b 85       	ldd	r22, Y+11	; 0x0b
    2162:	7c 85       	ldd	r23, Y+12	; 0x0c
    2164:	8d 85       	ldd	r24, Y+13	; 0x0d
    2166:	9e 85       	ldd	r25, Y+14	; 0x0e
    2168:	20 e0       	ldi	r18, 0x00	; 0
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	4a ef       	ldi	r20, 0xFA	; 250
    216e:	54 e4       	ldi	r21, 0x44	; 68
    2170:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	8f 83       	std	Y+7, r24	; 0x07
    217a:	98 87       	std	Y+8, r25	; 0x08
    217c:	a9 87       	std	Y+9, r26	; 0x09
    217e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2180:	6f 81       	ldd	r22, Y+7	; 0x07
    2182:	78 85       	ldd	r23, Y+8	; 0x08
    2184:	89 85       	ldd	r24, Y+9	; 0x09
    2186:	9a 85       	ldd	r25, Y+10	; 0x0a
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	40 e8       	ldi	r20, 0x80	; 128
    218e:	5f e3       	ldi	r21, 0x3F	; 63
    2190:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2194:	88 23       	and	r24, r24
    2196:	2c f4       	brge	.+10     	; 0x21a2 <main+0x25a>
		__ticks = 1;
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	9e 83       	std	Y+6, r25	; 0x06
    219e:	8d 83       	std	Y+5, r24	; 0x05
    21a0:	3f c0       	rjmp	.+126    	; 0x2220 <main+0x2d8>
	else if (__tmp > 65535)
    21a2:	6f 81       	ldd	r22, Y+7	; 0x07
    21a4:	78 85       	ldd	r23, Y+8	; 0x08
    21a6:	89 85       	ldd	r24, Y+9	; 0x09
    21a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	3f ef       	ldi	r19, 0xFF	; 255
    21ae:	4f e7       	ldi	r20, 0x7F	; 127
    21b0:	57 e4       	ldi	r21, 0x47	; 71
    21b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21b6:	18 16       	cp	r1, r24
    21b8:	4c f5       	brge	.+82     	; 0x220c <main+0x2c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    21bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    21be:	8d 85       	ldd	r24, Y+13	; 0x0d
    21c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	40 e2       	ldi	r20, 0x20	; 32
    21c8:	51 e4       	ldi	r21, 0x41	; 65
    21ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	bc 01       	movw	r22, r24
    21d4:	cd 01       	movw	r24, r26
    21d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	9e 83       	std	Y+6, r25	; 0x06
    21e0:	8d 83       	std	Y+5, r24	; 0x05
    21e2:	0f c0       	rjmp	.+30     	; 0x2202 <main+0x2ba>
    21e4:	88 ec       	ldi	r24, 0xC8	; 200
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	9c 83       	std	Y+4, r25	; 0x04
    21ea:	8b 83       	std	Y+3, r24	; 0x03
    21ec:	8b 81       	ldd	r24, Y+3	; 0x03
    21ee:	9c 81       	ldd	r25, Y+4	; 0x04
    21f0:	01 97       	sbiw	r24, 0x01	; 1
    21f2:	f1 f7       	brne	.-4      	; 0x21f0 <main+0x2a8>
    21f4:	9c 83       	std	Y+4, r25	; 0x04
    21f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f8:	8d 81       	ldd	r24, Y+5	; 0x05
    21fa:	9e 81       	ldd	r25, Y+6	; 0x06
    21fc:	01 97       	sbiw	r24, 0x01	; 1
    21fe:	9e 83       	std	Y+6, r25	; 0x06
    2200:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2202:	8d 81       	ldd	r24, Y+5	; 0x05
    2204:	9e 81       	ldd	r25, Y+6	; 0x06
    2206:	00 97       	sbiw	r24, 0x00	; 0
    2208:	69 f7       	brne	.-38     	; 0x21e4 <main+0x29c>
    220a:	14 c0       	rjmp	.+40     	; 0x2234 <main+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    220c:	6f 81       	ldd	r22, Y+7	; 0x07
    220e:	78 85       	ldd	r23, Y+8	; 0x08
    2210:	89 85       	ldd	r24, Y+9	; 0x09
    2212:	9a 85       	ldd	r25, Y+10	; 0x0a
    2214:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2218:	dc 01       	movw	r26, r24
    221a:	cb 01       	movw	r24, r22
    221c:	9e 83       	std	Y+6, r25	; 0x06
    221e:	8d 83       	std	Y+5, r24	; 0x05
    2220:	8d 81       	ldd	r24, Y+5	; 0x05
    2222:	9e 81       	ldd	r25, Y+6	; 0x06
    2224:	9a 83       	std	Y+2, r25	; 0x02
    2226:	89 83       	std	Y+1, r24	; 0x01
    2228:	89 81       	ldd	r24, Y+1	; 0x01
    222a:	9a 81       	ldd	r25, Y+2	; 0x02
    222c:	01 97       	sbiw	r24, 0x01	; 1
    222e:	f1 f7       	brne	.-4      	; 0x222c <main+0x2e4>
    2230:	9a 83       	std	Y+2, r25	; 0x02
    2232:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(1000); /*delay to give the user time to read*/
					if(Wrong_Pass_Counter >= 3)
    2234:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2236:	83 30       	cpi	r24, 0x03	; 3
    2238:	18 f0       	brcs	.+6      	; 0x2240 <main+0x2f8>
						/*
						 * if the user entered a wrong password 3 times the program freezes
						 * send the buzzer command to MC2 to activate the buzzer for a minute
						 * reset Wrong_Pass_Counter to give the user three more tries after the penalty ended
						 */
						Send_Buzzer_Command();
    223a:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <Send_Buzzer_Command>
						Wrong_Pass_Counter=0;
    223e:	1d 8e       	std	Y+29, r1	; 0x1d

					}
				}
				Enter_Password(); /* do the enter password process*/
    2240:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <Enter_Password>
				Validation_Flag = Validate_Password(); /*compare entered password with stored password*/
    2244:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <Validate_Password>
    2248:	8e 8f       	std	Y+30, r24	; 0x1e
				Wrong_Pass_Counter++; /*increase the wrong password counter to use as a flag*/
    224a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    224c:	8f 5f       	subi	r24, 0xFF	; 255
    224e:	8d 8f       	std	Y+29, r24	; 0x1d
			}
			while(Validation_Flag == FAIL); /* if the entered password doesn't match the stored password repeat*/
    2250:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2252:	88 23       	and	r24, r24
    2254:	09 f4       	brne	.+2      	; 0x2258 <main+0x310>
    2256:	72 cf       	rjmp	.-284    	; 0x213c <main+0x1f4>
			Send_OpenDoor_Command(); /* do the open door sequence and send open door flag to MC2 to start the door sequence*/
    2258:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <Send_OpenDoor_Command>
    225c:	c2 ce       	rjmp	.-636    	; 0x1fe2 <main+0x9a>

0000225e <UART_init>:
 *******************************************************************************/

#include "uart.h"

void UART_init(const UartConfig *uartInit_Ptr)
{
    225e:	df 93       	push	r29
    2260:	cf 93       	push	r28
    2262:	cd b7       	in	r28, 0x3d	; 61
    2264:	de b7       	in	r29, 0x3e	; 62
    2266:	28 97       	sbiw	r28, 0x08	; 8
    2268:	0f b6       	in	r0, 0x3f	; 63
    226a:	f8 94       	cli
    226c:	de bf       	out	0x3e, r29	; 62
    226e:	0f be       	out	0x3f, r0	; 63
    2270:	cd bf       	out	0x3d, r28	; 61
    2272:	9c 83       	std	Y+4, r25	; 0x04
    2274:	8b 83       	std	Y+3, r24	; 0x03
	UCSRA = (1<<U2X); /*double transmission speed */
    2276:	eb e2       	ldi	r30, 0x2B	; 43
    2278:	f0 e0       	ldi	r31, 0x00	; 0
    227a:	82 e0       	ldi	r24, 0x02	; 2
    227c:	80 83       	st	Z, r24
	/*
	 * Disable Interrupts
	 * Enable Receiver
	 * EnableTransmitter
	 */
	UCSRB = (1<<RXEN) | (1<<TXEN);
    227e:	ea e2       	ldi	r30, 0x2A	; 42
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	88 e1       	ldi	r24, 0x18	; 24
    2284:	80 83       	st	Z, r24
	/*
	 * Asynchronous Operation
	 * Disabling parity bit
	 * Using one stop bit
	 */
	UCSRC = (1<<URSEL) ;
    2286:	e0 e4       	ldi	r30, 0x40	; 64
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	80 e8       	ldi	r24, 0x80	; 128
    228c:	80 83       	st	Z, r24
	switch (uartInit_Ptr->s_parity)
    228e:	eb 81       	ldd	r30, Y+3	; 0x03
    2290:	fc 81       	ldd	r31, Y+4	; 0x04
    2292:	80 81       	ld	r24, Z
    2294:	28 2f       	mov	r18, r24
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	38 87       	std	Y+8, r19	; 0x08
    229a:	2f 83       	std	Y+7, r18	; 0x07
    229c:	8f 81       	ldd	r24, Y+7	; 0x07
    229e:	98 85       	ldd	r25, Y+8	; 0x08
    22a0:	81 30       	cpi	r24, 0x01	; 1
    22a2:	91 05       	cpc	r25, r1
    22a4:	31 f0       	breq	.+12     	; 0x22b2 <UART_init+0x54>
    22a6:	2f 81       	ldd	r18, Y+7	; 0x07
    22a8:	38 85       	ldd	r19, Y+8	; 0x08
    22aa:	22 30       	cpi	r18, 0x02	; 2
    22ac:	31 05       	cpc	r19, r1
    22ae:	49 f0       	breq	.+18     	; 0x22c2 <UART_init+0x64>
    22b0:	16 c0       	rjmp	.+44     	; 0x22de <UART_init+0x80>
	{
	/*
	 * configuring parity type according to the number of bits the user requested
	 */
		case EVEN:/*even parity*/
			SET_BIT(UCSRC,UPM1);
    22b2:	a0 e4       	ldi	r26, 0x40	; 64
    22b4:	b0 e0       	ldi	r27, 0x00	; 0
    22b6:	e0 e4       	ldi	r30, 0x40	; 64
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	80 81       	ld	r24, Z
    22bc:	80 62       	ori	r24, 0x20	; 32
    22be:	8c 93       	st	X, r24
    22c0:	0e c0       	rjmp	.+28     	; 0x22de <UART_init+0x80>
			break;
		case ODD:/*odd parity*/
			SET_BIT(UCSRC,UPM1);
    22c2:	a0 e4       	ldi	r26, 0x40	; 64
    22c4:	b0 e0       	ldi	r27, 0x00	; 0
    22c6:	e0 e4       	ldi	r30, 0x40	; 64
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	80 81       	ld	r24, Z
    22cc:	80 62       	ori	r24, 0x20	; 32
    22ce:	8c 93       	st	X, r24
			SET_BIT(UCSRC,UPM0);
    22d0:	a0 e4       	ldi	r26, 0x40	; 64
    22d2:	b0 e0       	ldi	r27, 0x00	; 0
    22d4:	e0 e4       	ldi	r30, 0x40	; 64
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	80 81       	ld	r24, Z
    22da:	80 61       	ori	r24, 0x10	; 16
    22dc:	8c 93       	st	X, r24
			break;
		case NO_PARITY:/*no parity*/
			break;
	}

	if (uartInit_Ptr->s_stopBit)
    22de:	eb 81       	ldd	r30, Y+3	; 0x03
    22e0:	fc 81       	ldd	r31, Y+4	; 0x04
    22e2:	83 81       	ldd	r24, Z+3	; 0x03
    22e4:	88 23       	and	r24, r24
    22e6:	39 f0       	breq	.+14     	; 0x22f6 <UART_init+0x98>
	{
		/*
		 * configuring number of stop bits according to the number the user requested
		 */
			SET_BIT(UCSRC,USBS);
    22e8:	a0 e4       	ldi	r26, 0x40	; 64
    22ea:	b0 e0       	ldi	r27, 0x00	; 0
    22ec:	e0 e4       	ldi	r30, 0x40	; 64
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	80 81       	ld	r24, Z
    22f2:	88 60       	ori	r24, 0x08	; 8
    22f4:	8c 93       	st	X, r24
	}
	switch (uartInit_Ptr->s_bitDataNum)
    22f6:	eb 81       	ldd	r30, Y+3	; 0x03
    22f8:	fc 81       	ldd	r31, Y+4	; 0x04
    22fa:	84 81       	ldd	r24, Z+4	; 0x04
    22fc:	28 2f       	mov	r18, r24
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	3e 83       	std	Y+6, r19	; 0x06
    2302:	2d 83       	std	Y+5, r18	; 0x05
    2304:	8d 81       	ldd	r24, Y+5	; 0x05
    2306:	9e 81       	ldd	r25, Y+6	; 0x06
    2308:	82 30       	cpi	r24, 0x02	; 2
    230a:	91 05       	cpc	r25, r1
    230c:	19 f1       	breq	.+70     	; 0x2354 <UART_init+0xf6>
    230e:	2d 81       	ldd	r18, Y+5	; 0x05
    2310:	3e 81       	ldd	r19, Y+6	; 0x06
    2312:	23 30       	cpi	r18, 0x03	; 3
    2314:	31 05       	cpc	r19, r1
    2316:	5c f4       	brge	.+22     	; 0x232e <UART_init+0xd0>
    2318:	8d 81       	ldd	r24, Y+5	; 0x05
    231a:	9e 81       	ldd	r25, Y+6	; 0x06
    231c:	00 97       	sbiw	r24, 0x00	; 0
    231e:	09 f4       	brne	.+2      	; 0x2322 <UART_init+0xc4>
    2320:	45 c0       	rjmp	.+138    	; 0x23ac <UART_init+0x14e>
    2322:	2d 81       	ldd	r18, Y+5	; 0x05
    2324:	3e 81       	ldd	r19, Y+6	; 0x06
    2326:	21 30       	cpi	r18, 0x01	; 1
    2328:	31 05       	cpc	r19, r1
    232a:	61 f0       	breq	.+24     	; 0x2344 <UART_init+0xe6>
    232c:	3f c0       	rjmp	.+126    	; 0x23ac <UART_init+0x14e>
    232e:	8d 81       	ldd	r24, Y+5	; 0x05
    2330:	9e 81       	ldd	r25, Y+6	; 0x06
    2332:	83 30       	cpi	r24, 0x03	; 3
    2334:	91 05       	cpc	r25, r1
    2336:	b1 f0       	breq	.+44     	; 0x2364 <UART_init+0x106>
    2338:	2d 81       	ldd	r18, Y+5	; 0x05
    233a:	3e 81       	ldd	r19, Y+6	; 0x06
    233c:	24 30       	cpi	r18, 0x04	; 4
    233e:	31 05       	cpc	r19, r1
    2340:	01 f1       	breq	.+64     	; 0x2382 <UART_init+0x124>
    2342:	34 c0       	rjmp	.+104    	; 0x23ac <UART_init+0x14e>
	 * configuring uart number of data bits according to the number of bits the user requested
	 */
		case FIVE_BITS:/*5 bit data transmition*/
			break;
		case SIX_BITS:/*6 bit data transmition*/
			SET_BIT(UCSRC,UCSZ0);
    2344:	a0 e4       	ldi	r26, 0x40	; 64
    2346:	b0 e0       	ldi	r27, 0x00	; 0
    2348:	e0 e4       	ldi	r30, 0x40	; 64
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	80 81       	ld	r24, Z
    234e:	82 60       	ori	r24, 0x02	; 2
    2350:	8c 93       	st	X, r24
    2352:	2c c0       	rjmp	.+88     	; 0x23ac <UART_init+0x14e>
			break;
		case SEVEN_BITS:/*7 bit data transmition*/
			SET_BIT(UCSRC,UCSZ1);
    2354:	a0 e4       	ldi	r26, 0x40	; 64
    2356:	b0 e0       	ldi	r27, 0x00	; 0
    2358:	e0 e4       	ldi	r30, 0x40	; 64
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	80 81       	ld	r24, Z
    235e:	84 60       	ori	r24, 0x04	; 4
    2360:	8c 93       	st	X, r24
    2362:	24 c0       	rjmp	.+72     	; 0x23ac <UART_init+0x14e>
			break;
		case EIGHT_BITS:/*8 bit data transmition*/
			SET_BIT(UCSRC,UCSZ1);
    2364:	a0 e4       	ldi	r26, 0x40	; 64
    2366:	b0 e0       	ldi	r27, 0x00	; 0
    2368:	e0 e4       	ldi	r30, 0x40	; 64
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	80 81       	ld	r24, Z
    236e:	84 60       	ori	r24, 0x04	; 4
    2370:	8c 93       	st	X, r24
			SET_BIT(UCSRC,UCSZ0);
    2372:	a0 e4       	ldi	r26, 0x40	; 64
    2374:	b0 e0       	ldi	r27, 0x00	; 0
    2376:	e0 e4       	ldi	r30, 0x40	; 64
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	80 81       	ld	r24, Z
    237c:	82 60       	ori	r24, 0x02	; 2
    237e:	8c 93       	st	X, r24
    2380:	15 c0       	rjmp	.+42     	; 0x23ac <UART_init+0x14e>
			break;
		case NINE_BITS:/*9 bit data transmition*/
			SET_BIT(UCSRB,UCSZ2);
    2382:	aa e2       	ldi	r26, 0x2A	; 42
    2384:	b0 e0       	ldi	r27, 0x00	; 0
    2386:	ea e2       	ldi	r30, 0x2A	; 42
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	80 81       	ld	r24, Z
    238c:	84 60       	ori	r24, 0x04	; 4
    238e:	8c 93       	st	X, r24
			SET_BIT(UCSRC,UCSZ1);
    2390:	a0 e4       	ldi	r26, 0x40	; 64
    2392:	b0 e0       	ldi	r27, 0x00	; 0
    2394:	e0 e4       	ldi	r30, 0x40	; 64
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	80 81       	ld	r24, Z
    239a:	84 60       	ori	r24, 0x04	; 4
    239c:	8c 93       	st	X, r24
			SET_BIT(UCSRC,UCSZ0);
    239e:	a0 e4       	ldi	r26, 0x40	; 64
    23a0:	b0 e0       	ldi	r27, 0x00	; 0
    23a2:	e0 e4       	ldi	r30, 0x40	; 64
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	80 81       	ld	r24, Z
    23a8:	82 60       	ori	r24, 0x02	; 2
    23aa:	8c 93       	st	X, r24
			break;
	}

	/*Baud Rate*/
	uint16 baudScale = (F_CPU/(8*(uartInit_Ptr->s_baudRate)))-1 ;/*calculating baud scale from baud rate*/
    23ac:	eb 81       	ldd	r30, Y+3	; 0x03
    23ae:	fc 81       	ldd	r31, Y+4	; 0x04
    23b0:	81 81       	ldd	r24, Z+1	; 0x01
    23b2:	92 81       	ldd	r25, Z+2	; 0x02
    23b4:	88 0f       	add	r24, r24
    23b6:	99 1f       	adc	r25, r25
    23b8:	88 0f       	add	r24, r24
    23ba:	99 1f       	adc	r25, r25
    23bc:	88 0f       	add	r24, r24
    23be:	99 1f       	adc	r25, r25
    23c0:	9c 01       	movw	r18, r24
    23c2:	40 e0       	ldi	r20, 0x00	; 0
    23c4:	50 e0       	ldi	r21, 0x00	; 0
    23c6:	80 e0       	ldi	r24, 0x00	; 0
    23c8:	92 e1       	ldi	r25, 0x12	; 18
    23ca:	aa e7       	ldi	r26, 0x7A	; 122
    23cc:	b0 e0       	ldi	r27, 0x00	; 0
    23ce:	bc 01       	movw	r22, r24
    23d0:	cd 01       	movw	r24, r26
    23d2:	0e 94 8a 12 	call	0x2514	; 0x2514 <__udivmodsi4>
    23d6:	da 01       	movw	r26, r20
    23d8:	c9 01       	movw	r24, r18
    23da:	01 97       	sbiw	r24, 0x01	; 1
    23dc:	9a 83       	std	Y+2, r25	; 0x02
    23de:	89 83       	std	Y+1, r24	; 0x01
	/*configuring uart prescaler*/
	UBRRL = (baudScale & 0x00FF);
    23e0:	e9 e2       	ldi	r30, 0x29	; 41
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	89 81       	ldd	r24, Y+1	; 0x01
    23e6:	80 83       	st	Z, r24
	UBRRH = (baudScale >> 8);
    23e8:	e0 e4       	ldi	r30, 0x40	; 64
    23ea:	f0 e0       	ldi	r31, 0x00	; 0
    23ec:	89 81       	ldd	r24, Y+1	; 0x01
    23ee:	9a 81       	ldd	r25, Y+2	; 0x02
    23f0:	89 2f       	mov	r24, r25
    23f2:	99 27       	eor	r25, r25
    23f4:	80 83       	st	Z, r24
}
    23f6:	28 96       	adiw	r28, 0x08	; 8
    23f8:	0f b6       	in	r0, 0x3f	; 63
    23fa:	f8 94       	cli
    23fc:	de bf       	out	0x3e, r29	; 62
    23fe:	0f be       	out	0x3f, r0	; 63
    2400:	cd bf       	out	0x3d, r28	; 61
    2402:	cf 91       	pop	r28
    2404:	df 91       	pop	r29
    2406:	08 95       	ret

00002408 <UART_sendByte>:

void UART_sendByte(const uint8 a_data)
{
    2408:	df 93       	push	r29
    240a:	cf 93       	push	r28
    240c:	0f 92       	push	r0
    240e:	cd b7       	in	r28, 0x3d	; 61
    2410:	de b7       	in	r29, 0x3e	; 62
    2412:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE)) /*waiting for previous data to be sent*/
    2414:	eb e2       	ldi	r30, 0x2B	; 43
    2416:	f0 e0       	ldi	r31, 0x00	; 0
    2418:	80 81       	ld	r24, Z
    241a:	88 2f       	mov	r24, r24
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	80 72       	andi	r24, 0x20	; 32
    2420:	90 70       	andi	r25, 0x00	; 0
    2422:	00 97       	sbiw	r24, 0x00	; 0
    2424:	b9 f3       	breq	.-18     	; 0x2414 <UART_sendByte+0xc>
	{

	}
	UDR = a_data;/*sending data to register*/
    2426:	ec e2       	ldi	r30, 0x2C	; 44
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	89 81       	ldd	r24, Y+1	; 0x01
    242c:	80 83       	st	Z, r24
}
    242e:	0f 90       	pop	r0
    2430:	cf 91       	pop	r28
    2432:	df 91       	pop	r29
    2434:	08 95       	ret

00002436 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    2436:	df 93       	push	r29
    2438:	cf 93       	push	r28
    243a:	cd b7       	in	r28, 0x3d	; 61
    243c:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC))/*checking that the register completed receiving the data*/
    243e:	eb e2       	ldi	r30, 0x2B	; 43
    2440:	f0 e0       	ldi	r31, 0x00	; 0
    2442:	80 81       	ld	r24, Z
    2444:	88 23       	and	r24, r24
    2446:	dc f7       	brge	.-10     	; 0x243e <UART_recieveByte+0x8>
	{

	}
	return UDR;/*saving data from register*/
    2448:	ec e2       	ldi	r30, 0x2C	; 44
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	80 81       	ld	r24, Z
}
    244e:	cf 91       	pop	r28
    2450:	df 91       	pop	r29
    2452:	08 95       	ret

00002454 <UART_sendString>:

void UART_sendString(const uint8 *str_Ptr)
{
    2454:	df 93       	push	r29
    2456:	cf 93       	push	r28
    2458:	00 d0       	rcall	.+0      	; 0x245a <UART_sendString+0x6>
    245a:	0f 92       	push	r0
    245c:	cd b7       	in	r28, 0x3d	; 61
    245e:	de b7       	in	r29, 0x3e	; 62
    2460:	9b 83       	std	Y+3, r25	; 0x03
    2462:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    2464:	19 82       	std	Y+1, r1	; 0x01
    2466:	0e c0       	rjmp	.+28     	; 0x2484 <UART_sendString+0x30>
	while ((str_Ptr[i]) != '\0') /*sending all string characters till \0 */
	{
		UART_sendByte(str_Ptr[i]);
    2468:	89 81       	ldd	r24, Y+1	; 0x01
    246a:	28 2f       	mov	r18, r24
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	8a 81       	ldd	r24, Y+2	; 0x02
    2470:	9b 81       	ldd	r25, Y+3	; 0x03
    2472:	fc 01       	movw	r30, r24
    2474:	e2 0f       	add	r30, r18
    2476:	f3 1f       	adc	r31, r19
    2478:	80 81       	ld	r24, Z
    247a:	0e 94 04 12 	call	0x2408	; 0x2408 <UART_sendByte>
		i++;
    247e:	89 81       	ldd	r24, Y+1	; 0x01
    2480:	8f 5f       	subi	r24, 0xFF	; 255
    2482:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *str_Ptr)
{
	uint8 i=0;
	while ((str_Ptr[i]) != '\0') /*sending all string characters till \0 */
    2484:	89 81       	ldd	r24, Y+1	; 0x01
    2486:	28 2f       	mov	r18, r24
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	8a 81       	ldd	r24, Y+2	; 0x02
    248c:	9b 81       	ldd	r25, Y+3	; 0x03
    248e:	fc 01       	movw	r30, r24
    2490:	e2 0f       	add	r30, r18
    2492:	f3 1f       	adc	r31, r19
    2494:	80 81       	ld	r24, Z
    2496:	88 23       	and	r24, r24
    2498:	39 f7       	brne	.-50     	; 0x2468 <UART_sendString+0x14>
	{
		UART_sendByte(str_Ptr[i]);
		i++;
	}
}
    249a:	0f 90       	pop	r0
    249c:	0f 90       	pop	r0
    249e:	0f 90       	pop	r0
    24a0:	cf 91       	pop	r28
    24a2:	df 91       	pop	r29
    24a4:	08 95       	ret

000024a6 <UART_receiveString>:

void UART_receiveString(uint8 *str_Ptr)
{
    24a6:	0f 93       	push	r16
    24a8:	1f 93       	push	r17
    24aa:	df 93       	push	r29
    24ac:	cf 93       	push	r28
    24ae:	00 d0       	rcall	.+0      	; 0x24b0 <UART_receiveString+0xa>
    24b0:	0f 92       	push	r0
    24b2:	cd b7       	in	r28, 0x3d	; 61
    24b4:	de b7       	in	r29, 0x3e	; 62
    24b6:	9b 83       	std	Y+3, r25	; 0x03
    24b8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    24ba:	19 82       	std	Y+1, r1	; 0x01
    24bc:	0f c0       	rjmp	.+30     	; 0x24dc <UART_receiveString+0x36>
	while ((str_Ptr[i]) != '#') /*receiving all string characters till # */
	{
		str_Ptr[i]=UART_recieveByte();
    24be:	89 81       	ldd	r24, Y+1	; 0x01
    24c0:	28 2f       	mov	r18, r24
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	8a 81       	ldd	r24, Y+2	; 0x02
    24c6:	9b 81       	ldd	r25, Y+3	; 0x03
    24c8:	8c 01       	movw	r16, r24
    24ca:	02 0f       	add	r16, r18
    24cc:	13 1f       	adc	r17, r19
    24ce:	0e 94 1b 12 	call	0x2436	; 0x2436 <UART_recieveByte>
    24d2:	f8 01       	movw	r30, r16
    24d4:	80 83       	st	Z, r24
		i++;
    24d6:	89 81       	ldd	r24, Y+1	; 0x01
    24d8:	8f 5f       	subi	r24, 0xFF	; 255
    24da:	89 83       	std	Y+1, r24	; 0x01
}

void UART_receiveString(uint8 *str_Ptr)
{
	uint8 i=0;
	while ((str_Ptr[i]) != '#') /*receiving all string characters till # */
    24dc:	89 81       	ldd	r24, Y+1	; 0x01
    24de:	28 2f       	mov	r18, r24
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	8a 81       	ldd	r24, Y+2	; 0x02
    24e4:	9b 81       	ldd	r25, Y+3	; 0x03
    24e6:	fc 01       	movw	r30, r24
    24e8:	e2 0f       	add	r30, r18
    24ea:	f3 1f       	adc	r31, r19
    24ec:	80 81       	ld	r24, Z
    24ee:	83 32       	cpi	r24, 0x23	; 35
    24f0:	31 f7       	brne	.-52     	; 0x24be <UART_receiveString+0x18>
	{
		str_Ptr[i]=UART_recieveByte();
		i++;
	}
	str_Ptr[i]='\0';
    24f2:	89 81       	ldd	r24, Y+1	; 0x01
    24f4:	28 2f       	mov	r18, r24
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	8a 81       	ldd	r24, Y+2	; 0x02
    24fa:	9b 81       	ldd	r25, Y+3	; 0x03
    24fc:	fc 01       	movw	r30, r24
    24fe:	e2 0f       	add	r30, r18
    2500:	f3 1f       	adc	r31, r19
    2502:	10 82       	st	Z, r1
}
    2504:	0f 90       	pop	r0
    2506:	0f 90       	pop	r0
    2508:	0f 90       	pop	r0
    250a:	cf 91       	pop	r28
    250c:	df 91       	pop	r29
    250e:	1f 91       	pop	r17
    2510:	0f 91       	pop	r16
    2512:	08 95       	ret

00002514 <__udivmodsi4>:
    2514:	a1 e2       	ldi	r26, 0x21	; 33
    2516:	1a 2e       	mov	r1, r26
    2518:	aa 1b       	sub	r26, r26
    251a:	bb 1b       	sub	r27, r27
    251c:	fd 01       	movw	r30, r26
    251e:	0d c0       	rjmp	.+26     	; 0x253a <__udivmodsi4_ep>

00002520 <__udivmodsi4_loop>:
    2520:	aa 1f       	adc	r26, r26
    2522:	bb 1f       	adc	r27, r27
    2524:	ee 1f       	adc	r30, r30
    2526:	ff 1f       	adc	r31, r31
    2528:	a2 17       	cp	r26, r18
    252a:	b3 07       	cpc	r27, r19
    252c:	e4 07       	cpc	r30, r20
    252e:	f5 07       	cpc	r31, r21
    2530:	20 f0       	brcs	.+8      	; 0x253a <__udivmodsi4_ep>
    2532:	a2 1b       	sub	r26, r18
    2534:	b3 0b       	sbc	r27, r19
    2536:	e4 0b       	sbc	r30, r20
    2538:	f5 0b       	sbc	r31, r21

0000253a <__udivmodsi4_ep>:
    253a:	66 1f       	adc	r22, r22
    253c:	77 1f       	adc	r23, r23
    253e:	88 1f       	adc	r24, r24
    2540:	99 1f       	adc	r25, r25
    2542:	1a 94       	dec	r1
    2544:	69 f7       	brne	.-38     	; 0x2520 <__udivmodsi4_loop>
    2546:	60 95       	com	r22
    2548:	70 95       	com	r23
    254a:	80 95       	com	r24
    254c:	90 95       	com	r25
    254e:	9b 01       	movw	r18, r22
    2550:	ac 01       	movw	r20, r24
    2552:	bd 01       	movw	r22, r26
    2554:	cf 01       	movw	r24, r30
    2556:	08 95       	ret

00002558 <__prologue_saves__>:
    2558:	2f 92       	push	r2
    255a:	3f 92       	push	r3
    255c:	4f 92       	push	r4
    255e:	5f 92       	push	r5
    2560:	6f 92       	push	r6
    2562:	7f 92       	push	r7
    2564:	8f 92       	push	r8
    2566:	9f 92       	push	r9
    2568:	af 92       	push	r10
    256a:	bf 92       	push	r11
    256c:	cf 92       	push	r12
    256e:	df 92       	push	r13
    2570:	ef 92       	push	r14
    2572:	ff 92       	push	r15
    2574:	0f 93       	push	r16
    2576:	1f 93       	push	r17
    2578:	cf 93       	push	r28
    257a:	df 93       	push	r29
    257c:	cd b7       	in	r28, 0x3d	; 61
    257e:	de b7       	in	r29, 0x3e	; 62
    2580:	ca 1b       	sub	r28, r26
    2582:	db 0b       	sbc	r29, r27
    2584:	0f b6       	in	r0, 0x3f	; 63
    2586:	f8 94       	cli
    2588:	de bf       	out	0x3e, r29	; 62
    258a:	0f be       	out	0x3f, r0	; 63
    258c:	cd bf       	out	0x3d, r28	; 61
    258e:	09 94       	ijmp

00002590 <__epilogue_restores__>:
    2590:	2a 88       	ldd	r2, Y+18	; 0x12
    2592:	39 88       	ldd	r3, Y+17	; 0x11
    2594:	48 88       	ldd	r4, Y+16	; 0x10
    2596:	5f 84       	ldd	r5, Y+15	; 0x0f
    2598:	6e 84       	ldd	r6, Y+14	; 0x0e
    259a:	7d 84       	ldd	r7, Y+13	; 0x0d
    259c:	8c 84       	ldd	r8, Y+12	; 0x0c
    259e:	9b 84       	ldd	r9, Y+11	; 0x0b
    25a0:	aa 84       	ldd	r10, Y+10	; 0x0a
    25a2:	b9 84       	ldd	r11, Y+9	; 0x09
    25a4:	c8 84       	ldd	r12, Y+8	; 0x08
    25a6:	df 80       	ldd	r13, Y+7	; 0x07
    25a8:	ee 80       	ldd	r14, Y+6	; 0x06
    25aa:	fd 80       	ldd	r15, Y+5	; 0x05
    25ac:	0c 81       	ldd	r16, Y+4	; 0x04
    25ae:	1b 81       	ldd	r17, Y+3	; 0x03
    25b0:	aa 81       	ldd	r26, Y+2	; 0x02
    25b2:	b9 81       	ldd	r27, Y+1	; 0x01
    25b4:	ce 0f       	add	r28, r30
    25b6:	d1 1d       	adc	r29, r1
    25b8:	0f b6       	in	r0, 0x3f	; 63
    25ba:	f8 94       	cli
    25bc:	de bf       	out	0x3e, r29	; 62
    25be:	0f be       	out	0x3f, r0	; 63
    25c0:	cd bf       	out	0x3d, r28	; 61
    25c2:	ed 01       	movw	r28, r26
    25c4:	08 95       	ret

000025c6 <atoi>:
    25c6:	fc 01       	movw	r30, r24
    25c8:	88 27       	eor	r24, r24
    25ca:	99 27       	eor	r25, r25
    25cc:	e8 94       	clt
    25ce:	21 91       	ld	r18, Z+
    25d0:	20 32       	cpi	r18, 0x20	; 32
    25d2:	e9 f3       	breq	.-6      	; 0x25ce <atoi+0x8>
    25d4:	29 30       	cpi	r18, 0x09	; 9
    25d6:	10 f0       	brcs	.+4      	; 0x25dc <atoi+0x16>
    25d8:	2e 30       	cpi	r18, 0x0E	; 14
    25da:	c8 f3       	brcs	.-14     	; 0x25ce <atoi+0x8>
    25dc:	2b 32       	cpi	r18, 0x2B	; 43
    25de:	41 f0       	breq	.+16     	; 0x25f0 <atoi+0x2a>
    25e0:	2d 32       	cpi	r18, 0x2D	; 45
    25e2:	39 f4       	brne	.+14     	; 0x25f2 <atoi+0x2c>
    25e4:	68 94       	set
    25e6:	04 c0       	rjmp	.+8      	; 0x25f0 <atoi+0x2a>
    25e8:	0e 94 22 13 	call	0x2644	; 0x2644 <__mulhi_const_10>
    25ec:	82 0f       	add	r24, r18
    25ee:	91 1d       	adc	r25, r1
    25f0:	21 91       	ld	r18, Z+
    25f2:	20 53       	subi	r18, 0x30	; 48
    25f4:	2a 30       	cpi	r18, 0x0A	; 10
    25f6:	c0 f3       	brcs	.-16     	; 0x25e8 <atoi+0x22>
    25f8:	1e f4       	brtc	.+6      	; 0x2600 <atoi+0x3a>
    25fa:	90 95       	com	r25
    25fc:	81 95       	neg	r24
    25fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2600:	08 95       	ret

00002602 <itoa>:
    2602:	fb 01       	movw	r30, r22
    2604:	9f 01       	movw	r18, r30
    2606:	e8 94       	clt
    2608:	42 30       	cpi	r20, 0x02	; 2
    260a:	c4 f0       	brlt	.+48     	; 0x263c <itoa+0x3a>
    260c:	45 32       	cpi	r20, 0x25	; 37
    260e:	b4 f4       	brge	.+44     	; 0x263c <itoa+0x3a>
    2610:	4a 30       	cpi	r20, 0x0A	; 10
    2612:	29 f4       	brne	.+10     	; 0x261e <itoa+0x1c>
    2614:	97 fb       	bst	r25, 7
    2616:	1e f4       	brtc	.+6      	; 0x261e <itoa+0x1c>
    2618:	90 95       	com	r25
    261a:	81 95       	neg	r24
    261c:	9f 4f       	sbci	r25, 0xFF	; 255
    261e:	64 2f       	mov	r22, r20
    2620:	77 27       	eor	r23, r23
    2622:	0e 94 3a 13 	call	0x2674	; 0x2674 <__udivmodhi4>
    2626:	80 5d       	subi	r24, 0xD0	; 208
    2628:	8a 33       	cpi	r24, 0x3A	; 58
    262a:	0c f0       	brlt	.+2      	; 0x262e <itoa+0x2c>
    262c:	89 5d       	subi	r24, 0xD9	; 217
    262e:	81 93       	st	Z+, r24
    2630:	cb 01       	movw	r24, r22
    2632:	00 97       	sbiw	r24, 0x00	; 0
    2634:	a1 f7       	brne	.-24     	; 0x261e <itoa+0x1c>
    2636:	16 f4       	brtc	.+4      	; 0x263c <itoa+0x3a>
    2638:	5d e2       	ldi	r21, 0x2D	; 45
    263a:	51 93       	st	Z+, r21
    263c:	10 82       	st	Z, r1
    263e:	c9 01       	movw	r24, r18
    2640:	0c 94 2a 13 	jmp	0x2654	; 0x2654 <strrev>

00002644 <__mulhi_const_10>:
    2644:	7a e0       	ldi	r23, 0x0A	; 10
    2646:	97 9f       	mul	r25, r23
    2648:	90 2d       	mov	r25, r0
    264a:	87 9f       	mul	r24, r23
    264c:	80 2d       	mov	r24, r0
    264e:	91 0d       	add	r25, r1
    2650:	11 24       	eor	r1, r1
    2652:	08 95       	ret

00002654 <strrev>:
    2654:	dc 01       	movw	r26, r24
    2656:	fc 01       	movw	r30, r24
    2658:	67 2f       	mov	r22, r23
    265a:	71 91       	ld	r23, Z+
    265c:	77 23       	and	r23, r23
    265e:	e1 f7       	brne	.-8      	; 0x2658 <strrev+0x4>
    2660:	32 97       	sbiw	r30, 0x02	; 2
    2662:	04 c0       	rjmp	.+8      	; 0x266c <strrev+0x18>
    2664:	7c 91       	ld	r23, X
    2666:	6d 93       	st	X+, r22
    2668:	70 83       	st	Z, r23
    266a:	62 91       	ld	r22, -Z
    266c:	ae 17       	cp	r26, r30
    266e:	bf 07       	cpc	r27, r31
    2670:	c8 f3       	brcs	.-14     	; 0x2664 <strrev+0x10>
    2672:	08 95       	ret

00002674 <__udivmodhi4>:
    2674:	aa 1b       	sub	r26, r26
    2676:	bb 1b       	sub	r27, r27
    2678:	51 e1       	ldi	r21, 0x11	; 17
    267a:	07 c0       	rjmp	.+14     	; 0x268a <__udivmodhi4_ep>

0000267c <__udivmodhi4_loop>:
    267c:	aa 1f       	adc	r26, r26
    267e:	bb 1f       	adc	r27, r27
    2680:	a6 17       	cp	r26, r22
    2682:	b7 07       	cpc	r27, r23
    2684:	10 f0       	brcs	.+4      	; 0x268a <__udivmodhi4_ep>
    2686:	a6 1b       	sub	r26, r22
    2688:	b7 0b       	sbc	r27, r23

0000268a <__udivmodhi4_ep>:
    268a:	88 1f       	adc	r24, r24
    268c:	99 1f       	adc	r25, r25
    268e:	5a 95       	dec	r21
    2690:	a9 f7       	brne	.-22     	; 0x267c <__udivmodhi4_loop>
    2692:	80 95       	com	r24
    2694:	90 95       	com	r25
    2696:	bc 01       	movw	r22, r24
    2698:	cd 01       	movw	r24, r26
    269a:	08 95       	ret

0000269c <_exit>:
    269c:	f8 94       	cli

0000269e <__stop_program>:
    269e:	ff cf       	rjmp	.-2      	; 0x269e <__stop_program>
