
FinalProject_MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002254  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00002254  000022e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  0080007c  0080007c  00002304  2**0
                  ALLOC
  3 .stab         000025a4  00000000  00000000  00002304  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001524  00000000  00000000  000048a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000607c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007cc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009960  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009d4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a51b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 fa 0c 	jmp	0x19f4	; 0x19f4 <__vector_3>
      10:	0c 94 c7 0c 	jmp	0x198e	; 0x198e <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 61 0c 	jmp	0x18c2	; 0x18c2 <__vector_6>
      1c:	0c 94 94 0c 	jmp	0x1928	; 0x1928 <__vector_7>
      20:	0c 94 2e 0c 	jmp	0x185c	; 0x185c <__vector_8>
      24:	0c 94 c8 0b 	jmp	0x1790	; 0x1790 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 fb 0b 	jmp	0x17f6	; 0x17f6 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e5       	ldi	r30, 0x54	; 84
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 38       	cpi	r26, 0x8C	; 140
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 07 0a 	call	0x140e	; 0x140e <main>
      8a:	0c 94 28 11 	jmp	0x2250	; 0x2250 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f1 10 	jmp	0x21e2	; 0x21e2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0d 11 	jmp	0x221a	; 0x221a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fd 10 	jmp	0x21fa	; 0x21fa <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 19 11 	jmp	0x2232	; 0x2232 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fd 10 	jmp	0x21fa	; 0x21fa <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 19 11 	jmp	0x2232	; 0x2232 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f1 10 	jmp	0x21e2	; 0x21e2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0d 11 	jmp	0x221a	; 0x221a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fd 10 	jmp	0x21fa	; 0x21fa <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 19 11 	jmp	0x2232	; 0x2232 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 fd 10 	jmp	0x21fa	; 0x21fa <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 19 11 	jmp	0x2232	; 0x2232 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 fd 10 	jmp	0x21fa	; 0x21fa <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 19 11 	jmp	0x2232	; 0x2232 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 01 11 	jmp	0x2202	; 0x2202 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 1d 11 	jmp	0x223a	; 0x223a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <BUZZER_init>:


#include "buzzer.h"

void BUZZER_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(BUZZER_DDR,BUZZER);
     b4e:	a7 e3       	ldi	r26, 0x37	; 55
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e3       	ldi	r30, 0x37	; 55
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 68       	ori	r24, 0x80	; 128
     b5a:	8c 93       	st	X, r24
	CLEAR_BIT(BUZZER_PORT,BUZZER);
     b5c:	a8 e3       	ldi	r26, 0x38	; 56
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e8 e3       	ldi	r30, 0x38	; 56
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8f 77       	andi	r24, 0x7F	; 127
     b68:	8c 93       	st	X, r24
}
     b6a:	cf 91       	pop	r28
     b6c:	df 91       	pop	r29
     b6e:	08 95       	ret

00000b70 <BUZZER_on>:

void BUZZER_on(void)
{
     b70:	df 93       	push	r29
     b72:	cf 93       	push	r28
     b74:	cd b7       	in	r28, 0x3d	; 61
     b76:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(BUZZER_PORT,BUZZER);
     b78:	a8 e3       	ldi	r26, 0x38	; 56
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e8 e3       	ldi	r30, 0x38	; 56
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	80 68       	ori	r24, 0x80	; 128
     b84:	8c 93       	st	X, r24
}
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	08 95       	ret

00000b8c <BUZZER_off>:

void BUZZER_off(void)
{
     b8c:	df 93       	push	r29
     b8e:	cf 93       	push	r28
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(BUZZER_PORT,BUZZER);
     b94:	a8 e3       	ldi	r26, 0x38	; 56
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e8 e3       	ldi	r30, 0x38	; 56
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	8f 77       	andi	r24, 0x7F	; 127
     ba0:	8c 93       	st	X, r24
}
     ba2:	cf 91       	pop	r28
     ba4:	df 91       	pop	r29
     ba6:	08 95       	ret

00000ba8 <EEPROM_init>:

#include "external_eeprom.h"


void EEPROM_init(TwiConfig *twiInit_Ptr)
{
     ba8:	df 93       	push	r29
     baa:	cf 93       	push	r28
     bac:	00 d0       	rcall	.+0      	; 0xbae <EEPROM_init+0x6>
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62
     bb2:	9a 83       	std	Y+2, r25	; 0x02
     bb4:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * receiving the I2C configuration struct by reference
	 * initializing the I2C
	 */
	TWI_init(twiInit_Ptr);
     bb6:	89 81       	ldd	r24, Y+1	; 0x01
     bb8:	9a 81       	ldd	r25, Y+2	; 0x02
     bba:	0e 94 81 07 	call	0xf02	; 0xf02 <TWI_init>
}
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	cf 91       	pop	r28
     bc4:	df 91       	pop	r29
     bc6:	08 95       	ret

00000bc8 <EEPROM_writeByte>:
uint8 EEPROM_writeByte(uint16 a_addr, uint32 a_data, uint8 a_numOfBytes)
{
     bc8:	df 93       	push	r29
     bca:	cf 93       	push	r28
     bcc:	cd b7       	in	r28, 0x3d	; 61
     bce:	de b7       	in	r29, 0x3e	; 62
     bd0:	68 97       	sbiw	r28, 0x18	; 24
     bd2:	0f b6       	in	r0, 0x3f	; 63
     bd4:	f8 94       	cli
     bd6:	de bf       	out	0x3e, r29	; 62
     bd8:	0f be       	out	0x3f, r0	; 63
     bda:	cd bf       	out	0x3d, r28	; 61
     bdc:	9a 8b       	std	Y+18, r25	; 0x12
     bde:	89 8b       	std	Y+17, r24	; 0x11
     be0:	4b 8b       	std	Y+19, r20	; 0x13
     be2:	5c 8b       	std	Y+20, r21	; 0x14
     be4:	6d 8b       	std	Y+21, r22	; 0x15
     be6:	7e 8b       	std	Y+22, r23	; 0x16
     be8:	2f 8b       	std	Y+23, r18	; 0x17
	uint8 i;
	for (i=0;i<a_numOfBytes;i++) /*writing a number of times according to the number of bits added by the user*/
     bea:	18 8a       	std	Y+16, r1	; 0x10
     bec:	bb c0       	rjmp	.+374    	; 0xd64 <EEPROM_writeByte+0x19c>
	{
		TWI_start(); /*sending start bit*/
     bee:	0e 94 0b 08 	call	0x1016	; 0x1016 <TWI_start>
		if (TWI_getStatus() != TW_START)
     bf2:	0e 94 63 08 	call	0x10c6	; 0x10c6 <TWI_getStatus>
     bf6:	88 30       	cpi	r24, 0x08	; 8
     bf8:	11 f0       	breq	.+4      	; 0xbfe <EEPROM_writeByte+0x36>
		{
			/*
			 * checking if the status register matches the current step
			 * returning error and terminating the process if not
			 */
		 return ERROR;
     bfa:	18 8e       	std	Y+24, r1	; 0x18
     bfc:	ba c0       	rjmp	.+372    	; 0xd72 <EEPROM_writeByte+0x1aa>

		/*
		 * sending the 3 bits slave address next to 1010 in the MSBs
		 * sending write request in the LSB
		 */
		TWI_write((uint8)(0xA0 | ((a_addr & 0x0700)>>7)));
     bfe:	89 89       	ldd	r24, Y+17	; 0x11
     c00:	9a 89       	ldd	r25, Y+18	; 0x12
     c02:	80 70       	andi	r24, 0x00	; 0
     c04:	97 70       	andi	r25, 0x07	; 7
     c06:	88 0f       	add	r24, r24
     c08:	89 2f       	mov	r24, r25
     c0a:	88 1f       	adc	r24, r24
     c0c:	99 0b       	sbc	r25, r25
     c0e:	91 95       	neg	r25
     c10:	80 6a       	ori	r24, 0xA0	; 160
     c12:	0e 94 26 08 	call	0x104c	; 0x104c <TWI_write>
		if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     c16:	0e 94 63 08 	call	0x10c6	; 0x10c6 <TWI_getStatus>
     c1a:	88 31       	cpi	r24, 0x18	; 24
     c1c:	11 f0       	breq	.+4      	; 0xc22 <EEPROM_writeByte+0x5a>
		{
			/*
			 * checking if the status register matches the current step
			 * returning error and terminating the process if not
			 */
		 return ERROR;
     c1e:	18 8e       	std	Y+24, r1	; 0x18
     c20:	a8 c0       	rjmp	.+336    	; 0xd72 <EEPROM_writeByte+0x1aa>

		/*
		 * sending the word address of the data we want to write to the eeprom
		 * increasing the address by 1 when we repeat the process to write more than one byte
		 */
		TWI_write((uint8)(a_addr+i));
     c22:	99 89       	ldd	r25, Y+17	; 0x11
     c24:	88 89       	ldd	r24, Y+16	; 0x10
     c26:	89 0f       	add	r24, r25
     c28:	0e 94 26 08 	call	0x104c	; 0x104c <TWI_write>
		if (TWI_getStatus() != TW_MT_DATA_ACK)
     c2c:	0e 94 63 08 	call	0x10c6	; 0x10c6 <TWI_getStatus>
     c30:	88 32       	cpi	r24, 0x28	; 40
     c32:	11 f0       	breq	.+4      	; 0xc38 <EEPROM_writeByte+0x70>
		{
			/*
			 * checking if the status register matches the current step
			 * returning error and terminating the process if not
			 */
		 return ERROR;
     c34:	18 8e       	std	Y+24, r1	; 0x18
     c36:	9d c0       	rjmp	.+314    	; 0xd72 <EEPROM_writeByte+0x1aa>

		/*
		 * saving the first 8 bits of the data sent by the user to the DataToWrite variable that the data if it will be transmitted
		 * shifting the data sent by the user 8 bits each time when we repeat the process to send then next byte
		 */
		uint8 dataToWrite = (a_data>>(i*8)) ;
     c38:	88 89       	ldd	r24, Y+16	; 0x10
     c3a:	88 2f       	mov	r24, r24
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	9c 01       	movw	r18, r24
     c40:	22 0f       	add	r18, r18
     c42:	33 1f       	adc	r19, r19
     c44:	22 0f       	add	r18, r18
     c46:	33 1f       	adc	r19, r19
     c48:	22 0f       	add	r18, r18
     c4a:	33 1f       	adc	r19, r19
     c4c:	8b 89       	ldd	r24, Y+19	; 0x13
     c4e:	9c 89       	ldd	r25, Y+20	; 0x14
     c50:	ad 89       	ldd	r26, Y+21	; 0x15
     c52:	be 89       	ldd	r27, Y+22	; 0x16
     c54:	04 c0       	rjmp	.+8      	; 0xc5e <EEPROM_writeByte+0x96>
     c56:	b6 95       	lsr	r27
     c58:	a7 95       	ror	r26
     c5a:	97 95       	ror	r25
     c5c:	87 95       	ror	r24
     c5e:	2a 95       	dec	r18
     c60:	d2 f7       	brpl	.-12     	; 0xc56 <EEPROM_writeByte+0x8e>
     c62:	8f 87       	std	Y+15, r24	; 0x0f
		TWI_write(dataToWrite); /*Transmiting the data in the variable (DataToWrite)*/
     c64:	8f 85       	ldd	r24, Y+15	; 0x0f
     c66:	0e 94 26 08 	call	0x104c	; 0x104c <TWI_write>
		if (TWI_getStatus() != TW_MT_DATA_ACK)
     c6a:	0e 94 63 08 	call	0x10c6	; 0x10c6 <TWI_getStatus>
     c6e:	88 32       	cpi	r24, 0x28	; 40
     c70:	11 f0       	breq	.+4      	; 0xc76 <EEPROM_writeByte+0xae>
		{
			/*
			 * checking if the status register matches the current step
			 * returning error and terminating the process if not
			 */
		 return ERROR;
     c72:	18 8e       	std	Y+24, r1	; 0x18
     c74:	7e c0       	rjmp	.+252    	; 0xd72 <EEPROM_writeByte+0x1aa>
		}
		TWI_stop(); /*sending stop bit*/
     c76:	0e 94 1b 08 	call	0x1036	; 0x1036 <TWI_stop>
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	a0 e2       	ldi	r26, 0x20	; 32
     c80:	b1 e4       	ldi	r27, 0x41	; 65
     c82:	8b 87       	std	Y+11, r24	; 0x0b
     c84:	9c 87       	std	Y+12, r25	; 0x0c
     c86:	ad 87       	std	Y+13, r26	; 0x0d
     c88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c8a:	6b 85       	ldd	r22, Y+11	; 0x0b
     c8c:	7c 85       	ldd	r23, Y+12	; 0x0c
     c8e:	8d 85       	ldd	r24, Y+13	; 0x0d
     c90:	9e 85       	ldd	r25, Y+14	; 0x0e
     c92:	20 e0       	ldi	r18, 0x00	; 0
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	4a ef       	ldi	r20, 0xFA	; 250
     c98:	54 e4       	ldi	r21, 0x44	; 68
     c9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c9e:	dc 01       	movw	r26, r24
     ca0:	cb 01       	movw	r24, r22
     ca2:	8f 83       	std	Y+7, r24	; 0x07
     ca4:	98 87       	std	Y+8, r25	; 0x08
     ca6:	a9 87       	std	Y+9, r26	; 0x09
     ca8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     caa:	6f 81       	ldd	r22, Y+7	; 0x07
     cac:	78 85       	ldd	r23, Y+8	; 0x08
     cae:	89 85       	ldd	r24, Y+9	; 0x09
     cb0:	9a 85       	ldd	r25, Y+10	; 0x0a
     cb2:	20 e0       	ldi	r18, 0x00	; 0
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	40 e8       	ldi	r20, 0x80	; 128
     cb8:	5f e3       	ldi	r21, 0x3F	; 63
     cba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cbe:	88 23       	and	r24, r24
     cc0:	2c f4       	brge	.+10     	; 0xccc <EEPROM_writeByte+0x104>
		__ticks = 1;
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	9e 83       	std	Y+6, r25	; 0x06
     cc8:	8d 83       	std	Y+5, r24	; 0x05
     cca:	3f c0       	rjmp	.+126    	; 0xd4a <EEPROM_writeByte+0x182>
	else if (__tmp > 65535)
     ccc:	6f 81       	ldd	r22, Y+7	; 0x07
     cce:	78 85       	ldd	r23, Y+8	; 0x08
     cd0:	89 85       	ldd	r24, Y+9	; 0x09
     cd2:	9a 85       	ldd	r25, Y+10	; 0x0a
     cd4:	20 e0       	ldi	r18, 0x00	; 0
     cd6:	3f ef       	ldi	r19, 0xFF	; 255
     cd8:	4f e7       	ldi	r20, 0x7F	; 127
     cda:	57 e4       	ldi	r21, 0x47	; 71
     cdc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ce0:	18 16       	cp	r1, r24
     ce2:	4c f5       	brge	.+82     	; 0xd36 <EEPROM_writeByte+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ce4:	6b 85       	ldd	r22, Y+11	; 0x0b
     ce6:	7c 85       	ldd	r23, Y+12	; 0x0c
     ce8:	8d 85       	ldd	r24, Y+13	; 0x0d
     cea:	9e 85       	ldd	r25, Y+14	; 0x0e
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	40 e2       	ldi	r20, 0x20	; 32
     cf2:	51 e4       	ldi	r21, 0x41	; 65
     cf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cf8:	dc 01       	movw	r26, r24
     cfa:	cb 01       	movw	r24, r22
     cfc:	bc 01       	movw	r22, r24
     cfe:	cd 01       	movw	r24, r26
     d00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d04:	dc 01       	movw	r26, r24
     d06:	cb 01       	movw	r24, r22
     d08:	9e 83       	std	Y+6, r25	; 0x06
     d0a:	8d 83       	std	Y+5, r24	; 0x05
     d0c:	0f c0       	rjmp	.+30     	; 0xd2c <EEPROM_writeByte+0x164>
     d0e:	88 ec       	ldi	r24, 0xC8	; 200
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	9c 83       	std	Y+4, r25	; 0x04
     d14:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d16:	8b 81       	ldd	r24, Y+3	; 0x03
     d18:	9c 81       	ldd	r25, Y+4	; 0x04
     d1a:	01 97       	sbiw	r24, 0x01	; 1
     d1c:	f1 f7       	brne	.-4      	; 0xd1a <EEPROM_writeByte+0x152>
     d1e:	9c 83       	std	Y+4, r25	; 0x04
     d20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d22:	8d 81       	ldd	r24, Y+5	; 0x05
     d24:	9e 81       	ldd	r25, Y+6	; 0x06
     d26:	01 97       	sbiw	r24, 0x01	; 1
     d28:	9e 83       	std	Y+6, r25	; 0x06
     d2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d2c:	8d 81       	ldd	r24, Y+5	; 0x05
     d2e:	9e 81       	ldd	r25, Y+6	; 0x06
     d30:	00 97       	sbiw	r24, 0x00	; 0
     d32:	69 f7       	brne	.-38     	; 0xd0e <EEPROM_writeByte+0x146>
     d34:	14 c0       	rjmp	.+40     	; 0xd5e <EEPROM_writeByte+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d36:	6f 81       	ldd	r22, Y+7	; 0x07
     d38:	78 85       	ldd	r23, Y+8	; 0x08
     d3a:	89 85       	ldd	r24, Y+9	; 0x09
     d3c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d42:	dc 01       	movw	r26, r24
     d44:	cb 01       	movw	r24, r22
     d46:	9e 83       	std	Y+6, r25	; 0x06
     d48:	8d 83       	std	Y+5, r24	; 0x05
     d4a:	8d 81       	ldd	r24, Y+5	; 0x05
     d4c:	9e 81       	ldd	r25, Y+6	; 0x06
     d4e:	9a 83       	std	Y+2, r25	; 0x02
     d50:	89 83       	std	Y+1, r24	; 0x01
     d52:	89 81       	ldd	r24, Y+1	; 0x01
     d54:	9a 81       	ldd	r25, Y+2	; 0x02
     d56:	01 97       	sbiw	r24, 0x01	; 1
     d58:	f1 f7       	brne	.-4      	; 0xd56 <EEPROM_writeByte+0x18e>
     d5a:	9a 83       	std	Y+2, r25	; 0x02
     d5c:	89 83       	std	Y+1, r24	; 0x01
	TWI_init(twiInit_Ptr);
}
uint8 EEPROM_writeByte(uint16 a_addr, uint32 a_data, uint8 a_numOfBytes)
{
	uint8 i;
	for (i=0;i<a_numOfBytes;i++) /*writing a number of times according to the number of bits added by the user*/
     d5e:	88 89       	ldd	r24, Y+16	; 0x10
     d60:	8f 5f       	subi	r24, 0xFF	; 255
     d62:	88 8b       	std	Y+16, r24	; 0x10
     d64:	98 89       	ldd	r25, Y+16	; 0x10
     d66:	8f 89       	ldd	r24, Y+23	; 0x17
     d68:	98 17       	cp	r25, r24
     d6a:	08 f4       	brcc	.+2      	; 0xd6e <EEPROM_writeByte+0x1a6>
     d6c:	40 cf       	rjmp	.-384    	; 0xbee <EEPROM_writeByte+0x26>
		}
		TWI_stop(); /*sending stop bit*/
		_delay_ms(10);

	}
	return SUCCESS;
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	88 8f       	std	Y+24, r24	; 0x18
     d72:	88 8d       	ldd	r24, Y+24	; 0x18
}
     d74:	68 96       	adiw	r28, 0x18	; 24
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	f8 94       	cli
     d7a:	de bf       	out	0x3e, r29	; 62
     d7c:	0f be       	out	0x3f, r0	; 63
     d7e:	cd bf       	out	0x3d, r28	; 61
     d80:	cf 91       	pop	r28
     d82:	df 91       	pop	r29
     d84:	08 95       	ret

00000d86 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 a_addr,uint32 *data_Ptr , uint8 a_numOfBytes)
{
     d86:	df 93       	push	r29
     d88:	cf 93       	push	r28
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
     d8e:	2b 97       	sbiw	r28, 0x0b	; 11
     d90:	0f b6       	in	r0, 0x3f	; 63
     d92:	f8 94       	cli
     d94:	de bf       	out	0x3e, r29	; 62
     d96:	0f be       	out	0x3f, r0	; 63
     d98:	cd bf       	out	0x3d, r28	; 61
     d9a:	9f 83       	std	Y+7, r25	; 0x07
     d9c:	8e 83       	std	Y+6, r24	; 0x06
     d9e:	79 87       	std	Y+9, r23	; 0x09
     da0:	68 87       	std	Y+8, r22	; 0x08
     da2:	4a 87       	std	Y+10, r20	; 0x0a
	TWI_start(); /*sending start bit*/
     da4:	0e 94 0b 08 	call	0x1016	; 0x1016 <TWI_start>
	if (TWI_getStatus() != TW_START)
     da8:	0e 94 63 08 	call	0x10c6	; 0x10c6 <TWI_getStatus>
     dac:	88 30       	cpi	r24, 0x08	; 8
     dae:	11 f0       	breq	.+4      	; 0xdb4 <EEPROM_readByte+0x2e>
	{
		/*
		 * checking if the status register matches the current step
		 * returning error and terminating the process if not
		 */
	 return ERROR;
     db0:	1b 86       	std	Y+11, r1	; 0x0b
     db2:	9d c0       	rjmp	.+314    	; 0xeee <EEPROM_readByte+0x168>

	/*
	 * sending the 3 bits slave address next to 1010 in the MSBs
	 * sending write request in the LSB
	 */
	TWI_write((uint8)(0xA0 | ((a_addr & 0x0700)>>7)));
     db4:	8e 81       	ldd	r24, Y+6	; 0x06
     db6:	9f 81       	ldd	r25, Y+7	; 0x07
     db8:	80 70       	andi	r24, 0x00	; 0
     dba:	97 70       	andi	r25, 0x07	; 7
     dbc:	88 0f       	add	r24, r24
     dbe:	89 2f       	mov	r24, r25
     dc0:	88 1f       	adc	r24, r24
     dc2:	99 0b       	sbc	r25, r25
     dc4:	91 95       	neg	r25
     dc6:	80 6a       	ori	r24, 0xA0	; 160
     dc8:	0e 94 26 08 	call	0x104c	; 0x104c <TWI_write>
	if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     dcc:	0e 94 63 08 	call	0x10c6	; 0x10c6 <TWI_getStatus>
     dd0:	88 31       	cpi	r24, 0x18	; 24
     dd2:	11 f0       	breq	.+4      	; 0xdd8 <EEPROM_readByte+0x52>
	{
		/*
		 * checking if the status register matches the current step
		 * returning error and terminating the process if not
		 */
	 return ERROR;
     dd4:	1b 86       	std	Y+11, r1	; 0x0b
     dd6:	8b c0       	rjmp	.+278    	; 0xeee <EEPROM_readByte+0x168>
	}

	/*sending the word address of the data we want to write to the eeprom*/
	TWI_write((uint8)(a_addr));
     dd8:	8e 81       	ldd	r24, Y+6	; 0x06
     dda:	0e 94 26 08 	call	0x104c	; 0x104c <TWI_write>
	if (TWI_getStatus() != TW_MT_DATA_ACK)
     dde:	0e 94 63 08 	call	0x10c6	; 0x10c6 <TWI_getStatus>
     de2:	88 32       	cpi	r24, 0x28	; 40
     de4:	11 f0       	breq	.+4      	; 0xdea <EEPROM_readByte+0x64>
	{
		/*
		 * checking if the status register matches the current step
		 * returning error and terminating the process if not
		 */
	 return ERROR;
     de6:	1b 86       	std	Y+11, r1	; 0x0b
     de8:	82 c0       	rjmp	.+260    	; 0xeee <EEPROM_readByte+0x168>
	}

	TWI_start();/*resending start bit*/
     dea:	0e 94 0b 08 	call	0x1016	; 0x1016 <TWI_start>
	if (TWI_getStatus() != TW_REP_START)
     dee:	0e 94 63 08 	call	0x10c6	; 0x10c6 <TWI_getStatus>
     df2:	80 31       	cpi	r24, 0x10	; 16
     df4:	11 f0       	breq	.+4      	; 0xdfa <EEPROM_readByte+0x74>
	{
		/*
		 * checking if the status register matches the current step
		 * returning error and terminating the process if not
		 */
	 return ERROR;
     df6:	1b 86       	std	Y+11, r1	; 0x0b
     df8:	7a c0       	rjmp	.+244    	; 0xeee <EEPROM_readByte+0x168>

	/*
	 * resending the 3 bits slave address next to 1010 in the MSBs
	 * sending read request in the LSB
	 */
	TWI_write((uint8)(0xA0 | ((a_addr & 0x0700)>>7))| 0x01);
     dfa:	8e 81       	ldd	r24, Y+6	; 0x06
     dfc:	9f 81       	ldd	r25, Y+7	; 0x07
     dfe:	80 70       	andi	r24, 0x00	; 0
     e00:	97 70       	andi	r25, 0x07	; 7
     e02:	88 0f       	add	r24, r24
     e04:	89 2f       	mov	r24, r25
     e06:	88 1f       	adc	r24, r24
     e08:	99 0b       	sbc	r25, r25
     e0a:	91 95       	neg	r25
     e0c:	81 6a       	ori	r24, 0xA1	; 161
     e0e:	0e 94 26 08 	call	0x104c	; 0x104c <TWI_write>
	if (TWI_getStatus() != TW_MT_SLA_R_ACK)
     e12:	0e 94 63 08 	call	0x10c6	; 0x10c6 <TWI_getStatus>
     e16:	80 34       	cpi	r24, 0x40	; 64
     e18:	11 f0       	breq	.+4      	; 0xe1e <EEPROM_readByte+0x98>
	{
		/*
		 * checking if the status register matches the current step
		 * returning error and terminating the process if not
		 */
	 return ERROR;
     e1a:	1b 86       	std	Y+11, r1	; 0x0b
     e1c:	68 c0       	rjmp	.+208    	; 0xeee <EEPROM_readByte+0x168>
	}

	uint8 counter; uint32 readData; *data_Ptr=0;
     e1e:	e8 85       	ldd	r30, Y+8	; 0x08
     e20:	f9 85       	ldd	r31, Y+9	; 0x09
     e22:	10 82       	st	Z, r1
     e24:	11 82       	std	Z+1, r1	; 0x01
     e26:	12 82       	std	Z+2, r1	; 0x02
     e28:	13 82       	std	Z+3, r1	; 0x03

	/*reading from eeprom according to number of bits requested by the user*/
	for(counter=0;counter<(a_numOfBytes);counter++)
     e2a:	1d 82       	std	Y+5, r1	; 0x05
     e2c:	57 c0       	rjmp	.+174    	; 0xedc <EEPROM_readByte+0x156>
	{
		readData=0;
     e2e:	19 82       	std	Y+1, r1	; 0x01
     e30:	1a 82       	std	Y+2, r1	; 0x02
     e32:	1b 82       	std	Y+3, r1	; 0x03
     e34:	1c 82       	std	Y+4, r1	; 0x04
		if (counter<(a_numOfBytes-1)) /*reading with ack all the time except last time*/
     e36:	8d 81       	ldd	r24, Y+5	; 0x05
     e38:	28 2f       	mov	r18, r24
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	8a 85       	ldd	r24, Y+10	; 0x0a
     e3e:	88 2f       	mov	r24, r24
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	01 97       	sbiw	r24, 0x01	; 1
     e44:	28 17       	cp	r18, r24
     e46:	39 07       	cpc	r19, r25
     e48:	84 f4       	brge	.+32     	; 0xe6a <EEPROM_readByte+0xe4>
		{
			readData = TWI_readWithACK(); /*saving the latest received byte in the (readData) variable*/
     e4a:	0e 94 3d 08 	call	0x107a	; 0x107a <TWI_readWithACK>
     e4e:	88 2f       	mov	r24, r24
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	a0 e0       	ldi	r26, 0x00	; 0
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	89 83       	std	Y+1, r24	; 0x01
     e58:	9a 83       	std	Y+2, r25	; 0x02
     e5a:	ab 83       	std	Y+3, r26	; 0x03
     e5c:	bc 83       	std	Y+4, r27	; 0x04

			if (TWI_getStatus() != TW_MR_DATA_ACK)
     e5e:	0e 94 63 08 	call	0x10c6	; 0x10c6 <TWI_getStatus>
     e62:	80 35       	cpi	r24, 0x50	; 80
     e64:	91 f0       	breq	.+36     	; 0xe8a <EEPROM_readByte+0x104>
			{
				/*
				 * checking if the status register matches the current step
				 * returning error and terminating the process if not
				 */
			 return ERROR;
     e66:	1b 86       	std	Y+11, r1	; 0x0b
     e68:	42 c0       	rjmp	.+132    	; 0xeee <EEPROM_readByte+0x168>
			}
		}
		else
		{
			readData=TWI_readWithNACK(); /*saving the latest received byte in the (readData) variable*/
     e6a:	0e 94 50 08 	call	0x10a0	; 0x10a0 <TWI_readWithNACK>
     e6e:	88 2f       	mov	r24, r24
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	a0 e0       	ldi	r26, 0x00	; 0
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	89 83       	std	Y+1, r24	; 0x01
     e78:	9a 83       	std	Y+2, r25	; 0x02
     e7a:	ab 83       	std	Y+3, r26	; 0x03
     e7c:	bc 83       	std	Y+4, r27	; 0x04
			if (TWI_getStatus() != TW_MR_DATA_NACK)
     e7e:	0e 94 63 08 	call	0x10c6	; 0x10c6 <TWI_getStatus>
     e82:	88 35       	cpi	r24, 0x58	; 88
     e84:	11 f0       	breq	.+4      	; 0xe8a <EEPROM_readByte+0x104>
			{
				/*
				 * checking if the status register matches the current step
				 * returning error and terminating the process if not
				 */
			 return ERROR;
     e86:	1b 86       	std	Y+11, r1	; 0x0b
     e88:	32 c0       	rjmp	.+100    	; 0xeee <EEPROM_readByte+0x168>
			}
		}
		*data_Ptr = *data_Ptr | (readData<<(counter*8)); /*putting first received byte in LSBs and the next byte in the next 8 bits and so on*/
     e8a:	e8 85       	ldd	r30, Y+8	; 0x08
     e8c:	f9 85       	ldd	r31, Y+9	; 0x09
     e8e:	40 81       	ld	r20, Z
     e90:	51 81       	ldd	r21, Z+1	; 0x01
     e92:	62 81       	ldd	r22, Z+2	; 0x02
     e94:	73 81       	ldd	r23, Z+3	; 0x03
     e96:	8d 81       	ldd	r24, Y+5	; 0x05
     e98:	88 2f       	mov	r24, r24
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	9c 01       	movw	r18, r24
     e9e:	22 0f       	add	r18, r18
     ea0:	33 1f       	adc	r19, r19
     ea2:	22 0f       	add	r18, r18
     ea4:	33 1f       	adc	r19, r19
     ea6:	22 0f       	add	r18, r18
     ea8:	33 1f       	adc	r19, r19
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
     eac:	9a 81       	ldd	r25, Y+2	; 0x02
     eae:	ab 81       	ldd	r26, Y+3	; 0x03
     eb0:	bc 81       	ldd	r27, Y+4	; 0x04
     eb2:	02 2e       	mov	r0, r18
     eb4:	04 c0       	rjmp	.+8      	; 0xebe <EEPROM_readByte+0x138>
     eb6:	88 0f       	add	r24, r24
     eb8:	99 1f       	adc	r25, r25
     eba:	aa 1f       	adc	r26, r26
     ebc:	bb 1f       	adc	r27, r27
     ebe:	0a 94       	dec	r0
     ec0:	d2 f7       	brpl	.-12     	; 0xeb6 <EEPROM_readByte+0x130>
     ec2:	84 2b       	or	r24, r20
     ec4:	95 2b       	or	r25, r21
     ec6:	a6 2b       	or	r26, r22
     ec8:	b7 2b       	or	r27, r23
     eca:	e8 85       	ldd	r30, Y+8	; 0x08
     ecc:	f9 85       	ldd	r31, Y+9	; 0x09
     ece:	80 83       	st	Z, r24
     ed0:	91 83       	std	Z+1, r25	; 0x01
     ed2:	a2 83       	std	Z+2, r26	; 0x02
     ed4:	b3 83       	std	Z+3, r27	; 0x03
	}

	uint8 counter; uint32 readData; *data_Ptr=0;

	/*reading from eeprom according to number of bits requested by the user*/
	for(counter=0;counter<(a_numOfBytes);counter++)
     ed6:	8d 81       	ldd	r24, Y+5	; 0x05
     ed8:	8f 5f       	subi	r24, 0xFF	; 255
     eda:	8d 83       	std	Y+5, r24	; 0x05
     edc:	9d 81       	ldd	r25, Y+5	; 0x05
     ede:	8a 85       	ldd	r24, Y+10	; 0x0a
     ee0:	98 17       	cp	r25, r24
     ee2:	08 f4       	brcc	.+2      	; 0xee6 <EEPROM_readByte+0x160>
     ee4:	a4 cf       	rjmp	.-184    	; 0xe2e <EEPROM_readByte+0xa8>
			}
		}
		*data_Ptr = *data_Ptr | (readData<<(counter*8)); /*putting first received byte in LSBs and the next byte in the next 8 bits and so on*/
	}

	TWI_stop(); /*sending stop bit*/
     ee6:	0e 94 1b 08 	call	0x1036	; 0x1036 <TWI_stop>
	return SUCCESS;
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	8b 87       	std	Y+11, r24	; 0x0b
     eee:	8b 85       	ldd	r24, Y+11	; 0x0b
}
     ef0:	2b 96       	adiw	r28, 0x0b	; 11
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	f8 94       	cli
     ef6:	de bf       	out	0x3e, r29	; 62
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	cd bf       	out	0x3d, r28	; 61
     efc:	cf 91       	pop	r28
     efe:	df 91       	pop	r29
     f00:	08 95       	ret

00000f02 <TWI_init>:
 *******************************************************************************/

#include "i2c.h"

void TWI_init(const TwiConfig *twiInit_Ptr)  /*function receives the configuration structure by reference to initialize the i2c */
{
     f02:	ef 92       	push	r14
     f04:	ff 92       	push	r15
     f06:	0f 93       	push	r16
     f08:	1f 93       	push	r17
     f0a:	df 93       	push	r29
     f0c:	cf 93       	push	r28
     f0e:	cd b7       	in	r28, 0x3d	; 61
     f10:	de b7       	in	r29, 0x3e	; 62
     f12:	28 97       	sbiw	r28, 0x08	; 8
     f14:	0f b6       	in	r0, 0x3f	; 63
     f16:	f8 94       	cli
     f18:	de bf       	out	0x3e, r29	; 62
     f1a:	0f be       	out	0x3f, r0	; 63
     f1c:	cd bf       	out	0x3d, r28	; 61
     f1e:	98 87       	std	Y+8, r25	; 0x08
     f20:	8f 83       	std	Y+7, r24	; 0x07
	uint8 prescaler=1; uint32 twbr=0; uint8 twps=0;   /*Calculating TWBR and TWSR value from clock frequency entered by user*/
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	8e 83       	std	Y+6, r24	; 0x06
     f26:	1a 82       	std	Y+2, r1	; 0x02
     f28:	1b 82       	std	Y+3, r1	; 0x03
     f2a:	1c 82       	std	Y+4, r1	; 0x04
     f2c:	1d 82       	std	Y+5, r1	; 0x05
     f2e:	19 82       	std	Y+1, r1	; 0x01
     f30:	47 c0       	rjmp	.+142    	; 0xfc0 <TWI_init+0xbe>
	while(prescaler<=64)
	{
		twbr = (((F_CPU/(twiInit_Ptr->s_clockFreq))-16)/(2*(prescaler))); /*calculating twbr using given SCL equation*/
     f32:	ef 81       	ldd	r30, Y+7	; 0x07
     f34:	f8 85       	ldd	r31, Y+8	; 0x08
     f36:	20 81       	ld	r18, Z
     f38:	31 81       	ldd	r19, Z+1	; 0x01
     f3a:	42 81       	ldd	r20, Z+2	; 0x02
     f3c:	53 81       	ldd	r21, Z+3	; 0x03
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	92 e1       	ldi	r25, 0x12	; 18
     f42:	aa e7       	ldi	r26, 0x7A	; 122
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	bc 01       	movw	r22, r24
     f48:	cd 01       	movw	r24, r26
     f4a:	0e 94 cf 10 	call	0x219e	; 0x219e <__udivmodsi4>
     f4e:	da 01       	movw	r26, r20
     f50:	c9 01       	movw	r24, r18
     f52:	0f 2e       	mov	r0, r31
     f54:	f0 ef       	ldi	r31, 0xF0	; 240
     f56:	ef 2e       	mov	r14, r31
     f58:	ff ef       	ldi	r31, 0xFF	; 255
     f5a:	ff 2e       	mov	r15, r31
     f5c:	ff ef       	ldi	r31, 0xFF	; 255
     f5e:	0f 2f       	mov	r16, r31
     f60:	ff ef       	ldi	r31, 0xFF	; 255
     f62:	1f 2f       	mov	r17, r31
     f64:	f0 2d       	mov	r31, r0
     f66:	e8 0e       	add	r14, r24
     f68:	f9 1e       	adc	r15, r25
     f6a:	0a 1f       	adc	r16, r26
     f6c:	1b 1f       	adc	r17, r27
     f6e:	8e 81       	ldd	r24, Y+6	; 0x06
     f70:	88 2f       	mov	r24, r24
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	9c 01       	movw	r18, r24
     f7a:	44 27       	eor	r20, r20
     f7c:	37 fd       	sbrc	r19, 7
     f7e:	40 95       	com	r20
     f80:	54 2f       	mov	r21, r20
     f82:	c8 01       	movw	r24, r16
     f84:	b7 01       	movw	r22, r14
     f86:	0e 94 cf 10 	call	0x219e	; 0x219e <__udivmodsi4>
     f8a:	da 01       	movw	r26, r20
     f8c:	c9 01       	movw	r24, r18
     f8e:	8a 83       	std	Y+2, r24	; 0x02
     f90:	9b 83       	std	Y+3, r25	; 0x03
     f92:	ac 83       	std	Y+4, r26	; 0x04
     f94:	bd 83       	std	Y+5, r27	; 0x05
		if(twbr<256)
     f96:	8a 81       	ldd	r24, Y+2	; 0x02
     f98:	9b 81       	ldd	r25, Y+3	; 0x03
     f9a:	ac 81       	ldd	r26, Y+4	; 0x04
     f9c:	bd 81       	ldd	r27, Y+5	; 0x05
     f9e:	8f 3f       	cpi	r24, 0xFF	; 255
     fa0:	91 05       	cpc	r25, r1
     fa2:	a1 05       	cpc	r26, r1
     fa4:	b1 05       	cpc	r27, r1
     fa6:	81 f0       	breq	.+32     	; 0xfc8 <TWI_init+0xc6>
     fa8:	78 f0       	brcs	.+30     	; 0xfc8 <TWI_init+0xc6>
			/*
			 * if the value of twbr doesn't fit in 8 bit register
			 * multiply prescaler by 4
			 * add one to twps in an attempt to decrease the value of twbr in the next try
			 */
			prescaler=prescaler*4;
     faa:	8e 81       	ldd	r24, Y+6	; 0x06
     fac:	88 2f       	mov	r24, r24
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	88 0f       	add	r24, r24
     fb2:	99 1f       	adc	r25, r25
     fb4:	88 0f       	add	r24, r24
     fb6:	99 1f       	adc	r25, r25
     fb8:	8e 83       	std	Y+6, r24	; 0x06
			twps = twps+1;
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	8f 5f       	subi	r24, 0xFF	; 255
     fbe:	89 83       	std	Y+1, r24	; 0x01
#include "i2c.h"

void TWI_init(const TwiConfig *twiInit_Ptr)  /*function receives the configuration structure by reference to initialize the i2c */
{
	uint8 prescaler=1; uint32 twbr=0; uint8 twps=0;   /*Calculating TWBR and TWSR value from clock frequency entered by user*/
	while(prescaler<=64)
     fc0:	8e 81       	ldd	r24, Y+6	; 0x06
     fc2:	81 34       	cpi	r24, 0x41	; 65
     fc4:	08 f4       	brcc	.+2      	; 0xfc8 <TWI_init+0xc6>
     fc6:	b5 cf       	rjmp	.-150    	; 0xf32 <TWI_init+0x30>
			 */
			prescaler=prescaler*4;
			twps = twps+1;
		}
	}
	TWBR = (uint8)twbr; /*saving calculated value of TWBR to the register*/
     fc8:	e0 e2       	ldi	r30, 0x20	; 32
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	80 83       	st	Z, r24
	TWSR = (TWSR & 0xFC) | ( twps & 0x03); /*saving the TWSR least significant two bits to configure the i2c clock*/
     fd0:	a1 e2       	ldi	r26, 0x21	; 33
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e1 e2       	ldi	r30, 0x21	; 33
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	98 2f       	mov	r25, r24
     fdc:	9c 7f       	andi	r25, 0xFC	; 252
     fde:	89 81       	ldd	r24, Y+1	; 0x01
     fe0:	83 70       	andi	r24, 0x03	; 3
     fe2:	89 2b       	or	r24, r25
     fe4:	8c 93       	st	X, r24
	TWAR = ((twiInit_Ptr->s_slaveAddress)<<1);  /*disable general call recognition and adding slave address to the 7 MSBs*/
     fe6:	a2 e2       	ldi	r26, 0x22	; 34
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	ef 81       	ldd	r30, Y+7	; 0x07
     fec:	f8 85       	ldd	r31, Y+8	; 0x08
     fee:	84 81       	ldd	r24, Z+4	; 0x04
     ff0:	88 0f       	add	r24, r24
     ff2:	8c 93       	st	X, r24
	TWCR = (1<<TWEN); /*TWI enable Bit*/
     ff4:	e6 e5       	ldi	r30, 0x56	; 86
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	84 e0       	ldi	r24, 0x04	; 4
     ffa:	80 83       	st	Z, r24

}
     ffc:	28 96       	adiw	r28, 0x08	; 8
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	f8 94       	cli
    1002:	de bf       	out	0x3e, r29	; 62
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	cd bf       	out	0x3d, r28	; 61
    1008:	cf 91       	pop	r28
    100a:	df 91       	pop	r29
    100c:	1f 91       	pop	r17
    100e:	0f 91       	pop	r16
    1010:	ff 90       	pop	r15
    1012:	ef 90       	pop	r14
    1014:	08 95       	ret

00001016 <TWI_start>:
void TWI_start(void)
{
    1016:	df 93       	push	r29
    1018:	cf 93       	push	r28
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTA); /*CLEAR FLAG + ENABLE TWI + SEND START BIT*/
    101e:	e6 e5       	ldi	r30, 0x56	; 86
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	84 ea       	ldi	r24, 0xA4	; 164
    1024:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(TWCR,TWINT)) /*wait until start is sent*/
    1026:	e6 e5       	ldi	r30, 0x56	; 86
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	88 23       	and	r24, r24
    102e:	dc f7       	brge	.-10     	; 0x1026 <TWI_start+0x10>
	{

	}
}
    1030:	cf 91       	pop	r28
    1032:	df 91       	pop	r29
    1034:	08 95       	ret

00001036 <TWI_stop>:
void TWI_stop(void)
{
    1036:	df 93       	push	r29
    1038:	cf 93       	push	r28
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO); /*CLEAR FLAG + ENABLE TWI + SEND STOP BIT*/
    103e:	e6 e5       	ldi	r30, 0x56	; 86
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	84 e9       	ldi	r24, 0x94	; 148
    1044:	80 83       	st	Z, r24
}
    1046:	cf 91       	pop	r28
    1048:	df 91       	pop	r29
    104a:	08 95       	ret

0000104c <TWI_write>:
void TWI_write(uint8 a_data) /*function that takes the data the user want to send*/
{
    104c:	df 93       	push	r29
    104e:	cf 93       	push	r28
    1050:	0f 92       	push	r0
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
    1056:	89 83       	std	Y+1, r24	; 0x01
	TWDR = a_data; /*saving data in the register to be transmited*/
    1058:	e3 e2       	ldi	r30, 0x23	; 35
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	80 83       	st	Z, r24
	TWCR = (1<<TWINT) | (1<<TWEN) ;/*CLEAR FLAG + ENABLE TWI*/
    1060:	e6 e5       	ldi	r30, 0x56	; 86
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	84 e8       	ldi	r24, 0x84	; 132
    1066:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(TWCR,TWINT))/*wait for the bit to be sent*/
    1068:	e6 e5       	ldi	r30, 0x56	; 86
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	88 23       	and	r24, r24
    1070:	dc f7       	brge	.-10     	; 0x1068 <TWI_write+0x1c>
	{

	}
}
    1072:	0f 90       	pop	r0
    1074:	cf 91       	pop	r28
    1076:	df 91       	pop	r29
    1078:	08 95       	ret

0000107a <TWI_readWithACK>:
uint8 TWI_readWithACK(void)  /*function returns data that needs to be received*/
{
    107a:	df 93       	push	r29
    107c:	cf 93       	push	r28
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); /*CLEAR FLAG + ENABLE TWI + SEND ACK AFTER DATA TRANSMITION*/
    1082:	e6 e5       	ldi	r30, 0x56	; 86
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	84 ec       	ldi	r24, 0xC4	; 196
    1088:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(TWCR,TWINT)) /*wait till data is received*/
    108a:	e6 e5       	ldi	r30, 0x56	; 86
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	88 23       	and	r24, r24
    1092:	dc f7       	brge	.-10     	; 0x108a <TWI_readWithACK+0x10>
	{

	}
	return TWDR; /*return data*/
    1094:	e3 e2       	ldi	r30, 0x23	; 35
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
}
    109a:	cf 91       	pop	r28
    109c:	df 91       	pop	r29
    109e:	08 95       	ret

000010a0 <TWI_readWithNACK>:
uint8 TWI_readWithNACK(void)
{
    10a0:	df 93       	push	r29
    10a2:	cf 93       	push	r28
    10a4:	cd b7       	in	r28, 0x3d	; 61
    10a6:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWEN);/*CLEAR FLAG + ENABLE TWI + sending ack off*/
    10a8:	e6 e5       	ldi	r30, 0x56	; 86
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	84 e8       	ldi	r24, 0x84	; 132
    10ae:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(TWCR,TWINT)) /*wait till data is received*/
    10b0:	e6 e5       	ldi	r30, 0x56	; 86
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	88 23       	and	r24, r24
    10b8:	dc f7       	brge	.-10     	; 0x10b0 <TWI_readWithNACK+0x10>
	{

	}
	return TWDR; /*return data*/
    10ba:	e3 e2       	ldi	r30, 0x23	; 35
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
}
    10c0:	cf 91       	pop	r28
    10c2:	df 91       	pop	r29
    10c4:	08 95       	ret

000010c6 <TWI_getStatus>:
uint8 TWI_getStatus(void)
{
    10c6:	df 93       	push	r29
    10c8:	cf 93       	push	r28
    10ca:	0f 92       	push	r0
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62
	/*
	 * get the last 5 bits of the status register and masking the first 3 bits
	 */
	uint8 status = TWSR & 0xF8;
    10d0:	e1 e2       	ldi	r30, 0x21	; 33
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	88 7f       	andi	r24, 0xF8	; 248
    10d8:	89 83       	std	Y+1, r24	; 0x01
	return status; /*return status*/
    10da:	89 81       	ldd	r24, Y+1	; 0x01
}
    10dc:	0f 90       	pop	r0
    10de:	cf 91       	pop	r28
    10e0:	df 91       	pop	r29
    10e2:	08 95       	ret

000010e4 <Check_Flag>:

uint32 Password=0; uint32 overflow=0;
Timer_ConfigType TimerSettings = {TIMER_1,COMPARE_MATCH,F_CPU_1024,0,0,0}; /*initializing timer configuration struct*/

uint8 Check_Flag(void)
{
    10e4:	df 93       	push	r29
    10e6:	cf 93       	push	r28
    10e8:	00 d0       	rcall	.+0      	; 0x10ea <Check_Flag+0x6>
    10ea:	00 d0       	rcall	.+0      	; 0x10ec <Check_Flag+0x8>
    10ec:	0f 92       	push	r0
    10ee:	cd b7       	in	r28, 0x3d	; 61
    10f0:	de b7       	in	r29, 0x3e	; 62
	/*
	 * function responsible of cheching the flag status in the EEPROM and returning its status
	 * the flag status determines if a password has been set before or not
	 */
	uint32 flag_status;
	EEPROM_readByte(FLAG_ADDRESS,&flag_status , 1);
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	9e 01       	movw	r18, r28
    10f8:	2f 5f       	subi	r18, 0xFF	; 255
    10fa:	3f 4f       	sbci	r19, 0xFF	; 255
    10fc:	b9 01       	movw	r22, r18
    10fe:	41 e0       	ldi	r20, 0x01	; 1
    1100:	0e 94 c3 06 	call	0xd86	; 0xd86 <EEPROM_readByte>
	if(flag_status == SUCCESS)
    1104:	89 81       	ldd	r24, Y+1	; 0x01
    1106:	9a 81       	ldd	r25, Y+2	; 0x02
    1108:	ab 81       	ldd	r26, Y+3	; 0x03
    110a:	bc 81       	ldd	r27, Y+4	; 0x04
    110c:	81 30       	cpi	r24, 0x01	; 1
    110e:	91 05       	cpc	r25, r1
    1110:	a1 05       	cpc	r26, r1
    1112:	b1 05       	cpc	r27, r1
    1114:	19 f4       	brne	.+6      	; 0x111c <Check_Flag+0x38>
	{
		/*
		 * return SUCCESS flag if the was set
		 */
		return SUCCESS;
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	8d 83       	std	Y+5, r24	; 0x05
    111a:	01 c0       	rjmp	.+2      	; 0x111e <Check_Flag+0x3a>
	else
	{
		/*
		 * return FAIL flag if the flag wasn't set
		 */
		return FAIL;
    111c:	1d 82       	std	Y+5, r1	; 0x05
    111e:	8d 81       	ldd	r24, Y+5	; 0x05
	}
}
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	cf 91       	pop	r28
    112c:	df 91       	pop	r29
    112e:	08 95       	ret

00001130 <Reply>:

void Reply(uint8 state) //state argument should be SUCCESS OR FAIL
{
    1130:	df 93       	push	r29
    1132:	cf 93       	push	r28
    1134:	0f 92       	push	r0
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
    113a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * send a FLAG to MC1 to determine current state or to help with synchronization
	 */
	UART_sendByte(state);
    113c:	89 81       	ldd	r24, Y+1	; 0x01
    113e:	0e 94 49 10 	call	0x2092	; 0x2092 <UART_sendByte>
}
    1142:	0f 90       	pop	r0
    1144:	cf 91       	pop	r28
    1146:	df 91       	pop	r29
    1148:	08 95       	ret

0000114a <Read_Stored_Password>:

void Read_Stored_Password(void)
{
    114a:	df 93       	push	r29
    114c:	cf 93       	push	r28
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
	/*
	 * read password from address defined in PASS_ADDRESS in EEPROM
	 * read the 4 byte password stored in the EEPROM
	 * store then in Password variable
	 */
	EEPROM_readByte(PASS_ADDRESS,&Password , 4);
    1152:	2c e7       	ldi	r18, 0x7C	; 124
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	85 e0       	ldi	r24, 0x05	; 5
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	b9 01       	movw	r22, r18
    115c:	44 e0       	ldi	r20, 0x04	; 4
    115e:	0e 94 c3 06 	call	0xd86	; 0xd86 <EEPROM_readByte>
}
    1162:	cf 91       	pop	r28
    1164:	df 91       	pop	r29
    1166:	08 95       	ret

00001168 <Send_Password>:

void Send_Password(void)
{
    1168:	ef 92       	push	r14
    116a:	ff 92       	push	r15
    116c:	0f 93       	push	r16
    116e:	1f 93       	push	r17
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	0f 92       	push	r0
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62
	/*
	 * send stored password to MC1 so password validation can occur without the need of extra-
	 * communication between the two micro-controllers and the eeprom
	 */
	uint8 i=0;
    117a:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;i<4;i++)
    117c:	19 82       	std	Y+1, r1	; 0x01
    117e:	21 c0       	rjmp	.+66     	; 0x11c2 <Send_Password+0x5a>
		/*
		 * loop to send the 4 byte password
		 * sending the first byte in the LSBs
		 * then shifting right by 8 bits each loop to send the next byte
		 */
		UART_sendByte((uint8)(Password>>(i*8)));
    1180:	20 91 7c 00 	lds	r18, 0x007C
    1184:	30 91 7d 00 	lds	r19, 0x007D
    1188:	40 91 7e 00 	lds	r20, 0x007E
    118c:	50 91 7f 00 	lds	r21, 0x007F
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	88 2f       	mov	r24, r24
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	88 0f       	add	r24, r24
    1198:	99 1f       	adc	r25, r25
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	88 0f       	add	r24, r24
    11a0:	99 1f       	adc	r25, r25
    11a2:	79 01       	movw	r14, r18
    11a4:	8a 01       	movw	r16, r20
    11a6:	04 c0       	rjmp	.+8      	; 0x11b0 <Send_Password+0x48>
    11a8:	16 95       	lsr	r17
    11aa:	07 95       	ror	r16
    11ac:	f7 94       	ror	r15
    11ae:	e7 94       	ror	r14
    11b0:	8a 95       	dec	r24
    11b2:	d2 f7       	brpl	.-12     	; 0x11a8 <Send_Password+0x40>
    11b4:	d8 01       	movw	r26, r16
    11b6:	c7 01       	movw	r24, r14
    11b8:	0e 94 49 10 	call	0x2092	; 0x2092 <UART_sendByte>
	/*
	 * send stored password to MC1 so password validation can occur without the need of extra-
	 * communication between the two micro-controllers and the eeprom
	 */
	uint8 i=0;
	for(i=0;i<4;i++)
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
    11be:	8f 5f       	subi	r24, 0xFF	; 255
    11c0:	89 83       	std	Y+1, r24	; 0x01
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	84 30       	cpi	r24, 0x04	; 4
    11c6:	e0 f2       	brcs	.-72     	; 0x1180 <Send_Password+0x18>
		 * then shifting right by 8 bits each loop to send the next byte
		 */
		UART_sendByte((uint8)(Password>>(i*8)));
	}

}
    11c8:	0f 90       	pop	r0
    11ca:	cf 91       	pop	r28
    11cc:	df 91       	pop	r29
    11ce:	1f 91       	pop	r17
    11d0:	0f 91       	pop	r16
    11d2:	ff 90       	pop	r15
    11d4:	ef 90       	pop	r14
    11d6:	08 95       	ret

000011d8 <Receive_Password>:

void Receive_Password() /*receive password from MC1*/
{
    11d8:	df 93       	push	r29
    11da:	cf 93       	push	r28
    11dc:	0f 92       	push	r0
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
	uint8 i; Password=0;
    11e2:	10 92 7c 00 	sts	0x007C, r1
    11e6:	10 92 7d 00 	sts	0x007D, r1
    11ea:	10 92 7e 00 	sts	0x007E, r1
    11ee:	10 92 7f 00 	sts	0x007F, r1
	for(i=0;i<4;i++)
    11f2:	19 82       	std	Y+1, r1	; 0x01
    11f4:	2d c0       	rjmp	.+90     	; 0x1250 <Receive_Password+0x78>
		/*
		 * loop to receive the 4 byte password
		 * receiving the first byte in the LSBs
		 * then receiving the next byte in the next 8 bits of the variable each loop
		 */
		Password |= (((uint32)UART_recieveByte())<<(i*8));
    11f6:	0e 94 60 10 	call	0x20c0	; 0x20c0 <UART_recieveByte>
    11fa:	28 2f       	mov	r18, r24
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	40 e0       	ldi	r20, 0x00	; 0
    1200:	50 e0       	ldi	r21, 0x00	; 0
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	88 2f       	mov	r24, r24
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	88 0f       	add	r24, r24
    120a:	99 1f       	adc	r25, r25
    120c:	88 0f       	add	r24, r24
    120e:	99 1f       	adc	r25, r25
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	04 c0       	rjmp	.+8      	; 0x121e <Receive_Password+0x46>
    1216:	22 0f       	add	r18, r18
    1218:	33 1f       	adc	r19, r19
    121a:	44 1f       	adc	r20, r20
    121c:	55 1f       	adc	r21, r21
    121e:	8a 95       	dec	r24
    1220:	d2 f7       	brpl	.-12     	; 0x1216 <Receive_Password+0x3e>
    1222:	80 91 7c 00 	lds	r24, 0x007C
    1226:	90 91 7d 00 	lds	r25, 0x007D
    122a:	a0 91 7e 00 	lds	r26, 0x007E
    122e:	b0 91 7f 00 	lds	r27, 0x007F
    1232:	82 2b       	or	r24, r18
    1234:	93 2b       	or	r25, r19
    1236:	a4 2b       	or	r26, r20
    1238:	b5 2b       	or	r27, r21
    123a:	80 93 7c 00 	sts	0x007C, r24
    123e:	90 93 7d 00 	sts	0x007D, r25
    1242:	a0 93 7e 00 	sts	0x007E, r26
    1246:	b0 93 7f 00 	sts	0x007F, r27
}

void Receive_Password() /*receive password from MC1*/
{
	uint8 i; Password=0;
	for(i=0;i<4;i++)
    124a:	89 81       	ldd	r24, Y+1	; 0x01
    124c:	8f 5f       	subi	r24, 0xFF	; 255
    124e:	89 83       	std	Y+1, r24	; 0x01
    1250:	89 81       	ldd	r24, Y+1	; 0x01
    1252:	84 30       	cpi	r24, 0x04	; 4
    1254:	80 f2       	brcs	.-96     	; 0x11f6 <Receive_Password+0x1e>
		 * receiving the first byte in the LSBs
		 * then receiving the next byte in the next 8 bits of the variable each loop
		 */
		Password |= (((uint32)UART_recieveByte())<<(i*8));
	}
}
    1256:	0f 90       	pop	r0
    1258:	cf 91       	pop	r28
    125a:	df 91       	pop	r29
    125c:	08 95       	ret

0000125e <Save_Password>:
void Save_Password(void)
{
    125e:	df 93       	push	r29
    1260:	cf 93       	push	r28
    1262:	cd b7       	in	r28, 0x3d	; 61
    1264:	de b7       	in	r29, 0x3e	; 62
	/*
	 * update the flag status
	 * save received password in EEPROM
	 */
	EEPROM_writeByte(FLAG_ADDRESS,(uint32)SUCCESS , 1);
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	41 e0       	ldi	r20, 0x01	; 1
    126c:	50 e0       	ldi	r21, 0x00	; 0
    126e:	60 e0       	ldi	r22, 0x00	; 0
    1270:	70 e0       	ldi	r23, 0x00	; 0
    1272:	21 e0       	ldi	r18, 0x01	; 1
    1274:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <EEPROM_writeByte>
	EEPROM_writeByte(PASS_ADDRESS,Password , 4);
    1278:	20 91 7c 00 	lds	r18, 0x007C
    127c:	30 91 7d 00 	lds	r19, 0x007D
    1280:	40 91 7e 00 	lds	r20, 0x007E
    1284:	50 91 7f 00 	lds	r21, 0x007F
    1288:	85 e0       	ldi	r24, 0x05	; 5
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	ba 01       	movw	r22, r20
    128e:	a9 01       	movw	r20, r18
    1290:	24 e0       	ldi	r18, 0x04	; 4
    1292:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <EEPROM_writeByte>
}
    1296:	cf 91       	pop	r28
    1298:	df 91       	pop	r29
    129a:	08 95       	ret

0000129c <Receive_Command>:

uint8 Receive_Command(void)
{
    129c:	df 93       	push	r29
    129e:	cf 93       	push	r28
    12a0:	cd b7       	in	r28, 0x3d	; 61
    12a2:	de b7       	in	r29, 0x3e	; 62
	/*
	 * receive command from MC1 to decide the next action
	 */
	return (UART_recieveByte());
    12a4:	0e 94 60 10 	call	0x20c0	; 0x20c0 <UART_recieveByte>
}
    12a8:	cf 91       	pop	r28
    12aa:	df 91       	pop	r29
    12ac:	08 95       	ret

000012ae <Door_Sequence>:

void Door_Sequence(void)
{
    12ae:	df 93       	push	r29
    12b0:	cf 93       	push	r28
    12b2:	cd b7       	in	r28, 0x3d	; 61
    12b4:	de b7       	in	r29, 0x3e	; 62
	TimerSettings.s_compareValue = 23439; //3 seconds
    12b6:	8f e8       	ldi	r24, 0x8F	; 143
    12b8:	9b e5       	ldi	r25, 0x5B	; 91
    12ba:	90 93 6e 00 	sts	0x006E, r25
    12be:	80 93 6d 00 	sts	0x006D, r24
	Timer_init(&TimerSettings); /* initialize timer after updating the compare value in the configuration struct*/
    12c2:	88 e6       	ldi	r24, 0x68	; 104
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <Timer_init>
	MOTOR_runCW(); /* starting motor in clock wise direction*/
    12ca:	0e 94 56 0b 	call	0x16ac	; 0x16ac <MOTOR_runCW>
	while (overflow < 5)  //3x5=15 seconds
    12ce:	80 91 80 00 	lds	r24, 0x0080
    12d2:	90 91 81 00 	lds	r25, 0x0081
    12d6:	a0 91 82 00 	lds	r26, 0x0082
    12da:	b0 91 83 00 	lds	r27, 0x0083
    12de:	85 30       	cpi	r24, 0x05	; 5
    12e0:	91 05       	cpc	r25, r1
    12e2:	a1 05       	cpc	r26, r1
    12e4:	b1 05       	cpc	r27, r1
    12e6:	98 f3       	brcs	.-26     	; 0x12ce <Door_Sequence+0x20>
	{
		/*wait 15 seconds*/
	}
	Timer_clearTimerValue(TIMER_1); /*starting timer from zero again*/
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <Timer_clearTimerValue>
	overflow=0; /* reset overflow flag*/
    12ee:	10 92 80 00 	sts	0x0080, r1
    12f2:	10 92 81 00 	sts	0x0081, r1
    12f6:	10 92 82 00 	sts	0x0082, r1
    12fa:	10 92 83 00 	sts	0x0083, r1
	MOTOR_stop(); /*stop the motor*/
    12fe:	0e 94 ac 0b 	call	0x1758	; 0x1758 <MOTOR_stop>
	while(overflow < 1) //wait 3 seconds
    1302:	80 91 80 00 	lds	r24, 0x0080
    1306:	90 91 81 00 	lds	r25, 0x0081
    130a:	a0 91 82 00 	lds	r26, 0x0082
    130e:	b0 91 83 00 	lds	r27, 0x0083
    1312:	00 97       	sbiw	r24, 0x00	; 0
    1314:	a1 05       	cpc	r26, r1
    1316:	b1 05       	cpc	r27, r1
    1318:	a1 f3       	breq	.-24     	; 0x1302 <Door_Sequence+0x54>
	{
		/*wait 3 seconds*/
	}
	Reply(SUCCESS); /* send success flag to MC1 for synchronization and to notify that the door will close*/
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	0e 94 98 08 	call	0x1130	; 0x1130 <Reply>
	Timer_clearTimerValue(TIMER_1); /*starting timer from zero again*/
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <Timer_clearTimerValue>
	overflow=0; /* reset overflow flag*/
    1326:	10 92 80 00 	sts	0x0080, r1
    132a:	10 92 81 00 	sts	0x0081, r1
    132e:	10 92 82 00 	sts	0x0082, r1
    1332:	10 92 83 00 	sts	0x0083, r1
	MOTOR_runACW(); /* starting motor in Anti-clock wise direction*/
    1336:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <MOTOR_runACW>
	while (overflow < 5)  //3x5=15 seconds
    133a:	80 91 80 00 	lds	r24, 0x0080
    133e:	90 91 81 00 	lds	r25, 0x0081
    1342:	a0 91 82 00 	lds	r26, 0x0082
    1346:	b0 91 83 00 	lds	r27, 0x0083
    134a:	85 30       	cpi	r24, 0x05	; 5
    134c:	91 05       	cpc	r25, r1
    134e:	a1 05       	cpc	r26, r1
    1350:	b1 05       	cpc	r27, r1
    1352:	98 f3       	brcs	.-26     	; 0x133a <Door_Sequence+0x8c>
	{
		/*wait 15 seconds*/
	}
	Reply(SUCCESS); /* send success flag to MC1 for synchronization and to notify that the door process finished*/
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	0e 94 98 08 	call	0x1130	; 0x1130 <Reply>
	MOTOR_stop(); /*stop the motor*/
    135a:	0e 94 ac 0b 	call	0x1758	; 0x1758 <MOTOR_stop>
	Timer_deInit(TIMER_1); /* stop the timer*/
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <Timer_deInit>
	overflow=0; /* clear the overflow flag*/
    1364:	10 92 80 00 	sts	0x0080, r1
    1368:	10 92 81 00 	sts	0x0081, r1
    136c:	10 92 82 00 	sts	0x0082, r1
    1370:	10 92 83 00 	sts	0x0083, r1
}
    1374:	cf 91       	pop	r28
    1376:	df 91       	pop	r29
    1378:	08 95       	ret

0000137a <Alert>:

void Alert(void)
{
    137a:	df 93       	push	r29
    137c:	cf 93       	push	r28
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
	/*
	 * responsible for activating the buzzer for 60 seconds
	 */
	TimerSettings.s_compareValue = 46875; //6 seconds
    1382:	8b e1       	ldi	r24, 0x1B	; 27
    1384:	97 eb       	ldi	r25, 0xB7	; 183
    1386:	90 93 6e 00 	sts	0x006E, r25
    138a:	80 93 6d 00 	sts	0x006D, r24
	Timer_init(&TimerSettings); /* initialize timer after updating the compare value in the configuration struct*/
    138e:	88 e6       	ldi	r24, 0x68	; 104
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <Timer_init>
	BUZZER_on(); /* activate buzzer */
    1396:	0e 94 b8 05 	call	0xb70	; 0xb70 <BUZZER_on>
	while(overflow < 10) //6x10=60 seconds
    139a:	80 91 80 00 	lds	r24, 0x0080
    139e:	90 91 81 00 	lds	r25, 0x0081
    13a2:	a0 91 82 00 	lds	r26, 0x0082
    13a6:	b0 91 83 00 	lds	r27, 0x0083
    13aa:	8a 30       	cpi	r24, 0x0A	; 10
    13ac:	91 05       	cpc	r25, r1
    13ae:	a1 05       	cpc	r26, r1
    13b0:	b1 05       	cpc	r27, r1
    13b2:	98 f3       	brcs	.-26     	; 0x139a <Alert+0x20>
	{
		/*wait 60 seconds*/
	}
	Reply(SUCCESS); /* send success flag to MC1 for synchronization and to notify that the Alert process finished*/
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	0e 94 98 08 	call	0x1130	; 0x1130 <Reply>
	BUZZER_off(); /*turn off the buzzer*/
    13ba:	0e 94 c6 05 	call	0xb8c	; 0xb8c <BUZZER_off>
	Timer_deInit(TIMER_1); /* stop the timer*/
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <Timer_deInit>
	overflow=0; /* clear the overflow flag*/
    13c4:	10 92 80 00 	sts	0x0080, r1
    13c8:	10 92 81 00 	sts	0x0081, r1
    13cc:	10 92 82 00 	sts	0x0082, r1
    13d0:	10 92 83 00 	sts	0x0083, r1
}
    13d4:	cf 91       	pop	r28
    13d6:	df 91       	pop	r29
    13d8:	08 95       	ret

000013da <Timer_Callback>:

void Timer_Callback(void)
{
    13da:	df 93       	push	r29
    13dc:	cf 93       	push	r28
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62
	/*the call back function of the timer*/
	overflow++; /*increase the overflow flag*/
    13e2:	80 91 80 00 	lds	r24, 0x0080
    13e6:	90 91 81 00 	lds	r25, 0x0081
    13ea:	a0 91 82 00 	lds	r26, 0x0082
    13ee:	b0 91 83 00 	lds	r27, 0x0083
    13f2:	01 96       	adiw	r24, 0x01	; 1
    13f4:	a1 1d       	adc	r26, r1
    13f6:	b1 1d       	adc	r27, r1
    13f8:	80 93 80 00 	sts	0x0080, r24
    13fc:	90 93 81 00 	sts	0x0081, r25
    1400:	a0 93 82 00 	sts	0x0082, r26
    1404:	b0 93 83 00 	sts	0x0083, r27
}
    1408:	cf 91       	pop	r28
    140a:	df 91       	pop	r29
    140c:	08 95       	ret

0000140e <main>:

int main (void)
{
    140e:	df 93       	push	r29
    1410:	cf 93       	push	r28
    1412:	cd b7       	in	r28, 0x3d	; 61
    1414:	de b7       	in	r29, 0x3e	; 62
    1416:	a6 97       	sbiw	r28, 0x26	; 38
    1418:	0f b6       	in	r0, 0x3f	; 63
    141a:	f8 94       	cli
    141c:	de bf       	out	0x3e, r29	; 62
    141e:	0f be       	out	0x3f, r0	; 63
    1420:	cd bf       	out	0x3d, r28	; 61
	UartConfig UartSettings = {NO_PARITY,9600,SINGLE,EIGHT_BITS}; /*setting up the UART configuration structure*/
    1422:	9e 01       	movw	r18, r28
    1424:	21 5f       	subi	r18, 0xF1	; 241
    1426:	3f 4f       	sbci	r19, 0xFF	; 255
    1428:	3e 8f       	std	Y+30, r19	; 0x1e
    142a:	2d 8f       	std	Y+29, r18	; 0x1d
    142c:	86 e7       	ldi	r24, 0x76	; 118
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	98 a3       	std	Y+32, r25	; 0x20
    1432:	8f 8f       	std	Y+31, r24	; 0x1f
    1434:	95 e0       	ldi	r25, 0x05	; 5
    1436:	99 a3       	std	Y+33, r25	; 0x21
    1438:	ef 8d       	ldd	r30, Y+31	; 0x1f
    143a:	f8 a1       	ldd	r31, Y+32	; 0x20
    143c:	00 80       	ld	r0, Z
    143e:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1440:	38 a1       	ldd	r19, Y+32	; 0x20
    1442:	2f 5f       	subi	r18, 0xFF	; 255
    1444:	3f 4f       	sbci	r19, 0xFF	; 255
    1446:	38 a3       	std	Y+32, r19	; 0x20
    1448:	2f 8f       	std	Y+31, r18	; 0x1f
    144a:	ed 8d       	ldd	r30, Y+29	; 0x1d
    144c:	fe 8d       	ldd	r31, Y+30	; 0x1e
    144e:	00 82       	st	Z, r0
    1450:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1452:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1454:	2f 5f       	subi	r18, 0xFF	; 255
    1456:	3f 4f       	sbci	r19, 0xFF	; 255
    1458:	3e 8f       	std	Y+30, r19	; 0x1e
    145a:	2d 8f       	std	Y+29, r18	; 0x1d
    145c:	39 a1       	ldd	r19, Y+33	; 0x21
    145e:	31 50       	subi	r19, 0x01	; 1
    1460:	39 a3       	std	Y+33, r19	; 0x21
    1462:	89 a1       	ldd	r24, Y+33	; 0x21
    1464:	88 23       	and	r24, r24
    1466:	41 f7       	brne	.-48     	; 0x1438 <main+0x2a>
	TwiConfig I2Csettings = {400000,0}; /*setting up the I2C configuration structure*/
    1468:	fe 01       	movw	r30, r28
    146a:	74 96       	adiw	r30, 0x14	; 20
    146c:	fb a3       	std	Y+35, r31	; 0x23
    146e:	ea a3       	std	Y+34, r30	; 0x22
    1470:	21 e7       	ldi	r18, 0x71	; 113
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	3d a3       	std	Y+37, r19	; 0x25
    1476:	2c a3       	std	Y+36, r18	; 0x24
    1478:	35 e0       	ldi	r19, 0x05	; 5
    147a:	3e a3       	std	Y+38, r19	; 0x26
    147c:	ec a1       	ldd	r30, Y+36	; 0x24
    147e:	fd a1       	ldd	r31, Y+37	; 0x25
    1480:	00 80       	ld	r0, Z
    1482:	2c a1       	ldd	r18, Y+36	; 0x24
    1484:	3d a1       	ldd	r19, Y+37	; 0x25
    1486:	2f 5f       	subi	r18, 0xFF	; 255
    1488:	3f 4f       	sbci	r19, 0xFF	; 255
    148a:	3d a3       	std	Y+37, r19	; 0x25
    148c:	2c a3       	std	Y+36, r18	; 0x24
    148e:	ea a1       	ldd	r30, Y+34	; 0x22
    1490:	fb a1       	ldd	r31, Y+35	; 0x23
    1492:	00 82       	st	Z, r0
    1494:	2a a1       	ldd	r18, Y+34	; 0x22
    1496:	3b a1       	ldd	r19, Y+35	; 0x23
    1498:	2f 5f       	subi	r18, 0xFF	; 255
    149a:	3f 4f       	sbci	r19, 0xFF	; 255
    149c:	3b a3       	std	Y+35, r19	; 0x23
    149e:	2a a3       	std	Y+34, r18	; 0x22
    14a0:	3e a1       	ldd	r19, Y+38	; 0x26
    14a2:	31 50       	subi	r19, 0x01	; 1
    14a4:	3e a3       	std	Y+38, r19	; 0x26
    14a6:	8e a1       	ldd	r24, Y+38	; 0x26
    14a8:	88 23       	and	r24, r24
    14aa:	41 f7       	brne	.-48     	; 0x147c <main+0x6e>
	SREG = (1<<7); /*enable global interrupt*/
    14ac:	ef e5       	ldi	r30, 0x5F	; 95
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 e8       	ldi	r24, 0x80	; 128
    14b2:	80 83       	st	Z, r24
	Timer_setCallBack(TIMER_1, Timer_Callback); /*setting the call back function of timer 1*/
    14b4:	2d ee       	ldi	r18, 0xED	; 237
    14b6:	39 e0       	ldi	r19, 0x09	; 9
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	b9 01       	movw	r22, r18
    14bc:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <Timer_setCallBack>
	UART_init(&UartSettings); /*initializing the uart and passing the config struct. to it*/
    14c0:	ce 01       	movw	r24, r28
    14c2:	0f 96       	adiw	r24, 0x0f	; 15
    14c4:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <UART_init>
	EEPROM_init(&I2Csettings) ; /*initializing the EEPROM and passing the I2C config struct. to it*/
    14c8:	ce 01       	movw	r24, r28
    14ca:	44 96       	adiw	r24, 0x14	; 20
    14cc:	0e 94 d4 05 	call	0xba8	; 0xba8 <EEPROM_init>
	MOTOR_init(); /*initializing the motor*/
    14d0:	0e 94 25 0b 	call	0x164a	; 0x164a <MOTOR_init>
	BUZZER_init(); /*initializing the buzzer*/
    14d4:	0e 94 a3 05 	call	0xb46	; 0xb46 <BUZZER_init>
	switch (Check_Flag())
    14d8:	0e 94 72 08 	call	0x10e4	; 0x10e4 <Check_Flag>
    14dc:	e8 2f       	mov	r30, r24
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	fc 8f       	std	Y+28, r31	; 0x1c
    14e2:	eb 8f       	std	Y+27, r30	; 0x1b
    14e4:	2b 8d       	ldd	r18, Y+27	; 0x1b
    14e6:	3c 8d       	ldd	r19, Y+28	; 0x1c
    14e8:	21 15       	cp	r18, r1
    14ea:	31 05       	cpc	r19, r1
    14ec:	31 f0       	breq	.+12     	; 0x14fa <main+0xec>
    14ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14f2:	81 30       	cpi	r24, 0x01	; 1
    14f4:	91 05       	cpc	r25, r1
    14f6:	61 f0       	breq	.+24     	; 0x1510 <main+0x102>
    14f8:	84 c0       	rjmp	.+264    	; 0x1602 <main+0x1f4>
	{
	/*
	 * checking if there is a stored password in the EEPROM or not by checking the flag status
	 */
	case FAIL: /*if there is no password (first time for the user to use the application) */
		Reply(FAIL); /*send FAIL flag to MC1 to make it decide the next step*/
    14fa:	80 e0       	ldi	r24, 0x00	; 0
    14fc:	0e 94 98 08 	call	0x1130	; 0x1130 <Reply>
		Receive_Password(); /*receiving the new password from MC1*/
    1500:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <Receive_Password>
		Save_Password(); /*saving the password to the EEPROM and updating flag status*/
    1504:	0e 94 2f 09 	call	0x125e	; 0x125e <Save_Password>
		Reply(SUCCESS); /*send SUCCESS flag to MC1 for synchronization*/
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	0e 94 98 08 	call	0x1130	; 0x1130 <Reply>
    150e:	79 c0       	rjmp	.+242    	; 0x1602 <main+0x1f4>
		break;
	case SUCCESS: /*if there is a stored password*/
		Reply(SUCCESS); /*send SUCCESS flag to MC1 to make it decide the next step*/
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	0e 94 98 08 	call	0x1130	; 0x1130 <Reply>
		Read_Stored_Password(); /*read the stored password from the EEPROM*/
    1516:	0e 94 a5 08 	call	0x114a	; 0x114a <Read_Stored_Password>
    151a:	80 e0       	ldi	r24, 0x00	; 0
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	a8 ec       	ldi	r26, 0xC8	; 200
    1520:	b2 e4       	ldi	r27, 0x42	; 66
    1522:	8b 87       	std	Y+11, r24	; 0x0b
    1524:	9c 87       	std	Y+12, r25	; 0x0c
    1526:	ad 87       	std	Y+13, r26	; 0x0d
    1528:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    152a:	6b 85       	ldd	r22, Y+11	; 0x0b
    152c:	7c 85       	ldd	r23, Y+12	; 0x0c
    152e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1530:	9e 85       	ldd	r25, Y+14	; 0x0e
    1532:	20 e0       	ldi	r18, 0x00	; 0
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	4a ef       	ldi	r20, 0xFA	; 250
    1538:	54 e4       	ldi	r21, 0x44	; 68
    153a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    153e:	dc 01       	movw	r26, r24
    1540:	cb 01       	movw	r24, r22
    1542:	8f 83       	std	Y+7, r24	; 0x07
    1544:	98 87       	std	Y+8, r25	; 0x08
    1546:	a9 87       	std	Y+9, r26	; 0x09
    1548:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    154a:	6f 81       	ldd	r22, Y+7	; 0x07
    154c:	78 85       	ldd	r23, Y+8	; 0x08
    154e:	89 85       	ldd	r24, Y+9	; 0x09
    1550:	9a 85       	ldd	r25, Y+10	; 0x0a
    1552:	20 e0       	ldi	r18, 0x00	; 0
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	40 e8       	ldi	r20, 0x80	; 128
    1558:	5f e3       	ldi	r21, 0x3F	; 63
    155a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    155e:	88 23       	and	r24, r24
    1560:	2c f4       	brge	.+10     	; 0x156c <main+0x15e>
		__ticks = 1;
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	9e 83       	std	Y+6, r25	; 0x06
    1568:	8d 83       	std	Y+5, r24	; 0x05
    156a:	3f c0       	rjmp	.+126    	; 0x15ea <main+0x1dc>
	else if (__tmp > 65535)
    156c:	6f 81       	ldd	r22, Y+7	; 0x07
    156e:	78 85       	ldd	r23, Y+8	; 0x08
    1570:	89 85       	ldd	r24, Y+9	; 0x09
    1572:	9a 85       	ldd	r25, Y+10	; 0x0a
    1574:	20 e0       	ldi	r18, 0x00	; 0
    1576:	3f ef       	ldi	r19, 0xFF	; 255
    1578:	4f e7       	ldi	r20, 0x7F	; 127
    157a:	57 e4       	ldi	r21, 0x47	; 71
    157c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1580:	18 16       	cp	r1, r24
    1582:	4c f5       	brge	.+82     	; 0x15d6 <main+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1584:	6b 85       	ldd	r22, Y+11	; 0x0b
    1586:	7c 85       	ldd	r23, Y+12	; 0x0c
    1588:	8d 85       	ldd	r24, Y+13	; 0x0d
    158a:	9e 85       	ldd	r25, Y+14	; 0x0e
    158c:	20 e0       	ldi	r18, 0x00	; 0
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	40 e2       	ldi	r20, 0x20	; 32
    1592:	51 e4       	ldi	r21, 0x41	; 65
    1594:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1598:	dc 01       	movw	r26, r24
    159a:	cb 01       	movw	r24, r22
    159c:	bc 01       	movw	r22, r24
    159e:	cd 01       	movw	r24, r26
    15a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15a4:	dc 01       	movw	r26, r24
    15a6:	cb 01       	movw	r24, r22
    15a8:	9e 83       	std	Y+6, r25	; 0x06
    15aa:	8d 83       	std	Y+5, r24	; 0x05
    15ac:	0f c0       	rjmp	.+30     	; 0x15cc <main+0x1be>
    15ae:	88 ec       	ldi	r24, 0xC8	; 200
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	9c 83       	std	Y+4, r25	; 0x04
    15b4:	8b 83       	std	Y+3, r24	; 0x03
    15b6:	8b 81       	ldd	r24, Y+3	; 0x03
    15b8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ba:	01 97       	sbiw	r24, 0x01	; 1
    15bc:	f1 f7       	brne	.-4      	; 0x15ba <main+0x1ac>
    15be:	9c 83       	std	Y+4, r25	; 0x04
    15c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15c2:	8d 81       	ldd	r24, Y+5	; 0x05
    15c4:	9e 81       	ldd	r25, Y+6	; 0x06
    15c6:	01 97       	sbiw	r24, 0x01	; 1
    15c8:	9e 83       	std	Y+6, r25	; 0x06
    15ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15cc:	8d 81       	ldd	r24, Y+5	; 0x05
    15ce:	9e 81       	ldd	r25, Y+6	; 0x06
    15d0:	00 97       	sbiw	r24, 0x00	; 0
    15d2:	69 f7       	brne	.-38     	; 0x15ae <main+0x1a0>
    15d4:	14 c0       	rjmp	.+40     	; 0x15fe <main+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15d6:	6f 81       	ldd	r22, Y+7	; 0x07
    15d8:	78 85       	ldd	r23, Y+8	; 0x08
    15da:	89 85       	ldd	r24, Y+9	; 0x09
    15dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    15de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e2:	dc 01       	movw	r26, r24
    15e4:	cb 01       	movw	r24, r22
    15e6:	9e 83       	std	Y+6, r25	; 0x06
    15e8:	8d 83       	std	Y+5, r24	; 0x05
    15ea:	8d 81       	ldd	r24, Y+5	; 0x05
    15ec:	9e 81       	ldd	r25, Y+6	; 0x06
    15ee:	9a 83       	std	Y+2, r25	; 0x02
    15f0:	89 83       	std	Y+1, r24	; 0x01
    15f2:	89 81       	ldd	r24, Y+1	; 0x01
    15f4:	9a 81       	ldd	r25, Y+2	; 0x02
    15f6:	01 97       	sbiw	r24, 0x01	; 1
    15f8:	f1 f7       	brne	.-4      	; 0x15f6 <main+0x1e8>
    15fa:	9a 83       	std	Y+2, r25	; 0x02
    15fc:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100); /*delay for synchronization*/
		Send_Password(); /*sending password to MC1 to perform validation processes locally*/
    15fe:	0e 94 b4 08 	call	0x1168	; 0x1168 <Send_Password>
		break;
	}

	while(1)
	{
		switch(Receive_Command()) /*wait for command from MC1 to serve*/
    1602:	0e 94 4e 09 	call	0x129c	; 0x129c <Receive_Command>
    1606:	e8 2f       	mov	r30, r24
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	fa 8f       	std	Y+26, r31	; 0x1a
    160c:	e9 8f       	std	Y+25, r30	; 0x19
    160e:	29 8d       	ldd	r18, Y+25	; 0x19
    1610:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1612:	23 30       	cpi	r18, 0x03	; 3
    1614:	31 05       	cpc	r19, r1
    1616:	b1 f0       	breq	.+44     	; 0x1644 <main+0x236>
    1618:	89 8d       	ldd	r24, Y+25	; 0x19
    161a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    161c:	84 30       	cpi	r24, 0x04	; 4
    161e:	91 05       	cpc	r25, r1
    1620:	31 f0       	breq	.+12     	; 0x162e <main+0x220>
    1622:	e9 8d       	ldd	r30, Y+25	; 0x19
    1624:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1626:	e2 30       	cpi	r30, 0x02	; 2
    1628:	f1 05       	cpc	r31, r1
    162a:	49 f0       	breq	.+18     	; 0x163e <main+0x230>
    162c:	ea cf       	rjmp	.-44     	; 0x1602 <main+0x1f4>
		{
		case CREATE_PASSWORD: /*received command is CREATE_PASSWORD*/
			Receive_Password(); /*receive new password from MC1*/
    162e:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <Receive_Password>
			Save_Password(); /*save the new password to the eeprom*/
    1632:	0e 94 2f 09 	call	0x125e	; 0x125e <Save_Password>
			Reply(SUCCESS); /*send SUCCESS flag to MC1 to make it decide the next step and for synchronization*/
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	0e 94 98 08 	call	0x1130	; 0x1130 <Reply>
    163c:	e2 cf       	rjmp	.-60     	; 0x1602 <main+0x1f4>
			break;
		case OPEN_DOOR: /*received command is OPEN_DOOR*/
			Door_Sequence(); /* do the Door sequence */
    163e:	0e 94 57 09 	call	0x12ae	; 0x12ae <Door_Sequence>
    1642:	df cf       	rjmp	.-66     	; 0x1602 <main+0x1f4>
			break;
		case ALERT: /*received command is ALERT*/
			Alert(); /* do the Alert sequence*/
    1644:	0e 94 bd 09 	call	0x137a	; 0x137a <Alert>
    1648:	dc cf       	rjmp	.-72     	; 0x1602 <main+0x1f4>

0000164a <MOTOR_init>:


#include "motor.h"

void MOTOR_init(void)
{
    164a:	df 93       	push	r29
    164c:	cf 93       	push	r28
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(INPUT1_DDR,INPUT1);
    1652:	a7 e3       	ldi	r26, 0x37	; 55
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	e7 e3       	ldi	r30, 0x37	; 55
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	81 60       	ori	r24, 0x01	; 1
    165e:	8c 93       	st	X, r24
	SET_BIT(INPUT2_DDR,INPUT2);
    1660:	a7 e3       	ldi	r26, 0x37	; 55
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	e7 e3       	ldi	r30, 0x37	; 55
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	82 60       	ori	r24, 0x02	; 2
    166c:	8c 93       	st	X, r24
	SET_BIT(ENABLE_DDR,ENABLE);
    166e:	a7 e3       	ldi	r26, 0x37	; 55
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	e7 e3       	ldi	r30, 0x37	; 55
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	84 60       	ori	r24, 0x04	; 4
    167a:	8c 93       	st	X, r24
	CLEAR_BIT(INPUT1_PORT,INPUT1);
    167c:	a8 e3       	ldi	r26, 0x38	; 56
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	e8 e3       	ldi	r30, 0x38	; 56
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	8e 7f       	andi	r24, 0xFE	; 254
    1688:	8c 93       	st	X, r24
	CLEAR_BIT(INPUT2_PORT,INPUT2);
    168a:	a8 e3       	ldi	r26, 0x38	; 56
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	e8 e3       	ldi	r30, 0x38	; 56
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	8d 7f       	andi	r24, 0xFD	; 253
    1696:	8c 93       	st	X, r24
	CLEAR_BIT(ENABLE_PORT,ENABLE);
    1698:	a8 e3       	ldi	r26, 0x38	; 56
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	e8 e3       	ldi	r30, 0x38	; 56
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	8b 7f       	andi	r24, 0xFB	; 251
    16a4:	8c 93       	st	X, r24
}
    16a6:	cf 91       	pop	r28
    16a8:	df 91       	pop	r29
    16aa:	08 95       	ret

000016ac <MOTOR_runCW>:

void MOTOR_runCW(void)
{
    16ac:	df 93       	push	r29
    16ae:	cf 93       	push	r28
    16b0:	cd b7       	in	r28, 0x3d	; 61
    16b2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(INPUT1_PORT,INPUT1);
    16b4:	a8 e3       	ldi	r26, 0x38	; 56
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	e8 e3       	ldi	r30, 0x38	; 56
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	81 60       	ori	r24, 0x01	; 1
    16c0:	8c 93       	st	X, r24
	CLEAR_BIT(INPUT2_PORT,INPUT2);
    16c2:	a8 e3       	ldi	r26, 0x38	; 56
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	e8 e3       	ldi	r30, 0x38	; 56
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	8d 7f       	andi	r24, 0xFD	; 253
    16ce:	8c 93       	st	X, r24
	SET_BIT(ENABLE_PORT,ENABLE);
    16d0:	a8 e3       	ldi	r26, 0x38	; 56
    16d2:	b0 e0       	ldi	r27, 0x00	; 0
    16d4:	e8 e3       	ldi	r30, 0x38	; 56
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	84 60       	ori	r24, 0x04	; 4
    16dc:	8c 93       	st	X, r24
}
    16de:	cf 91       	pop	r28
    16e0:	df 91       	pop	r29
    16e2:	08 95       	ret

000016e4 <MOTOR_runACW>:

void MOTOR_runACW(void)
{
    16e4:	df 93       	push	r29
    16e6:	cf 93       	push	r28
    16e8:	cd b7       	in	r28, 0x3d	; 61
    16ea:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(INPUT1_PORT,INPUT1);
    16ec:	a8 e3       	ldi	r26, 0x38	; 56
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	e8 e3       	ldi	r30, 0x38	; 56
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	80 81       	ld	r24, Z
    16f6:	8e 7f       	andi	r24, 0xFE	; 254
    16f8:	8c 93       	st	X, r24
	SET_BIT(INPUT2_PORT,INPUT2);
    16fa:	a8 e3       	ldi	r26, 0x38	; 56
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	e8 e3       	ldi	r30, 0x38	; 56
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	82 60       	ori	r24, 0x02	; 2
    1706:	8c 93       	st	X, r24
	SET_BIT(ENABLE_PORT,ENABLE);
    1708:	a8 e3       	ldi	r26, 0x38	; 56
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	e8 e3       	ldi	r30, 0x38	; 56
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	84 60       	ori	r24, 0x04	; 4
    1714:	8c 93       	st	X, r24
}
    1716:	cf 91       	pop	r28
    1718:	df 91       	pop	r29
    171a:	08 95       	ret

0000171c <MOTOR_reverse>:

void MOTOR_reverse(void)
{
    171c:	df 93       	push	r29
    171e:	cf 93       	push	r28
    1720:	cd b7       	in	r28, 0x3d	; 61
    1722:	de b7       	in	r29, 0x3e	; 62
	TOGGLE_BIT(INPUT1_PORT,INPUT1);
    1724:	a8 e3       	ldi	r26, 0x38	; 56
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	e8 e3       	ldi	r30, 0x38	; 56
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	90 81       	ld	r25, Z
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	89 27       	eor	r24, r25
    1732:	8c 93       	st	X, r24
	TOGGLE_BIT(INPUT2_PORT,INPUT2);
    1734:	a8 e3       	ldi	r26, 0x38	; 56
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	e8 e3       	ldi	r30, 0x38	; 56
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	90 81       	ld	r25, Z
    173e:	82 e0       	ldi	r24, 0x02	; 2
    1740:	89 27       	eor	r24, r25
    1742:	8c 93       	st	X, r24
	SET_BIT(ENABLE_PORT,ENABLE);
    1744:	a8 e3       	ldi	r26, 0x38	; 56
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	e8 e3       	ldi	r30, 0x38	; 56
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	84 60       	ori	r24, 0x04	; 4
    1750:	8c 93       	st	X, r24
}
    1752:	cf 91       	pop	r28
    1754:	df 91       	pop	r29
    1756:	08 95       	ret

00001758 <MOTOR_stop>:

void MOTOR_stop(void)
{
    1758:	df 93       	push	r29
    175a:	cf 93       	push	r28
    175c:	cd b7       	in	r28, 0x3d	; 61
    175e:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(INPUT1_PORT,INPUT1);
    1760:	a8 e3       	ldi	r26, 0x38	; 56
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	e8 e3       	ldi	r30, 0x38	; 56
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	8e 7f       	andi	r24, 0xFE	; 254
    176c:	8c 93       	st	X, r24
	CLEAR_BIT(INPUT2_PORT,INPUT2);
    176e:	a8 e3       	ldi	r26, 0x38	; 56
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	e8 e3       	ldi	r30, 0x38	; 56
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	8d 7f       	andi	r24, 0xFD	; 253
    177a:	8c 93       	st	X, r24
	CLEAR_BIT(ENABLE_PORT,ENABLE);
    177c:	a8 e3       	ldi	r26, 0x38	; 56
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	e8 e3       	ldi	r30, 0x38	; 56
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	8b 7f       	andi	r24, 0xFB	; 251
    1788:	8c 93       	st	X, r24
}
    178a:	cf 91       	pop	r28
    178c:	df 91       	pop	r29
    178e:	08 95       	ret

00001790 <__vector_9>:
static volatile void (*g_timer1CompBCallBackPtr)(void) = NULL;
static volatile void (*g_timer2CallBackPtr)(void) = NULL;


ISR (TIMER0_OVF_vect) /*timer 0 overflow mode interrupt*/
{
    1790:	1f 92       	push	r1
    1792:	0f 92       	push	r0
    1794:	0f b6       	in	r0, 0x3f	; 63
    1796:	0f 92       	push	r0
    1798:	11 24       	eor	r1, r1
    179a:	2f 93       	push	r18
    179c:	3f 93       	push	r19
    179e:	4f 93       	push	r20
    17a0:	5f 93       	push	r21
    17a2:	6f 93       	push	r22
    17a4:	7f 93       	push	r23
    17a6:	8f 93       	push	r24
    17a8:	9f 93       	push	r25
    17aa:	af 93       	push	r26
    17ac:	bf 93       	push	r27
    17ae:	ef 93       	push	r30
    17b0:	ff 93       	push	r31
    17b2:	df 93       	push	r29
    17b4:	cf 93       	push	r28
    17b6:	cd b7       	in	r28, 0x3d	; 61
    17b8:	de b7       	in	r29, 0x3e	; 62
	if(g_timer0CallBackPtr != NULL) /*checking if the pointer to function is set before calling it*/
    17ba:	80 91 84 00 	lds	r24, 0x0084
    17be:	90 91 85 00 	lds	r25, 0x0085
    17c2:	00 97       	sbiw	r24, 0x00	; 0
    17c4:	29 f0       	breq	.+10     	; 0x17d0 <__vector_9+0x40>
	{
		/* calling the Call Back function in the application when receiving interrupt */
		g_timer0CallBackPtr();
    17c6:	e0 91 84 00 	lds	r30, 0x0084
    17ca:	f0 91 85 00 	lds	r31, 0x0085
    17ce:	09 95       	icall
	}
}
    17d0:	cf 91       	pop	r28
    17d2:	df 91       	pop	r29
    17d4:	ff 91       	pop	r31
    17d6:	ef 91       	pop	r30
    17d8:	bf 91       	pop	r27
    17da:	af 91       	pop	r26
    17dc:	9f 91       	pop	r25
    17de:	8f 91       	pop	r24
    17e0:	7f 91       	pop	r23
    17e2:	6f 91       	pop	r22
    17e4:	5f 91       	pop	r21
    17e6:	4f 91       	pop	r20
    17e8:	3f 91       	pop	r19
    17ea:	2f 91       	pop	r18
    17ec:	0f 90       	pop	r0
    17ee:	0f be       	out	0x3f, r0	; 63
    17f0:	0f 90       	pop	r0
    17f2:	1f 90       	pop	r1
    17f4:	18 95       	reti

000017f6 <__vector_19>:

ISR (TIMER0_COMP_vect) /*timer 0 compare mode interrupt*/
{
    17f6:	1f 92       	push	r1
    17f8:	0f 92       	push	r0
    17fa:	0f b6       	in	r0, 0x3f	; 63
    17fc:	0f 92       	push	r0
    17fe:	11 24       	eor	r1, r1
    1800:	2f 93       	push	r18
    1802:	3f 93       	push	r19
    1804:	4f 93       	push	r20
    1806:	5f 93       	push	r21
    1808:	6f 93       	push	r22
    180a:	7f 93       	push	r23
    180c:	8f 93       	push	r24
    180e:	9f 93       	push	r25
    1810:	af 93       	push	r26
    1812:	bf 93       	push	r27
    1814:	ef 93       	push	r30
    1816:	ff 93       	push	r31
    1818:	df 93       	push	r29
    181a:	cf 93       	push	r28
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62
	if(g_timer0CallBackPtr != NULL)/*checking if the pointer to function is set before calling it*/
    1820:	80 91 84 00 	lds	r24, 0x0084
    1824:	90 91 85 00 	lds	r25, 0x0085
    1828:	00 97       	sbiw	r24, 0x00	; 0
    182a:	29 f0       	breq	.+10     	; 0x1836 <__vector_19+0x40>
	{
		/* calling the Call Back function in the application when receiving interrupt */
		g_timer0CallBackPtr();
    182c:	e0 91 84 00 	lds	r30, 0x0084
    1830:	f0 91 85 00 	lds	r31, 0x0085
    1834:	09 95       	icall
	}
}
    1836:	cf 91       	pop	r28
    1838:	df 91       	pop	r29
    183a:	ff 91       	pop	r31
    183c:	ef 91       	pop	r30
    183e:	bf 91       	pop	r27
    1840:	af 91       	pop	r26
    1842:	9f 91       	pop	r25
    1844:	8f 91       	pop	r24
    1846:	7f 91       	pop	r23
    1848:	6f 91       	pop	r22
    184a:	5f 91       	pop	r21
    184c:	4f 91       	pop	r20
    184e:	3f 91       	pop	r19
    1850:	2f 91       	pop	r18
    1852:	0f 90       	pop	r0
    1854:	0f be       	out	0x3f, r0	; 63
    1856:	0f 90       	pop	r0
    1858:	1f 90       	pop	r1
    185a:	18 95       	reti

0000185c <__vector_8>:

ISR (TIMER1_OVF_vect) /*timer 1 overflow mode interrupt*/
{
    185c:	1f 92       	push	r1
    185e:	0f 92       	push	r0
    1860:	0f b6       	in	r0, 0x3f	; 63
    1862:	0f 92       	push	r0
    1864:	11 24       	eor	r1, r1
    1866:	2f 93       	push	r18
    1868:	3f 93       	push	r19
    186a:	4f 93       	push	r20
    186c:	5f 93       	push	r21
    186e:	6f 93       	push	r22
    1870:	7f 93       	push	r23
    1872:	8f 93       	push	r24
    1874:	9f 93       	push	r25
    1876:	af 93       	push	r26
    1878:	bf 93       	push	r27
    187a:	ef 93       	push	r30
    187c:	ff 93       	push	r31
    187e:	df 93       	push	r29
    1880:	cf 93       	push	r28
    1882:	cd b7       	in	r28, 0x3d	; 61
    1884:	de b7       	in	r29, 0x3e	; 62
	if(g_timer1CallBackPtr != NULL)/*checking if the pointer to function is set before calling it*/
    1886:	80 91 86 00 	lds	r24, 0x0086
    188a:	90 91 87 00 	lds	r25, 0x0087
    188e:	00 97       	sbiw	r24, 0x00	; 0
    1890:	29 f0       	breq	.+10     	; 0x189c <__vector_8+0x40>
	{
		/* calling the Call Back function in the application when receiving interrupt */
		g_timer1CallBackPtr();
    1892:	e0 91 86 00 	lds	r30, 0x0086
    1896:	f0 91 87 00 	lds	r31, 0x0087
    189a:	09 95       	icall
	}
}
    189c:	cf 91       	pop	r28
    189e:	df 91       	pop	r29
    18a0:	ff 91       	pop	r31
    18a2:	ef 91       	pop	r30
    18a4:	bf 91       	pop	r27
    18a6:	af 91       	pop	r26
    18a8:	9f 91       	pop	r25
    18aa:	8f 91       	pop	r24
    18ac:	7f 91       	pop	r23
    18ae:	6f 91       	pop	r22
    18b0:	5f 91       	pop	r21
    18b2:	4f 91       	pop	r20
    18b4:	3f 91       	pop	r19
    18b6:	2f 91       	pop	r18
    18b8:	0f 90       	pop	r0
    18ba:	0f be       	out	0x3f, r0	; 63
    18bc:	0f 90       	pop	r0
    18be:	1f 90       	pop	r1
    18c0:	18 95       	reti

000018c2 <__vector_6>:

ISR (TIMER1_COMPA_vect) /*timer 1 compare mode channel a interrupt*/
{
    18c2:	1f 92       	push	r1
    18c4:	0f 92       	push	r0
    18c6:	0f b6       	in	r0, 0x3f	; 63
    18c8:	0f 92       	push	r0
    18ca:	11 24       	eor	r1, r1
    18cc:	2f 93       	push	r18
    18ce:	3f 93       	push	r19
    18d0:	4f 93       	push	r20
    18d2:	5f 93       	push	r21
    18d4:	6f 93       	push	r22
    18d6:	7f 93       	push	r23
    18d8:	8f 93       	push	r24
    18da:	9f 93       	push	r25
    18dc:	af 93       	push	r26
    18de:	bf 93       	push	r27
    18e0:	ef 93       	push	r30
    18e2:	ff 93       	push	r31
    18e4:	df 93       	push	r29
    18e6:	cf 93       	push	r28
    18e8:	cd b7       	in	r28, 0x3d	; 61
    18ea:	de b7       	in	r29, 0x3e	; 62
	if(g_timer1CallBackPtr != NULL)/*checking if the pointer to function is set before calling it*/
    18ec:	80 91 86 00 	lds	r24, 0x0086
    18f0:	90 91 87 00 	lds	r25, 0x0087
    18f4:	00 97       	sbiw	r24, 0x00	; 0
    18f6:	29 f0       	breq	.+10     	; 0x1902 <__vector_6+0x40>
	{
		/* calling the Call Back function in the application when receiving interrupt */
		g_timer1CallBackPtr();
    18f8:	e0 91 86 00 	lds	r30, 0x0086
    18fc:	f0 91 87 00 	lds	r31, 0x0087
    1900:	09 95       	icall
	}
}
    1902:	cf 91       	pop	r28
    1904:	df 91       	pop	r29
    1906:	ff 91       	pop	r31
    1908:	ef 91       	pop	r30
    190a:	bf 91       	pop	r27
    190c:	af 91       	pop	r26
    190e:	9f 91       	pop	r25
    1910:	8f 91       	pop	r24
    1912:	7f 91       	pop	r23
    1914:	6f 91       	pop	r22
    1916:	5f 91       	pop	r21
    1918:	4f 91       	pop	r20
    191a:	3f 91       	pop	r19
    191c:	2f 91       	pop	r18
    191e:	0f 90       	pop	r0
    1920:	0f be       	out	0x3f, r0	; 63
    1922:	0f 90       	pop	r0
    1924:	1f 90       	pop	r1
    1926:	18 95       	reti

00001928 <__vector_7>:

ISR (TIMER1_COMPB_vect) /*timer 1 compare mode channel b interrupt*/
{
    1928:	1f 92       	push	r1
    192a:	0f 92       	push	r0
    192c:	0f b6       	in	r0, 0x3f	; 63
    192e:	0f 92       	push	r0
    1930:	11 24       	eor	r1, r1
    1932:	2f 93       	push	r18
    1934:	3f 93       	push	r19
    1936:	4f 93       	push	r20
    1938:	5f 93       	push	r21
    193a:	6f 93       	push	r22
    193c:	7f 93       	push	r23
    193e:	8f 93       	push	r24
    1940:	9f 93       	push	r25
    1942:	af 93       	push	r26
    1944:	bf 93       	push	r27
    1946:	ef 93       	push	r30
    1948:	ff 93       	push	r31
    194a:	df 93       	push	r29
    194c:	cf 93       	push	r28
    194e:	cd b7       	in	r28, 0x3d	; 61
    1950:	de b7       	in	r29, 0x3e	; 62
	if(g_timer1CompBCallBackPtr != NULL)/*checking if the pointer to function is set before calling it*/
    1952:	80 91 88 00 	lds	r24, 0x0088
    1956:	90 91 89 00 	lds	r25, 0x0089
    195a:	00 97       	sbiw	r24, 0x00	; 0
    195c:	29 f0       	breq	.+10     	; 0x1968 <__vector_7+0x40>
	{
		/* calling the Call Back function in the application when receiving interrupt */
		g_timer1CompBCallBackPtr();
    195e:	e0 91 88 00 	lds	r30, 0x0088
    1962:	f0 91 89 00 	lds	r31, 0x0089
    1966:	09 95       	icall
	}
}
    1968:	cf 91       	pop	r28
    196a:	df 91       	pop	r29
    196c:	ff 91       	pop	r31
    196e:	ef 91       	pop	r30
    1970:	bf 91       	pop	r27
    1972:	af 91       	pop	r26
    1974:	9f 91       	pop	r25
    1976:	8f 91       	pop	r24
    1978:	7f 91       	pop	r23
    197a:	6f 91       	pop	r22
    197c:	5f 91       	pop	r21
    197e:	4f 91       	pop	r20
    1980:	3f 91       	pop	r19
    1982:	2f 91       	pop	r18
    1984:	0f 90       	pop	r0
    1986:	0f be       	out	0x3f, r0	; 63
    1988:	0f 90       	pop	r0
    198a:	1f 90       	pop	r1
    198c:	18 95       	reti

0000198e <__vector_4>:


ISR (TIMER2_OVF_vect) /*timer 2 overflow mode interrupt*/
{
    198e:	1f 92       	push	r1
    1990:	0f 92       	push	r0
    1992:	0f b6       	in	r0, 0x3f	; 63
    1994:	0f 92       	push	r0
    1996:	11 24       	eor	r1, r1
    1998:	2f 93       	push	r18
    199a:	3f 93       	push	r19
    199c:	4f 93       	push	r20
    199e:	5f 93       	push	r21
    19a0:	6f 93       	push	r22
    19a2:	7f 93       	push	r23
    19a4:	8f 93       	push	r24
    19a6:	9f 93       	push	r25
    19a8:	af 93       	push	r26
    19aa:	bf 93       	push	r27
    19ac:	ef 93       	push	r30
    19ae:	ff 93       	push	r31
    19b0:	df 93       	push	r29
    19b2:	cf 93       	push	r28
    19b4:	cd b7       	in	r28, 0x3d	; 61
    19b6:	de b7       	in	r29, 0x3e	; 62
	if(g_timer2CallBackPtr != NULL)/*checking if the pointer to function is set before calling it*/
    19b8:	80 91 8a 00 	lds	r24, 0x008A
    19bc:	90 91 8b 00 	lds	r25, 0x008B
    19c0:	00 97       	sbiw	r24, 0x00	; 0
    19c2:	29 f0       	breq	.+10     	; 0x19ce <__vector_4+0x40>
	{
		/* calling the Call Back function in the application when receiving interrupt */
		g_timer2CallBackPtr();
    19c4:	e0 91 8a 00 	lds	r30, 0x008A
    19c8:	f0 91 8b 00 	lds	r31, 0x008B
    19cc:	09 95       	icall
	}
}
    19ce:	cf 91       	pop	r28
    19d0:	df 91       	pop	r29
    19d2:	ff 91       	pop	r31
    19d4:	ef 91       	pop	r30
    19d6:	bf 91       	pop	r27
    19d8:	af 91       	pop	r26
    19da:	9f 91       	pop	r25
    19dc:	8f 91       	pop	r24
    19de:	7f 91       	pop	r23
    19e0:	6f 91       	pop	r22
    19e2:	5f 91       	pop	r21
    19e4:	4f 91       	pop	r20
    19e6:	3f 91       	pop	r19
    19e8:	2f 91       	pop	r18
    19ea:	0f 90       	pop	r0
    19ec:	0f be       	out	0x3f, r0	; 63
    19ee:	0f 90       	pop	r0
    19f0:	1f 90       	pop	r1
    19f2:	18 95       	reti

000019f4 <__vector_3>:

ISR (TIMER2_COMP_vect) /*timer 2 compare mode interrupt*/
{
    19f4:	1f 92       	push	r1
    19f6:	0f 92       	push	r0
    19f8:	0f b6       	in	r0, 0x3f	; 63
    19fa:	0f 92       	push	r0
    19fc:	11 24       	eor	r1, r1
    19fe:	2f 93       	push	r18
    1a00:	3f 93       	push	r19
    1a02:	4f 93       	push	r20
    1a04:	5f 93       	push	r21
    1a06:	6f 93       	push	r22
    1a08:	7f 93       	push	r23
    1a0a:	8f 93       	push	r24
    1a0c:	9f 93       	push	r25
    1a0e:	af 93       	push	r26
    1a10:	bf 93       	push	r27
    1a12:	ef 93       	push	r30
    1a14:	ff 93       	push	r31
    1a16:	df 93       	push	r29
    1a18:	cf 93       	push	r28
    1a1a:	cd b7       	in	r28, 0x3d	; 61
    1a1c:	de b7       	in	r29, 0x3e	; 62
	if(g_timer2CallBackPtr != NULL)/*checking if the pointer to function is set before calling it*/
    1a1e:	80 91 8a 00 	lds	r24, 0x008A
    1a22:	90 91 8b 00 	lds	r25, 0x008B
    1a26:	00 97       	sbiw	r24, 0x00	; 0
    1a28:	29 f0       	breq	.+10     	; 0x1a34 <__vector_3+0x40>
	{
		/* calling the Call Back function in the application when receiving interrupt */
		g_timer2CallBackPtr();
    1a2a:	e0 91 8a 00 	lds	r30, 0x008A
    1a2e:	f0 91 8b 00 	lds	r31, 0x008B
    1a32:	09 95       	icall
	}
}
    1a34:	cf 91       	pop	r28
    1a36:	df 91       	pop	r29
    1a38:	ff 91       	pop	r31
    1a3a:	ef 91       	pop	r30
    1a3c:	bf 91       	pop	r27
    1a3e:	af 91       	pop	r26
    1a40:	9f 91       	pop	r25
    1a42:	8f 91       	pop	r24
    1a44:	7f 91       	pop	r23
    1a46:	6f 91       	pop	r22
    1a48:	5f 91       	pop	r21
    1a4a:	4f 91       	pop	r20
    1a4c:	3f 91       	pop	r19
    1a4e:	2f 91       	pop	r18
    1a50:	0f 90       	pop	r0
    1a52:	0f be       	out	0x3f, r0	; 63
    1a54:	0f 90       	pop	r0
    1a56:	1f 90       	pop	r1
    1a58:	18 95       	reti

00001a5a <Timer_init>:



void Timer_init(const Timer_ConfigType *a_TimerConfig_Ptr)
{
    1a5a:	df 93       	push	r29
    1a5c:	cf 93       	push	r28
    1a5e:	00 d0       	rcall	.+0      	; 0x1a60 <Timer_init+0x6>
    1a60:	00 d0       	rcall	.+0      	; 0x1a62 <Timer_init+0x8>
    1a62:	cd b7       	in	r28, 0x3d	; 61
    1a64:	de b7       	in	r29, 0x3e	; 62
    1a66:	9a 83       	std	Y+2, r25	; 0x02
    1a68:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * function receives the configuration structure
	 * initializes timer registors according to the received structure
	 */
	switch (a_TimerConfig_Ptr->s_timer) /*determine which timer the user want to configure*/
    1a6a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a6c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a6e:	80 81       	ld	r24, Z
    1a70:	28 2f       	mov	r18, r24
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	3c 83       	std	Y+4, r19	; 0x04
    1a76:	2b 83       	std	Y+3, r18	; 0x03
    1a78:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a7c:	81 30       	cpi	r24, 0x01	; 1
    1a7e:	91 05       	cpc	r25, r1
    1a80:	09 f4       	brne	.+2      	; 0x1a84 <Timer_init+0x2a>
    1a82:	63 c0       	rjmp	.+198    	; 0x1b4a <Timer_init+0xf0>
    1a84:	2b 81       	ldd	r18, Y+3	; 0x03
    1a86:	3c 81       	ldd	r19, Y+4	; 0x04
    1a88:	22 30       	cpi	r18, 0x02	; 2
    1a8a:	31 05       	cpc	r19, r1
    1a8c:	09 f4       	brne	.+2      	; 0x1a90 <Timer_init+0x36>
    1a8e:	c5 c0       	rjmp	.+394    	; 0x1c1a <Timer_init+0x1c0>
    1a90:	8b 81       	ldd	r24, Y+3	; 0x03
    1a92:	9c 81       	ldd	r25, Y+4	; 0x04
    1a94:	00 97       	sbiw	r24, 0x00	; 0
    1a96:	09 f0       	breq	.+2      	; 0x1a9a <Timer_init+0x40>
    1a98:	10 c1       	rjmp	.+544    	; 0x1cba <Timer_init+0x260>
	{
	case TIMER_0:
		if(a_TimerConfig_Ptr->s_mode == OVERFLOW) /*configure timer 0 overflow mode*/
    1a9a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a9c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a9e:	81 81       	ldd	r24, Z+1	; 0x01
    1aa0:	88 23       	and	r24, r24
    1aa2:	19 f5       	brne	.+70     	; 0x1aea <Timer_init+0x90>
		{
			TCCR0 =  (TCCR0 & 0xF8) | (a_TimerConfig_Ptr->s_prescaler); /*set timer prescaler specified by the user in the config struct*/
    1aa4:	a3 e5       	ldi	r26, 0x53	; 83
    1aa6:	b0 e0       	ldi	r27, 0x00	; 0
    1aa8:	e3 e5       	ldi	r30, 0x53	; 83
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	98 2f       	mov	r25, r24
    1ab0:	98 7f       	andi	r25, 0xF8	; 248
    1ab2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ab4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ab6:	82 81       	ldd	r24, Z+2	; 0x02
    1ab8:	89 2b       	or	r24, r25
    1aba:	8c 93       	st	X, r24
			TCCR0 = (TCCR0 & 0X07) | (1<<FOC0);
    1abc:	a3 e5       	ldi	r26, 0x53	; 83
    1abe:	b0 e0       	ldi	r27, 0x00	; 0
    1ac0:	e3 e5       	ldi	r30, 0x53	; 83
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	87 70       	andi	r24, 0x07	; 7
    1ac8:	80 68       	ori	r24, 0x80	; 128
    1aca:	8c 93       	st	X, r24
			TCNT0 = a_TimerConfig_Ptr->s_initValue; /*set timer initial value specified by the user in the config struct*/
    1acc:	a2 e5       	ldi	r26, 0x52	; 82
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ad2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ad4:	83 81       	ldd	r24, Z+3	; 0x03
    1ad6:	94 81       	ldd	r25, Z+4	; 0x04
    1ad8:	8c 93       	st	X, r24
			TIMSK |= (1<<TOIE0);/*enable overflow interrupt*/
    1ada:	a9 e5       	ldi	r26, 0x59	; 89
    1adc:	b0 e0       	ldi	r27, 0x00	; 0
    1ade:	e9 e5       	ldi	r30, 0x59	; 89
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	81 60       	ori	r24, 0x01	; 1
    1ae6:	8c 93       	st	X, r24
    1ae8:	e8 c0       	rjmp	.+464    	; 0x1cba <Timer_init+0x260>
		}
		else if(a_TimerConfig_Ptr->s_mode == COMPARE_MATCH) /*configure timer 0 compare mode*/
    1aea:	e9 81       	ldd	r30, Y+1	; 0x01
    1aec:	fa 81       	ldd	r31, Y+2	; 0x02
    1aee:	81 81       	ldd	r24, Z+1	; 0x01
    1af0:	81 30       	cpi	r24, 0x01	; 1
    1af2:	09 f0       	breq	.+2      	; 0x1af6 <Timer_init+0x9c>
    1af4:	e2 c0       	rjmp	.+452    	; 0x1cba <Timer_init+0x260>
		{
			TCCR0 =  (TCCR0 & 0xF8) | (a_TimerConfig_Ptr->s_prescaler); /*set timer prescaler specified by the user in the config struct*/
    1af6:	a3 e5       	ldi	r26, 0x53	; 83
    1af8:	b0 e0       	ldi	r27, 0x00	; 0
    1afa:	e3 e5       	ldi	r30, 0x53	; 83
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	80 81       	ld	r24, Z
    1b00:	98 2f       	mov	r25, r24
    1b02:	98 7f       	andi	r25, 0xF8	; 248
    1b04:	e9 81       	ldd	r30, Y+1	; 0x01
    1b06:	fa 81       	ldd	r31, Y+2	; 0x02
    1b08:	82 81       	ldd	r24, Z+2	; 0x02
    1b0a:	89 2b       	or	r24, r25
    1b0c:	8c 93       	st	X, r24
			TCCR0 = (TCCR0 & 0X07) | (1<<WGM01) | (1<<FOC0);
    1b0e:	a3 e5       	ldi	r26, 0x53	; 83
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	e3 e5       	ldi	r30, 0x53	; 83
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	87 70       	andi	r24, 0x07	; 7
    1b1a:	88 68       	ori	r24, 0x88	; 136
    1b1c:	8c 93       	st	X, r24
			TCNT0 = a_TimerConfig_Ptr->s_initValue; /*set timer initial value specified by the user in the config struct*/
    1b1e:	a2 e5       	ldi	r26, 0x52	; 82
    1b20:	b0 e0       	ldi	r27, 0x00	; 0
    1b22:	e9 81       	ldd	r30, Y+1	; 0x01
    1b24:	fa 81       	ldd	r31, Y+2	; 0x02
    1b26:	83 81       	ldd	r24, Z+3	; 0x03
    1b28:	94 81       	ldd	r25, Z+4	; 0x04
    1b2a:	8c 93       	st	X, r24
			OCR0 = a_TimerConfig_Ptr->s_compareValue; /*set timer compare value specified by the user in the config struct*/
    1b2c:	ac e5       	ldi	r26, 0x5C	; 92
    1b2e:	b0 e0       	ldi	r27, 0x00	; 0
    1b30:	e9 81       	ldd	r30, Y+1	; 0x01
    1b32:	fa 81       	ldd	r31, Y+2	; 0x02
    1b34:	85 81       	ldd	r24, Z+5	; 0x05
    1b36:	96 81       	ldd	r25, Z+6	; 0x06
    1b38:	8c 93       	st	X, r24
			TIMSK |= (1<<OCIE0);/*enable compare interrupt*/
    1b3a:	a9 e5       	ldi	r26, 0x59	; 89
    1b3c:	b0 e0       	ldi	r27, 0x00	; 0
    1b3e:	e9 e5       	ldi	r30, 0x59	; 89
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	82 60       	ori	r24, 0x02	; 2
    1b46:	8c 93       	st	X, r24
    1b48:	b8 c0       	rjmp	.+368    	; 0x1cba <Timer_init+0x260>
		}
		break;
	case TIMER_1:
		if(a_TimerConfig_Ptr->s_mode == OVERFLOW) /*configure timer 2 overflow mode*/
    1b4a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b4c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b4e:	81 81       	ldd	r24, Z+1	; 0x01
    1b50:	88 23       	and	r24, r24
    1b52:	29 f5       	brne	.+74     	; 0x1b9e <Timer_init+0x144>
		{
			TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    1b54:	ef e4       	ldi	r30, 0x4F	; 79
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	8c e0       	ldi	r24, 0x0C	; 12
    1b5a:	80 83       	st	Z, r24
			TCCR1B = (TCCR1B & 0xF8) | (a_TimerConfig_Ptr->s_prescaler); /*set timer prescaler specified by the user in the config struct*/
    1b5c:	ae e4       	ldi	r26, 0x4E	; 78
    1b5e:	b0 e0       	ldi	r27, 0x00	; 0
    1b60:	ee e4       	ldi	r30, 0x4E	; 78
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	80 81       	ld	r24, Z
    1b66:	98 2f       	mov	r25, r24
    1b68:	98 7f       	andi	r25, 0xF8	; 248
    1b6a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b6c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b6e:	82 81       	ldd	r24, Z+2	; 0x02
    1b70:	89 2b       	or	r24, r25
    1b72:	8c 93       	st	X, r24
			TCCR1B = (TCCR1B & 0X07);
    1b74:	ae e4       	ldi	r26, 0x4E	; 78
    1b76:	b0 e0       	ldi	r27, 0x00	; 0
    1b78:	ee e4       	ldi	r30, 0x4E	; 78
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	80 81       	ld	r24, Z
    1b7e:	87 70       	andi	r24, 0x07	; 7
    1b80:	8c 93       	st	X, r24
			TCNT1 = a_TimerConfig_Ptr->s_initValue; /*set timer initial value specified by the user in the config struct*/
    1b82:	ac e4       	ldi	r26, 0x4C	; 76
    1b84:	b0 e0       	ldi	r27, 0x00	; 0
    1b86:	e9 81       	ldd	r30, Y+1	; 0x01
    1b88:	fa 81       	ldd	r31, Y+2	; 0x02
    1b8a:	83 81       	ldd	r24, Z+3	; 0x03
    1b8c:	94 81       	ldd	r25, Z+4	; 0x04
    1b8e:	11 96       	adiw	r26, 0x01	; 1
    1b90:	9c 93       	st	X, r25
    1b92:	8e 93       	st	-X, r24
			TIMSK = (1<<TOIE1);/*enable overflow interrupt*/
    1b94:	e9 e5       	ldi	r30, 0x59	; 89
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	84 e0       	ldi	r24, 0x04	; 4
    1b9a:	80 83       	st	Z, r24
    1b9c:	8e c0       	rjmp	.+284    	; 0x1cba <Timer_init+0x260>
		}
		else if(a_TimerConfig_Ptr->s_mode == COMPARE_MATCH) /*configure timer 1 compare mode*/
    1b9e:	e9 81       	ldd	r30, Y+1	; 0x01
    1ba0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ba2:	81 81       	ldd	r24, Z+1	; 0x01
    1ba4:	81 30       	cpi	r24, 0x01	; 1
    1ba6:	09 f0       	breq	.+2      	; 0x1baa <Timer_init+0x150>
    1ba8:	88 c0       	rjmp	.+272    	; 0x1cba <Timer_init+0x260>
		{
			TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    1baa:	ef e4       	ldi	r30, 0x4F	; 79
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	8c e0       	ldi	r24, 0x0C	; 12
    1bb0:	80 83       	st	Z, r24
			TCCR1B = (TCCR1B & 0xF8) | (a_TimerConfig_Ptr->s_prescaler); /*set timer prescaler specified by the user in the config struct*/
    1bb2:	ae e4       	ldi	r26, 0x4E	; 78
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	ee e4       	ldi	r30, 0x4E	; 78
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	80 81       	ld	r24, Z
    1bbc:	98 2f       	mov	r25, r24
    1bbe:	98 7f       	andi	r25, 0xF8	; 248
    1bc0:	e9 81       	ldd	r30, Y+1	; 0x01
    1bc2:	fa 81       	ldd	r31, Y+2	; 0x02
    1bc4:	82 81       	ldd	r24, Z+2	; 0x02
    1bc6:	89 2b       	or	r24, r25
    1bc8:	8c 93       	st	X, r24
			TCCR1B = (TCCR1B & 0X07) | (1<<WGM12);
    1bca:	ae e4       	ldi	r26, 0x4E	; 78
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	ee e4       	ldi	r30, 0x4E	; 78
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	87 70       	andi	r24, 0x07	; 7
    1bd6:	88 60       	ori	r24, 0x08	; 8
    1bd8:	8c 93       	st	X, r24
			TCNT1 = a_TimerConfig_Ptr->s_initValue; /*set timer initial value specified by the user in the config struct*/
    1bda:	ac e4       	ldi	r26, 0x4C	; 76
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	e9 81       	ldd	r30, Y+1	; 0x01
    1be0:	fa 81       	ldd	r31, Y+2	; 0x02
    1be2:	83 81       	ldd	r24, Z+3	; 0x03
    1be4:	94 81       	ldd	r25, Z+4	; 0x04
    1be6:	11 96       	adiw	r26, 0x01	; 1
    1be8:	9c 93       	st	X, r25
    1bea:	8e 93       	st	-X, r24
			OCR1A = a_TimerConfig_Ptr->s_compareValue; /*set timer compare value in channel A specified by the user in the config struct*/
    1bec:	aa e4       	ldi	r26, 0x4A	; 74
    1bee:	b0 e0       	ldi	r27, 0x00	; 0
    1bf0:	e9 81       	ldd	r30, Y+1	; 0x01
    1bf2:	fa 81       	ldd	r31, Y+2	; 0x02
    1bf4:	85 81       	ldd	r24, Z+5	; 0x05
    1bf6:	96 81       	ldd	r25, Z+6	; 0x06
    1bf8:	11 96       	adiw	r26, 0x01	; 1
    1bfa:	9c 93       	st	X, r25
    1bfc:	8e 93       	st	-X, r24
			OCR1B = a_TimerConfig_Ptr->s_compareValue_B; /*set timer compare value in channel B specified by the user in the config struct*/
    1bfe:	a8 e4       	ldi	r26, 0x48	; 72
    1c00:	b0 e0       	ldi	r27, 0x00	; 0
    1c02:	e9 81       	ldd	r30, Y+1	; 0x01
    1c04:	fa 81       	ldd	r31, Y+2	; 0x02
    1c06:	87 81       	ldd	r24, Z+7	; 0x07
    1c08:	90 85       	ldd	r25, Z+8	; 0x08
    1c0a:	11 96       	adiw	r26, 0x01	; 1
    1c0c:	9c 93       	st	X, r25
    1c0e:	8e 93       	st	-X, r24
			TIMSK = (1<<OCIE1A) | (1<<OCIE1B);/*enable compare interrupt of channel A and B*/
    1c10:	e9 e5       	ldi	r30, 0x59	; 89
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	88 e1       	ldi	r24, 0x18	; 24
    1c16:	80 83       	st	Z, r24
    1c18:	50 c0       	rjmp	.+160    	; 0x1cba <Timer_init+0x260>
		}
		break;
	case TIMER_2:
		if(a_TimerConfig_Ptr->s_mode == OVERFLOW) /*configure timer 2 overflow mode*/
    1c1a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c1c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c1e:	81 81       	ldd	r24, Z+1	; 0x01
    1c20:	88 23       	and	r24, r24
    1c22:	01 f5       	brne	.+64     	; 0x1c64 <Timer_init+0x20a>
		{
			TCCR2 =  (TCCR2 & 0xF8) | (a_TimerConfig_Ptr->s_prescaler); /*set timer prescaler specified by the user in the config struct*/
    1c24:	a5 e4       	ldi	r26, 0x45	; 69
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	e5 e4       	ldi	r30, 0x45	; 69
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	98 2f       	mov	r25, r24
    1c30:	98 7f       	andi	r25, 0xF8	; 248
    1c32:	e9 81       	ldd	r30, Y+1	; 0x01
    1c34:	fa 81       	ldd	r31, Y+2	; 0x02
    1c36:	82 81       	ldd	r24, Z+2	; 0x02
    1c38:	89 2b       	or	r24, r25
    1c3a:	8c 93       	st	X, r24
			TCCR2 = (TCCR2 & 0X07) | (1<<FOC2);
    1c3c:	a5 e4       	ldi	r26, 0x45	; 69
    1c3e:	b0 e0       	ldi	r27, 0x00	; 0
    1c40:	e5 e4       	ldi	r30, 0x45	; 69
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	87 70       	andi	r24, 0x07	; 7
    1c48:	80 68       	ori	r24, 0x80	; 128
    1c4a:	8c 93       	st	X, r24
			TCNT2 = a_TimerConfig_Ptr->s_initValue; /*set timer initial value specified by the user in the config struct*/
    1c4c:	a4 e4       	ldi	r26, 0x44	; 68
    1c4e:	b0 e0       	ldi	r27, 0x00	; 0
    1c50:	e9 81       	ldd	r30, Y+1	; 0x01
    1c52:	fa 81       	ldd	r31, Y+2	; 0x02
    1c54:	83 81       	ldd	r24, Z+3	; 0x03
    1c56:	94 81       	ldd	r25, Z+4	; 0x04
    1c58:	8c 93       	st	X, r24
			TIMSK = (1<<TOIE2);/*enable overflow interrupt*/
    1c5a:	e9 e5       	ldi	r30, 0x59	; 89
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 e4       	ldi	r24, 0x40	; 64
    1c60:	80 83       	st	Z, r24
    1c62:	2b c0       	rjmp	.+86     	; 0x1cba <Timer_init+0x260>
		}
		else if(a_TimerConfig_Ptr->s_mode == COMPARE_MATCH) /*configure timer 2 compare mode*/
    1c64:	e9 81       	ldd	r30, Y+1	; 0x01
    1c66:	fa 81       	ldd	r31, Y+2	; 0x02
    1c68:	81 81       	ldd	r24, Z+1	; 0x01
    1c6a:	81 30       	cpi	r24, 0x01	; 1
    1c6c:	31 f5       	brne	.+76     	; 0x1cba <Timer_init+0x260>
		{
			TCCR2 =  (TCCR2 & 0xF8) | (a_TimerConfig_Ptr->s_prescaler); /*set timer prescaler specified by the user in the config struct*/
    1c6e:	a5 e4       	ldi	r26, 0x45	; 69
    1c70:	b0 e0       	ldi	r27, 0x00	; 0
    1c72:	e5 e4       	ldi	r30, 0x45	; 69
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	80 81       	ld	r24, Z
    1c78:	98 2f       	mov	r25, r24
    1c7a:	98 7f       	andi	r25, 0xF8	; 248
    1c7c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c7e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c80:	82 81       	ldd	r24, Z+2	; 0x02
    1c82:	89 2b       	or	r24, r25
    1c84:	8c 93       	st	X, r24
			TCCR2 = (TCCR2 & 0X07)  | (1<<WGM21) | (1<<FOC2);
    1c86:	a5 e4       	ldi	r26, 0x45	; 69
    1c88:	b0 e0       	ldi	r27, 0x00	; 0
    1c8a:	e5 e4       	ldi	r30, 0x45	; 69
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	80 81       	ld	r24, Z
    1c90:	87 70       	andi	r24, 0x07	; 7
    1c92:	88 68       	ori	r24, 0x88	; 136
    1c94:	8c 93       	st	X, r24
			TCNT2 = a_TimerConfig_Ptr->s_initValue; /*set timer initial value specified by the user in the config struct*/
    1c96:	a4 e4       	ldi	r26, 0x44	; 68
    1c98:	b0 e0       	ldi	r27, 0x00	; 0
    1c9a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c9c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c9e:	83 81       	ldd	r24, Z+3	; 0x03
    1ca0:	94 81       	ldd	r25, Z+4	; 0x04
    1ca2:	8c 93       	st	X, r24
			OCR2 =  a_TimerConfig_Ptr->s_compareValue; /*set timer compare value specified by the user in the config struct*/
    1ca4:	a3 e4       	ldi	r26, 0x43	; 67
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	e9 81       	ldd	r30, Y+1	; 0x01
    1caa:	fa 81       	ldd	r31, Y+2	; 0x02
    1cac:	85 81       	ldd	r24, Z+5	; 0x05
    1cae:	96 81       	ldd	r25, Z+6	; 0x06
    1cb0:	8c 93       	st	X, r24
			TIMSK = (1<<OCIE2);/*enable compare interrupt*/
    1cb2:	e9 e5       	ldi	r30, 0x59	; 89
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	80 e8       	ldi	r24, 0x80	; 128
    1cb8:	80 83       	st	Z, r24
		}
		break;
	}
}
    1cba:	0f 90       	pop	r0
    1cbc:	0f 90       	pop	r0
    1cbe:	0f 90       	pop	r0
    1cc0:	0f 90       	pop	r0
    1cc2:	cf 91       	pop	r28
    1cc4:	df 91       	pop	r29
    1cc6:	08 95       	ret

00001cc8 <Timer_setCallBack>:

void Timer_setCallBack(Timer_Number a_Timer,void(*a_Ptr)(void))
{
    1cc8:	df 93       	push	r29
    1cca:	cf 93       	push	r28
    1ccc:	00 d0       	rcall	.+0      	; 0x1cce <Timer_setCallBack+0x6>
    1cce:	00 d0       	rcall	.+0      	; 0x1cd0 <Timer_setCallBack+0x8>
    1cd0:	0f 92       	push	r0
    1cd2:	cd b7       	in	r28, 0x3d	; 61
    1cd4:	de b7       	in	r29, 0x3e	; 62
    1cd6:	89 83       	std	Y+1, r24	; 0x01
    1cd8:	7b 83       	std	Y+3, r23	; 0x03
    1cda:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * function receives a variable which determines the timer requested by the user
	 * the function also receives the address to the call back function in the application which is configured for it
	 */
	switch (a_Timer) /*choose which timer to save the call back address to according to the application*/
    1cdc:	89 81       	ldd	r24, Y+1	; 0x01
    1cde:	28 2f       	mov	r18, r24
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	3d 83       	std	Y+5, r19	; 0x05
    1ce4:	2c 83       	std	Y+4, r18	; 0x04
    1ce6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce8:	9d 81       	ldd	r25, Y+5	; 0x05
    1cea:	81 30       	cpi	r24, 0x01	; 1
    1cec:	91 05       	cpc	r25, r1
    1cee:	81 f0       	breq	.+32     	; 0x1d10 <Timer_setCallBack+0x48>
    1cf0:	2c 81       	ldd	r18, Y+4	; 0x04
    1cf2:	3d 81       	ldd	r19, Y+5	; 0x05
    1cf4:	22 30       	cpi	r18, 0x02	; 2
    1cf6:	31 05       	cpc	r19, r1
    1cf8:	91 f0       	breq	.+36     	; 0x1d1e <Timer_setCallBack+0x56>
    1cfa:	8c 81       	ldd	r24, Y+4	; 0x04
    1cfc:	9d 81       	ldd	r25, Y+5	; 0x05
    1cfe:	00 97       	sbiw	r24, 0x00	; 0
    1d00:	a1 f4       	brne	.+40     	; 0x1d2a <Timer_setCallBack+0x62>
	{
	case TIMER_0:
		g_timer0CallBackPtr = a_Ptr; /* Save the address of the Call back function in the timer 0 global variable */
    1d02:	8a 81       	ldd	r24, Y+2	; 0x02
    1d04:	9b 81       	ldd	r25, Y+3	; 0x03
    1d06:	90 93 85 00 	sts	0x0085, r25
    1d0a:	80 93 84 00 	sts	0x0084, r24
    1d0e:	0d c0       	rjmp	.+26     	; 0x1d2a <Timer_setCallBack+0x62>
		break;
	case TIMER_1:
		g_timer1CallBackPtr = a_Ptr; /* Save the address of the Call back function in the timer 1 global variable */
    1d10:	8a 81       	ldd	r24, Y+2	; 0x02
    1d12:	9b 81       	ldd	r25, Y+3	; 0x03
    1d14:	90 93 87 00 	sts	0x0087, r25
    1d18:	80 93 86 00 	sts	0x0086, r24
    1d1c:	06 c0       	rjmp	.+12     	; 0x1d2a <Timer_setCallBack+0x62>
		break;
	case TIMER_2:
		g_timer2CallBackPtr = a_Ptr; /* Save the address of the Call back function in the timer 2 global variable */
    1d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d20:	9b 81       	ldd	r25, Y+3	; 0x03
    1d22:	90 93 8b 00 	sts	0x008B, r25
    1d26:	80 93 8a 00 	sts	0x008A, r24
		break;
	}
}
    1d2a:	0f 90       	pop	r0
    1d2c:	0f 90       	pop	r0
    1d2e:	0f 90       	pop	r0
    1d30:	0f 90       	pop	r0
    1d32:	0f 90       	pop	r0
    1d34:	cf 91       	pop	r28
    1d36:	df 91       	pop	r29
    1d38:	08 95       	ret

00001d3a <Timer_1_CompB_setCallBack>:

void Timer_1_CompB_setCallBack(void(*a_Ptr)(void))
{
    1d3a:	df 93       	push	r29
    1d3c:	cf 93       	push	r28
    1d3e:	00 d0       	rcall	.+0      	; 0x1d40 <Timer_1_CompB_setCallBack+0x6>
    1d40:	cd b7       	in	r28, 0x3d	; 61
    1d42:	de b7       	in	r29, 0x3e	; 62
    1d44:	9a 83       	std	Y+2, r25	; 0x02
    1d46:	89 83       	std	Y+1, r24	; 0x01
	/*function for timer 1 channel b in compare mode receives a variable which determines the timer requested by the user*/
	g_timer1CompBCallBackPtr = a_Ptr; /* Save the address of the Call back function in the timer 1 channel b global variable */
    1d48:	89 81       	ldd	r24, Y+1	; 0x01
    1d4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d4c:	90 93 89 00 	sts	0x0089, r25
    1d50:	80 93 88 00 	sts	0x0088, r24
}
    1d54:	0f 90       	pop	r0
    1d56:	0f 90       	pop	r0
    1d58:	cf 91       	pop	r28
    1d5a:	df 91       	pop	r29
    1d5c:	08 95       	ret

00001d5e <Timer_getTimerValue>:

uint16 Timer_getTimerValue(Timer_Number a_Timer)
{
    1d5e:	df 93       	push	r29
    1d60:	cf 93       	push	r28
    1d62:	00 d0       	rcall	.+0      	; 0x1d64 <Timer_getTimerValue+0x6>
    1d64:	00 d0       	rcall	.+0      	; 0x1d66 <Timer_getTimerValue+0x8>
    1d66:	0f 92       	push	r0
    1d68:	cd b7       	in	r28, 0x3d	; 61
    1d6a:	de b7       	in	r29, 0x3e	; 62
    1d6c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * function to return the current value of the timer
	 * function receives a variable which determines the timer requested by the user
	 */
	switch (a_Timer)
    1d6e:	89 81       	ldd	r24, Y+1	; 0x01
    1d70:	28 2f       	mov	r18, r24
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	3d 83       	std	Y+5, r19	; 0x05
    1d76:	2c 83       	std	Y+4, r18	; 0x04
    1d78:	8c 81       	ldd	r24, Y+4	; 0x04
    1d7a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d7c:	81 30       	cpi	r24, 0x01	; 1
    1d7e:	91 05       	cpc	r25, r1
    1d80:	89 f0       	breq	.+34     	; 0x1da4 <Timer_getTimerValue+0x46>
    1d82:	2c 81       	ldd	r18, Y+4	; 0x04
    1d84:	3d 81       	ldd	r19, Y+5	; 0x05
    1d86:	22 30       	cpi	r18, 0x02	; 2
    1d88:	31 05       	cpc	r19, r1
    1d8a:	99 f0       	breq	.+38     	; 0x1db2 <Timer_getTimerValue+0x54>
    1d8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d90:	00 97       	sbiw	r24, 0x00	; 0
    1d92:	b9 f4       	brne	.+46     	; 0x1dc2 <Timer_getTimerValue+0x64>
	{
	case TIMER_0:
		return TCNT0; /*return the value of timer 0 to the user*/
    1d94:	e2 e5       	ldi	r30, 0x52	; 82
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	28 2f       	mov	r18, r24
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	3b 83       	std	Y+3, r19	; 0x03
    1da0:	2a 83       	std	Y+2, r18	; 0x02
    1da2:	11 c0       	rjmp	.+34     	; 0x1dc6 <Timer_getTimerValue+0x68>
		break;
	case TIMER_1:
		return TCNT1; /*return the value of timer 1 to the user*/
    1da4:	ec e4       	ldi	r30, 0x4C	; 76
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	80 81       	ld	r24, Z
    1daa:	91 81       	ldd	r25, Z+1	; 0x01
    1dac:	9b 83       	std	Y+3, r25	; 0x03
    1dae:	8a 83       	std	Y+2, r24	; 0x02
    1db0:	0a c0       	rjmp	.+20     	; 0x1dc6 <Timer_getTimerValue+0x68>
		break;
	case TIMER_2:
		return TCNT2; /*return the value of timer 2 to the user*/
    1db2:	e4 e4       	ldi	r30, 0x44	; 68
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	80 81       	ld	r24, Z
    1db8:	28 2f       	mov	r18, r24
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	3b 83       	std	Y+3, r19	; 0x03
    1dbe:	2a 83       	std	Y+2, r18	; 0x02
    1dc0:	02 c0       	rjmp	.+4      	; 0x1dc6 <Timer_getTimerValue+0x68>
		break;
	default:
		return 0;
    1dc2:	1b 82       	std	Y+3, r1	; 0x03
    1dc4:	1a 82       	std	Y+2, r1	; 0x02
    1dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc8:	9b 81       	ldd	r25, Y+3	; 0x03
	}
}
    1dca:	0f 90       	pop	r0
    1dcc:	0f 90       	pop	r0
    1dce:	0f 90       	pop	r0
    1dd0:	0f 90       	pop	r0
    1dd2:	0f 90       	pop	r0
    1dd4:	cf 91       	pop	r28
    1dd6:	df 91       	pop	r29
    1dd8:	08 95       	ret

00001dda <Timer_clearTimerValue>:

void Timer_clearTimerValue(Timer_Number a_Timer)
{
    1dda:	df 93       	push	r29
    1ddc:	cf 93       	push	r28
    1dde:	00 d0       	rcall	.+0      	; 0x1de0 <Timer_clearTimerValue+0x6>
    1de0:	0f 92       	push	r0
    1de2:	cd b7       	in	r28, 0x3d	; 61
    1de4:	de b7       	in	r29, 0x3e	; 62
    1de6:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * function to reinitialize the current value of the requested timer to zero
	 * function receives a variable which determines the timer requested by the user
	 */
	switch (a_Timer)
    1de8:	89 81       	ldd	r24, Y+1	; 0x01
    1dea:	28 2f       	mov	r18, r24
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	3b 83       	std	Y+3, r19	; 0x03
    1df0:	2a 83       	std	Y+2, r18	; 0x02
    1df2:	8a 81       	ldd	r24, Y+2	; 0x02
    1df4:	9b 81       	ldd	r25, Y+3	; 0x03
    1df6:	81 30       	cpi	r24, 0x01	; 1
    1df8:	91 05       	cpc	r25, r1
    1dfa:	69 f0       	breq	.+26     	; 0x1e16 <Timer_clearTimerValue+0x3c>
    1dfc:	2a 81       	ldd	r18, Y+2	; 0x02
    1dfe:	3b 81       	ldd	r19, Y+3	; 0x03
    1e00:	22 30       	cpi	r18, 0x02	; 2
    1e02:	31 05       	cpc	r19, r1
    1e04:	69 f0       	breq	.+26     	; 0x1e20 <Timer_clearTimerValue+0x46>
    1e06:	8a 81       	ldd	r24, Y+2	; 0x02
    1e08:	9b 81       	ldd	r25, Y+3	; 0x03
    1e0a:	00 97       	sbiw	r24, 0x00	; 0
    1e0c:	61 f4       	brne	.+24     	; 0x1e26 <Timer_clearTimerValue+0x4c>
	{
	case TIMER_0:
		TCNT0 = 0; /*initializing value of timer 0 to zero*/
    1e0e:	e2 e5       	ldi	r30, 0x52	; 82
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	10 82       	st	Z, r1
    1e14:	08 c0       	rjmp	.+16     	; 0x1e26 <Timer_clearTimerValue+0x4c>
		break;
	case TIMER_1:
		TCNT1 = 0; /*initializing value of timer 1 to zero*/
    1e16:	ec e4       	ldi	r30, 0x4C	; 76
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	11 82       	std	Z+1, r1	; 0x01
    1e1c:	10 82       	st	Z, r1
    1e1e:	03 c0       	rjmp	.+6      	; 0x1e26 <Timer_clearTimerValue+0x4c>
		break;
	case TIMER_2:
		TCNT2 = 0; /*initializing value of timer 2 to zero*/
    1e20:	e4 e4       	ldi	r30, 0x44	; 68
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	10 82       	st	Z, r1
		break;
	}
}
    1e26:	0f 90       	pop	r0
    1e28:	0f 90       	pop	r0
    1e2a:	0f 90       	pop	r0
    1e2c:	cf 91       	pop	r28
    1e2e:	df 91       	pop	r29
    1e30:	08 95       	ret

00001e32 <Timer_deInit>:
void Timer_deInit(Timer_Number a_Timer)
{
    1e32:	df 93       	push	r29
    1e34:	cf 93       	push	r28
    1e36:	00 d0       	rcall	.+0      	; 0x1e38 <Timer_deInit+0x6>
    1e38:	0f 92       	push	r0
    1e3a:	cd b7       	in	r28, 0x3d	; 61
    1e3c:	de b7       	in	r29, 0x3e	; 62
    1e3e:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * function to deinitialize (disable) the requested timer
	 * function receives a variable which determines the timer requested by the user
	 */
	switch (a_Timer)
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
    1e42:	28 2f       	mov	r18, r24
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	3b 83       	std	Y+3, r19	; 0x03
    1e48:	2a 83       	std	Y+2, r18	; 0x02
    1e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e4e:	81 30       	cpi	r24, 0x01	; 1
    1e50:	91 05       	cpc	r25, r1
    1e52:	d1 f0       	breq	.+52     	; 0x1e88 <Timer_deInit+0x56>
    1e54:	2a 81       	ldd	r18, Y+2	; 0x02
    1e56:	3b 81       	ldd	r19, Y+3	; 0x03
    1e58:	22 30       	cpi	r18, 0x02	; 2
    1e5a:	31 05       	cpc	r19, r1
    1e5c:	79 f1       	breq	.+94     	; 0x1ebc <Timer_deInit+0x8a>
    1e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e60:	9b 81       	ldd	r25, Y+3	; 0x03
    1e62:	00 97       	sbiw	r24, 0x00	; 0
    1e64:	d9 f5       	brne	.+118    	; 0x1edc <Timer_deInit+0xaa>
	case TIMER_0:
		/*
		 * clearing all the registers in timer 0
		 * disable all the timer interrupts
		 */
		TCCR0 = 0;
    1e66:	e3 e5       	ldi	r30, 0x53	; 83
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	10 82       	st	Z, r1
		TCNT0 = 0;
    1e6c:	e2 e5       	ldi	r30, 0x52	; 82
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	10 82       	st	Z, r1
		OCR0 = 0;
    1e72:	ec e5       	ldi	r30, 0x5C	; 92
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	10 82       	st	Z, r1
		TIMSK &= ~(1<<OCIE0) & ~(1<<TOIE0);
    1e78:	a9 e5       	ldi	r26, 0x59	; 89
    1e7a:	b0 e0       	ldi	r27, 0x00	; 0
    1e7c:	e9 e5       	ldi	r30, 0x59	; 89
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	80 81       	ld	r24, Z
    1e82:	8c 7f       	andi	r24, 0xFC	; 252
    1e84:	8c 93       	st	X, r24
    1e86:	2a c0       	rjmp	.+84     	; 0x1edc <Timer_deInit+0xaa>
	case TIMER_1:
		/*
		 * clearing all the registers in timer 1
		 * disable all the timer interrupts
		 */
		TCCR1A = 0;
    1e88:	ef e4       	ldi	r30, 0x4F	; 79
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	10 82       	st	Z, r1
		TCCR1B = 0;
    1e8e:	ee e4       	ldi	r30, 0x4E	; 78
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	10 82       	st	Z, r1
		TCNT1 = 0;
    1e94:	ec e4       	ldi	r30, 0x4C	; 76
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	11 82       	std	Z+1, r1	; 0x01
    1e9a:	10 82       	st	Z, r1
		OCR1A = 0;
    1e9c:	ea e4       	ldi	r30, 0x4A	; 74
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	11 82       	std	Z+1, r1	; 0x01
    1ea2:	10 82       	st	Z, r1
		OCR1B = 0;
    1ea4:	e8 e4       	ldi	r30, 0x48	; 72
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	11 82       	std	Z+1, r1	; 0x01
    1eaa:	10 82       	st	Z, r1
		TIMSK &= ~(1<<OCIE1A) & ~(1<<OCIE1B) & ~(1<<TOIE1);
    1eac:	a9 e5       	ldi	r26, 0x59	; 89
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
    1eb0:	e9 e5       	ldi	r30, 0x59	; 89
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	80 81       	ld	r24, Z
    1eb6:	83 7e       	andi	r24, 0xE3	; 227
    1eb8:	8c 93       	st	X, r24
    1eba:	10 c0       	rjmp	.+32     	; 0x1edc <Timer_deInit+0xaa>
	case TIMER_2:
		/*
		 * clearing all the registers in timer 2
		 * disable all the timer interrupts
		 */
		TCCR2 = 0;
    1ebc:	e5 e4       	ldi	r30, 0x45	; 69
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	10 82       	st	Z, r1
		TCNT2 = 0;
    1ec2:	e4 e4       	ldi	r30, 0x44	; 68
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	10 82       	st	Z, r1
		OCR2 = 0;
    1ec8:	e3 e4       	ldi	r30, 0x43	; 67
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	10 82       	st	Z, r1
		TIMSK &= ~(1<<OCIE2) & ~(1<<TOIE2);
    1ece:	a9 e5       	ldi	r26, 0x59	; 89
    1ed0:	b0 e0       	ldi	r27, 0x00	; 0
    1ed2:	e9 e5       	ldi	r30, 0x59	; 89
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	80 81       	ld	r24, Z
    1ed8:	8f 73       	andi	r24, 0x3F	; 63
    1eda:	8c 93       	st	X, r24
		break;
	}
}
    1edc:	0f 90       	pop	r0
    1ede:	0f 90       	pop	r0
    1ee0:	0f 90       	pop	r0
    1ee2:	cf 91       	pop	r28
    1ee4:	df 91       	pop	r29
    1ee6:	08 95       	ret

00001ee8 <UART_init>:
 *******************************************************************************/

#include "uart.h"

void UART_init(const UartConfig *uartInit_Ptr)
{
    1ee8:	df 93       	push	r29
    1eea:	cf 93       	push	r28
    1eec:	cd b7       	in	r28, 0x3d	; 61
    1eee:	de b7       	in	r29, 0x3e	; 62
    1ef0:	28 97       	sbiw	r28, 0x08	; 8
    1ef2:	0f b6       	in	r0, 0x3f	; 63
    1ef4:	f8 94       	cli
    1ef6:	de bf       	out	0x3e, r29	; 62
    1ef8:	0f be       	out	0x3f, r0	; 63
    1efa:	cd bf       	out	0x3d, r28	; 61
    1efc:	9c 83       	std	Y+4, r25	; 0x04
    1efe:	8b 83       	std	Y+3, r24	; 0x03
	UCSRA = (1<<U2X); /*double transmission speed */
    1f00:	eb e2       	ldi	r30, 0x2B	; 43
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	82 e0       	ldi	r24, 0x02	; 2
    1f06:	80 83       	st	Z, r24
	/*
	 * Disable Interrupts
	 * Enable Receiver
	 * EnableTransmitter
	 */
	UCSRB = (1<<RXEN) | (1<<TXEN);
    1f08:	ea e2       	ldi	r30, 0x2A	; 42
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	88 e1       	ldi	r24, 0x18	; 24
    1f0e:	80 83       	st	Z, r24
	/*
	 * Asynchronous Operation
	 * Disabling parity bit
	 * Using one stop bit
	 */
	UCSRC = (1<<URSEL) ;
    1f10:	e0 e4       	ldi	r30, 0x40	; 64
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	80 e8       	ldi	r24, 0x80	; 128
    1f16:	80 83       	st	Z, r24
	switch (uartInit_Ptr->s_parity)
    1f18:	eb 81       	ldd	r30, Y+3	; 0x03
    1f1a:	fc 81       	ldd	r31, Y+4	; 0x04
    1f1c:	80 81       	ld	r24, Z
    1f1e:	28 2f       	mov	r18, r24
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	38 87       	std	Y+8, r19	; 0x08
    1f24:	2f 83       	std	Y+7, r18	; 0x07
    1f26:	8f 81       	ldd	r24, Y+7	; 0x07
    1f28:	98 85       	ldd	r25, Y+8	; 0x08
    1f2a:	81 30       	cpi	r24, 0x01	; 1
    1f2c:	91 05       	cpc	r25, r1
    1f2e:	31 f0       	breq	.+12     	; 0x1f3c <UART_init+0x54>
    1f30:	2f 81       	ldd	r18, Y+7	; 0x07
    1f32:	38 85       	ldd	r19, Y+8	; 0x08
    1f34:	22 30       	cpi	r18, 0x02	; 2
    1f36:	31 05       	cpc	r19, r1
    1f38:	49 f0       	breq	.+18     	; 0x1f4c <UART_init+0x64>
    1f3a:	16 c0       	rjmp	.+44     	; 0x1f68 <UART_init+0x80>
	{
	/*
	 * configuring parity type according to the number of bits the user requested
	 */
		case EVEN:/*even parity*/
			SET_BIT(UCSRC,UPM1);
    1f3c:	a0 e4       	ldi	r26, 0x40	; 64
    1f3e:	b0 e0       	ldi	r27, 0x00	; 0
    1f40:	e0 e4       	ldi	r30, 0x40	; 64
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	80 81       	ld	r24, Z
    1f46:	80 62       	ori	r24, 0x20	; 32
    1f48:	8c 93       	st	X, r24
    1f4a:	0e c0       	rjmp	.+28     	; 0x1f68 <UART_init+0x80>
			break;
		case ODD:/*odd parity*/
			SET_BIT(UCSRC,UPM1);
    1f4c:	a0 e4       	ldi	r26, 0x40	; 64
    1f4e:	b0 e0       	ldi	r27, 0x00	; 0
    1f50:	e0 e4       	ldi	r30, 0x40	; 64
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	80 81       	ld	r24, Z
    1f56:	80 62       	ori	r24, 0x20	; 32
    1f58:	8c 93       	st	X, r24
			SET_BIT(UCSRC,UPM0);
    1f5a:	a0 e4       	ldi	r26, 0x40	; 64
    1f5c:	b0 e0       	ldi	r27, 0x00	; 0
    1f5e:	e0 e4       	ldi	r30, 0x40	; 64
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	80 81       	ld	r24, Z
    1f64:	80 61       	ori	r24, 0x10	; 16
    1f66:	8c 93       	st	X, r24
			break;
		case NO_PARITY:/*no parity*/
			break;
	}

	if (uartInit_Ptr->s_stopBit)
    1f68:	eb 81       	ldd	r30, Y+3	; 0x03
    1f6a:	fc 81       	ldd	r31, Y+4	; 0x04
    1f6c:	83 81       	ldd	r24, Z+3	; 0x03
    1f6e:	88 23       	and	r24, r24
    1f70:	39 f0       	breq	.+14     	; 0x1f80 <UART_init+0x98>
	{
		/*
		 * configuring number of stop bits according to the number the user requested
		 */
			SET_BIT(UCSRC,USBS);
    1f72:	a0 e4       	ldi	r26, 0x40	; 64
    1f74:	b0 e0       	ldi	r27, 0x00	; 0
    1f76:	e0 e4       	ldi	r30, 0x40	; 64
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	80 81       	ld	r24, Z
    1f7c:	88 60       	ori	r24, 0x08	; 8
    1f7e:	8c 93       	st	X, r24
	}
	switch (uartInit_Ptr->s_bitDataNum)
    1f80:	eb 81       	ldd	r30, Y+3	; 0x03
    1f82:	fc 81       	ldd	r31, Y+4	; 0x04
    1f84:	84 81       	ldd	r24, Z+4	; 0x04
    1f86:	28 2f       	mov	r18, r24
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	3e 83       	std	Y+6, r19	; 0x06
    1f8c:	2d 83       	std	Y+5, r18	; 0x05
    1f8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f90:	9e 81       	ldd	r25, Y+6	; 0x06
    1f92:	82 30       	cpi	r24, 0x02	; 2
    1f94:	91 05       	cpc	r25, r1
    1f96:	19 f1       	breq	.+70     	; 0x1fde <UART_init+0xf6>
    1f98:	2d 81       	ldd	r18, Y+5	; 0x05
    1f9a:	3e 81       	ldd	r19, Y+6	; 0x06
    1f9c:	23 30       	cpi	r18, 0x03	; 3
    1f9e:	31 05       	cpc	r19, r1
    1fa0:	5c f4       	brge	.+22     	; 0x1fb8 <UART_init+0xd0>
    1fa2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa6:	00 97       	sbiw	r24, 0x00	; 0
    1fa8:	09 f4       	brne	.+2      	; 0x1fac <UART_init+0xc4>
    1faa:	45 c0       	rjmp	.+138    	; 0x2036 <UART_init+0x14e>
    1fac:	2d 81       	ldd	r18, Y+5	; 0x05
    1fae:	3e 81       	ldd	r19, Y+6	; 0x06
    1fb0:	21 30       	cpi	r18, 0x01	; 1
    1fb2:	31 05       	cpc	r19, r1
    1fb4:	61 f0       	breq	.+24     	; 0x1fce <UART_init+0xe6>
    1fb6:	3f c0       	rjmp	.+126    	; 0x2036 <UART_init+0x14e>
    1fb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fba:	9e 81       	ldd	r25, Y+6	; 0x06
    1fbc:	83 30       	cpi	r24, 0x03	; 3
    1fbe:	91 05       	cpc	r25, r1
    1fc0:	b1 f0       	breq	.+44     	; 0x1fee <UART_init+0x106>
    1fc2:	2d 81       	ldd	r18, Y+5	; 0x05
    1fc4:	3e 81       	ldd	r19, Y+6	; 0x06
    1fc6:	24 30       	cpi	r18, 0x04	; 4
    1fc8:	31 05       	cpc	r19, r1
    1fca:	01 f1       	breq	.+64     	; 0x200c <UART_init+0x124>
    1fcc:	34 c0       	rjmp	.+104    	; 0x2036 <UART_init+0x14e>
	 * configuring uart number of data bits according to the number of bits the user requested
	 */
		case FIVE_BITS:/*5 bit data transmition*/
			break;
		case SIX_BITS:/*6 bit data transmition*/
			SET_BIT(UCSRC,UCSZ0);
    1fce:	a0 e4       	ldi	r26, 0x40	; 64
    1fd0:	b0 e0       	ldi	r27, 0x00	; 0
    1fd2:	e0 e4       	ldi	r30, 0x40	; 64
    1fd4:	f0 e0       	ldi	r31, 0x00	; 0
    1fd6:	80 81       	ld	r24, Z
    1fd8:	82 60       	ori	r24, 0x02	; 2
    1fda:	8c 93       	st	X, r24
    1fdc:	2c c0       	rjmp	.+88     	; 0x2036 <UART_init+0x14e>
			break;
		case SEVEN_BITS:/*7 bit data transmition*/
			SET_BIT(UCSRC,UCSZ1);
    1fde:	a0 e4       	ldi	r26, 0x40	; 64
    1fe0:	b0 e0       	ldi	r27, 0x00	; 0
    1fe2:	e0 e4       	ldi	r30, 0x40	; 64
    1fe4:	f0 e0       	ldi	r31, 0x00	; 0
    1fe6:	80 81       	ld	r24, Z
    1fe8:	84 60       	ori	r24, 0x04	; 4
    1fea:	8c 93       	st	X, r24
    1fec:	24 c0       	rjmp	.+72     	; 0x2036 <UART_init+0x14e>
			break;
		case EIGHT_BITS:/*8 bit data transmition*/
			SET_BIT(UCSRC,UCSZ1);
    1fee:	a0 e4       	ldi	r26, 0x40	; 64
    1ff0:	b0 e0       	ldi	r27, 0x00	; 0
    1ff2:	e0 e4       	ldi	r30, 0x40	; 64
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	80 81       	ld	r24, Z
    1ff8:	84 60       	ori	r24, 0x04	; 4
    1ffa:	8c 93       	st	X, r24
			SET_BIT(UCSRC,UCSZ0);
    1ffc:	a0 e4       	ldi	r26, 0x40	; 64
    1ffe:	b0 e0       	ldi	r27, 0x00	; 0
    2000:	e0 e4       	ldi	r30, 0x40	; 64
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	80 81       	ld	r24, Z
    2006:	82 60       	ori	r24, 0x02	; 2
    2008:	8c 93       	st	X, r24
    200a:	15 c0       	rjmp	.+42     	; 0x2036 <UART_init+0x14e>
			break;
		case NINE_BITS:/*9 bit data transmition*/
			SET_BIT(UCSRB,UCSZ2);
    200c:	aa e2       	ldi	r26, 0x2A	; 42
    200e:	b0 e0       	ldi	r27, 0x00	; 0
    2010:	ea e2       	ldi	r30, 0x2A	; 42
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	80 81       	ld	r24, Z
    2016:	84 60       	ori	r24, 0x04	; 4
    2018:	8c 93       	st	X, r24
			SET_BIT(UCSRC,UCSZ1);
    201a:	a0 e4       	ldi	r26, 0x40	; 64
    201c:	b0 e0       	ldi	r27, 0x00	; 0
    201e:	e0 e4       	ldi	r30, 0x40	; 64
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	80 81       	ld	r24, Z
    2024:	84 60       	ori	r24, 0x04	; 4
    2026:	8c 93       	st	X, r24
			SET_BIT(UCSRC,UCSZ0);
    2028:	a0 e4       	ldi	r26, 0x40	; 64
    202a:	b0 e0       	ldi	r27, 0x00	; 0
    202c:	e0 e4       	ldi	r30, 0x40	; 64
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	80 81       	ld	r24, Z
    2032:	82 60       	ori	r24, 0x02	; 2
    2034:	8c 93       	st	X, r24
			break;
	}

	/*Baud Rate*/
	uint16 baudScale = (F_CPU/(8*(uartInit_Ptr->s_baudRate)))-1 ;/*calculating baud scale from baud rate*/
    2036:	eb 81       	ldd	r30, Y+3	; 0x03
    2038:	fc 81       	ldd	r31, Y+4	; 0x04
    203a:	81 81       	ldd	r24, Z+1	; 0x01
    203c:	92 81       	ldd	r25, Z+2	; 0x02
    203e:	88 0f       	add	r24, r24
    2040:	99 1f       	adc	r25, r25
    2042:	88 0f       	add	r24, r24
    2044:	99 1f       	adc	r25, r25
    2046:	88 0f       	add	r24, r24
    2048:	99 1f       	adc	r25, r25
    204a:	9c 01       	movw	r18, r24
    204c:	40 e0       	ldi	r20, 0x00	; 0
    204e:	50 e0       	ldi	r21, 0x00	; 0
    2050:	80 e0       	ldi	r24, 0x00	; 0
    2052:	92 e1       	ldi	r25, 0x12	; 18
    2054:	aa e7       	ldi	r26, 0x7A	; 122
    2056:	b0 e0       	ldi	r27, 0x00	; 0
    2058:	bc 01       	movw	r22, r24
    205a:	cd 01       	movw	r24, r26
    205c:	0e 94 cf 10 	call	0x219e	; 0x219e <__udivmodsi4>
    2060:	da 01       	movw	r26, r20
    2062:	c9 01       	movw	r24, r18
    2064:	01 97       	sbiw	r24, 0x01	; 1
    2066:	9a 83       	std	Y+2, r25	; 0x02
    2068:	89 83       	std	Y+1, r24	; 0x01
	/*configuring uart prescaler*/
	UBRRL = (baudScale & 0x00FF);
    206a:	e9 e2       	ldi	r30, 0x29	; 41
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	89 81       	ldd	r24, Y+1	; 0x01
    2070:	80 83       	st	Z, r24
	UBRRH = (baudScale >> 8);
    2072:	e0 e4       	ldi	r30, 0x40	; 64
    2074:	f0 e0       	ldi	r31, 0x00	; 0
    2076:	89 81       	ldd	r24, Y+1	; 0x01
    2078:	9a 81       	ldd	r25, Y+2	; 0x02
    207a:	89 2f       	mov	r24, r25
    207c:	99 27       	eor	r25, r25
    207e:	80 83       	st	Z, r24
}
    2080:	28 96       	adiw	r28, 0x08	; 8
    2082:	0f b6       	in	r0, 0x3f	; 63
    2084:	f8 94       	cli
    2086:	de bf       	out	0x3e, r29	; 62
    2088:	0f be       	out	0x3f, r0	; 63
    208a:	cd bf       	out	0x3d, r28	; 61
    208c:	cf 91       	pop	r28
    208e:	df 91       	pop	r29
    2090:	08 95       	ret

00002092 <UART_sendByte>:

void UART_sendByte(const uint8 a_data)
{
    2092:	df 93       	push	r29
    2094:	cf 93       	push	r28
    2096:	0f 92       	push	r0
    2098:	cd b7       	in	r28, 0x3d	; 61
    209a:	de b7       	in	r29, 0x3e	; 62
    209c:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE)) /*waiting for previous data to be sent*/
    209e:	eb e2       	ldi	r30, 0x2B	; 43
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	80 81       	ld	r24, Z
    20a4:	88 2f       	mov	r24, r24
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	80 72       	andi	r24, 0x20	; 32
    20aa:	90 70       	andi	r25, 0x00	; 0
    20ac:	00 97       	sbiw	r24, 0x00	; 0
    20ae:	b9 f3       	breq	.-18     	; 0x209e <UART_sendByte+0xc>
	{

	}
	UDR = a_data;/*sending data to register*/
    20b0:	ec e2       	ldi	r30, 0x2C	; 44
    20b2:	f0 e0       	ldi	r31, 0x00	; 0
    20b4:	89 81       	ldd	r24, Y+1	; 0x01
    20b6:	80 83       	st	Z, r24
}
    20b8:	0f 90       	pop	r0
    20ba:	cf 91       	pop	r28
    20bc:	df 91       	pop	r29
    20be:	08 95       	ret

000020c0 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    20c0:	df 93       	push	r29
    20c2:	cf 93       	push	r28
    20c4:	cd b7       	in	r28, 0x3d	; 61
    20c6:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC))/*checking that the register completed receiving the data*/
    20c8:	eb e2       	ldi	r30, 0x2B	; 43
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	80 81       	ld	r24, Z
    20ce:	88 23       	and	r24, r24
    20d0:	dc f7       	brge	.-10     	; 0x20c8 <UART_recieveByte+0x8>
	{

	}
	return UDR;/*saving data from register*/
    20d2:	ec e2       	ldi	r30, 0x2C	; 44
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
}
    20d8:	cf 91       	pop	r28
    20da:	df 91       	pop	r29
    20dc:	08 95       	ret

000020de <UART_sendString>:

void UART_sendString(const uint8 *str_Ptr)
{
    20de:	df 93       	push	r29
    20e0:	cf 93       	push	r28
    20e2:	00 d0       	rcall	.+0      	; 0x20e4 <UART_sendString+0x6>
    20e4:	0f 92       	push	r0
    20e6:	cd b7       	in	r28, 0x3d	; 61
    20e8:	de b7       	in	r29, 0x3e	; 62
    20ea:	9b 83       	std	Y+3, r25	; 0x03
    20ec:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    20ee:	19 82       	std	Y+1, r1	; 0x01
    20f0:	0e c0       	rjmp	.+28     	; 0x210e <UART_sendString+0x30>
	while ((str_Ptr[i]) != '\0') /*sending all string characters till \0 */
	{
		UART_sendByte(str_Ptr[i]);
    20f2:	89 81       	ldd	r24, Y+1	; 0x01
    20f4:	28 2f       	mov	r18, r24
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	8a 81       	ldd	r24, Y+2	; 0x02
    20fa:	9b 81       	ldd	r25, Y+3	; 0x03
    20fc:	fc 01       	movw	r30, r24
    20fe:	e2 0f       	add	r30, r18
    2100:	f3 1f       	adc	r31, r19
    2102:	80 81       	ld	r24, Z
    2104:	0e 94 49 10 	call	0x2092	; 0x2092 <UART_sendByte>
		i++;
    2108:	89 81       	ldd	r24, Y+1	; 0x01
    210a:	8f 5f       	subi	r24, 0xFF	; 255
    210c:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *str_Ptr)
{
	uint8 i=0;
	while ((str_Ptr[i]) != '\0') /*sending all string characters till \0 */
    210e:	89 81       	ldd	r24, Y+1	; 0x01
    2110:	28 2f       	mov	r18, r24
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	8a 81       	ldd	r24, Y+2	; 0x02
    2116:	9b 81       	ldd	r25, Y+3	; 0x03
    2118:	fc 01       	movw	r30, r24
    211a:	e2 0f       	add	r30, r18
    211c:	f3 1f       	adc	r31, r19
    211e:	80 81       	ld	r24, Z
    2120:	88 23       	and	r24, r24
    2122:	39 f7       	brne	.-50     	; 0x20f2 <UART_sendString+0x14>
	{
		UART_sendByte(str_Ptr[i]);
		i++;
	}
}
    2124:	0f 90       	pop	r0
    2126:	0f 90       	pop	r0
    2128:	0f 90       	pop	r0
    212a:	cf 91       	pop	r28
    212c:	df 91       	pop	r29
    212e:	08 95       	ret

00002130 <UART_receiveString>:

void UART_receiveString(uint8 *str_Ptr)
{
    2130:	0f 93       	push	r16
    2132:	1f 93       	push	r17
    2134:	df 93       	push	r29
    2136:	cf 93       	push	r28
    2138:	00 d0       	rcall	.+0      	; 0x213a <UART_receiveString+0xa>
    213a:	0f 92       	push	r0
    213c:	cd b7       	in	r28, 0x3d	; 61
    213e:	de b7       	in	r29, 0x3e	; 62
    2140:	9b 83       	std	Y+3, r25	; 0x03
    2142:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    2144:	19 82       	std	Y+1, r1	; 0x01
    2146:	0f c0       	rjmp	.+30     	; 0x2166 <UART_receiveString+0x36>
	while ((str_Ptr[i]) != '#') /*receiving all string characters till # */
	{
		str_Ptr[i]=UART_recieveByte();
    2148:	89 81       	ldd	r24, Y+1	; 0x01
    214a:	28 2f       	mov	r18, r24
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	8a 81       	ldd	r24, Y+2	; 0x02
    2150:	9b 81       	ldd	r25, Y+3	; 0x03
    2152:	8c 01       	movw	r16, r24
    2154:	02 0f       	add	r16, r18
    2156:	13 1f       	adc	r17, r19
    2158:	0e 94 60 10 	call	0x20c0	; 0x20c0 <UART_recieveByte>
    215c:	f8 01       	movw	r30, r16
    215e:	80 83       	st	Z, r24
		i++;
    2160:	89 81       	ldd	r24, Y+1	; 0x01
    2162:	8f 5f       	subi	r24, 0xFF	; 255
    2164:	89 83       	std	Y+1, r24	; 0x01
}

void UART_receiveString(uint8 *str_Ptr)
{
	uint8 i=0;
	while ((str_Ptr[i]) != '#') /*receiving all string characters till # */
    2166:	89 81       	ldd	r24, Y+1	; 0x01
    2168:	28 2f       	mov	r18, r24
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	8a 81       	ldd	r24, Y+2	; 0x02
    216e:	9b 81       	ldd	r25, Y+3	; 0x03
    2170:	fc 01       	movw	r30, r24
    2172:	e2 0f       	add	r30, r18
    2174:	f3 1f       	adc	r31, r19
    2176:	80 81       	ld	r24, Z
    2178:	83 32       	cpi	r24, 0x23	; 35
    217a:	31 f7       	brne	.-52     	; 0x2148 <UART_receiveString+0x18>
	{
		str_Ptr[i]=UART_recieveByte();
		i++;
	}
	str_Ptr[i]='\0';
    217c:	89 81       	ldd	r24, Y+1	; 0x01
    217e:	28 2f       	mov	r18, r24
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	8a 81       	ldd	r24, Y+2	; 0x02
    2184:	9b 81       	ldd	r25, Y+3	; 0x03
    2186:	fc 01       	movw	r30, r24
    2188:	e2 0f       	add	r30, r18
    218a:	f3 1f       	adc	r31, r19
    218c:	10 82       	st	Z, r1
}
    218e:	0f 90       	pop	r0
    2190:	0f 90       	pop	r0
    2192:	0f 90       	pop	r0
    2194:	cf 91       	pop	r28
    2196:	df 91       	pop	r29
    2198:	1f 91       	pop	r17
    219a:	0f 91       	pop	r16
    219c:	08 95       	ret

0000219e <__udivmodsi4>:
    219e:	a1 e2       	ldi	r26, 0x21	; 33
    21a0:	1a 2e       	mov	r1, r26
    21a2:	aa 1b       	sub	r26, r26
    21a4:	bb 1b       	sub	r27, r27
    21a6:	fd 01       	movw	r30, r26
    21a8:	0d c0       	rjmp	.+26     	; 0x21c4 <__udivmodsi4_ep>

000021aa <__udivmodsi4_loop>:
    21aa:	aa 1f       	adc	r26, r26
    21ac:	bb 1f       	adc	r27, r27
    21ae:	ee 1f       	adc	r30, r30
    21b0:	ff 1f       	adc	r31, r31
    21b2:	a2 17       	cp	r26, r18
    21b4:	b3 07       	cpc	r27, r19
    21b6:	e4 07       	cpc	r30, r20
    21b8:	f5 07       	cpc	r31, r21
    21ba:	20 f0       	brcs	.+8      	; 0x21c4 <__udivmodsi4_ep>
    21bc:	a2 1b       	sub	r26, r18
    21be:	b3 0b       	sbc	r27, r19
    21c0:	e4 0b       	sbc	r30, r20
    21c2:	f5 0b       	sbc	r31, r21

000021c4 <__udivmodsi4_ep>:
    21c4:	66 1f       	adc	r22, r22
    21c6:	77 1f       	adc	r23, r23
    21c8:	88 1f       	adc	r24, r24
    21ca:	99 1f       	adc	r25, r25
    21cc:	1a 94       	dec	r1
    21ce:	69 f7       	brne	.-38     	; 0x21aa <__udivmodsi4_loop>
    21d0:	60 95       	com	r22
    21d2:	70 95       	com	r23
    21d4:	80 95       	com	r24
    21d6:	90 95       	com	r25
    21d8:	9b 01       	movw	r18, r22
    21da:	ac 01       	movw	r20, r24
    21dc:	bd 01       	movw	r22, r26
    21de:	cf 01       	movw	r24, r30
    21e0:	08 95       	ret

000021e2 <__prologue_saves__>:
    21e2:	2f 92       	push	r2
    21e4:	3f 92       	push	r3
    21e6:	4f 92       	push	r4
    21e8:	5f 92       	push	r5
    21ea:	6f 92       	push	r6
    21ec:	7f 92       	push	r7
    21ee:	8f 92       	push	r8
    21f0:	9f 92       	push	r9
    21f2:	af 92       	push	r10
    21f4:	bf 92       	push	r11
    21f6:	cf 92       	push	r12
    21f8:	df 92       	push	r13
    21fa:	ef 92       	push	r14
    21fc:	ff 92       	push	r15
    21fe:	0f 93       	push	r16
    2200:	1f 93       	push	r17
    2202:	cf 93       	push	r28
    2204:	df 93       	push	r29
    2206:	cd b7       	in	r28, 0x3d	; 61
    2208:	de b7       	in	r29, 0x3e	; 62
    220a:	ca 1b       	sub	r28, r26
    220c:	db 0b       	sbc	r29, r27
    220e:	0f b6       	in	r0, 0x3f	; 63
    2210:	f8 94       	cli
    2212:	de bf       	out	0x3e, r29	; 62
    2214:	0f be       	out	0x3f, r0	; 63
    2216:	cd bf       	out	0x3d, r28	; 61
    2218:	09 94       	ijmp

0000221a <__epilogue_restores__>:
    221a:	2a 88       	ldd	r2, Y+18	; 0x12
    221c:	39 88       	ldd	r3, Y+17	; 0x11
    221e:	48 88       	ldd	r4, Y+16	; 0x10
    2220:	5f 84       	ldd	r5, Y+15	; 0x0f
    2222:	6e 84       	ldd	r6, Y+14	; 0x0e
    2224:	7d 84       	ldd	r7, Y+13	; 0x0d
    2226:	8c 84       	ldd	r8, Y+12	; 0x0c
    2228:	9b 84       	ldd	r9, Y+11	; 0x0b
    222a:	aa 84       	ldd	r10, Y+10	; 0x0a
    222c:	b9 84       	ldd	r11, Y+9	; 0x09
    222e:	c8 84       	ldd	r12, Y+8	; 0x08
    2230:	df 80       	ldd	r13, Y+7	; 0x07
    2232:	ee 80       	ldd	r14, Y+6	; 0x06
    2234:	fd 80       	ldd	r15, Y+5	; 0x05
    2236:	0c 81       	ldd	r16, Y+4	; 0x04
    2238:	1b 81       	ldd	r17, Y+3	; 0x03
    223a:	aa 81       	ldd	r26, Y+2	; 0x02
    223c:	b9 81       	ldd	r27, Y+1	; 0x01
    223e:	ce 0f       	add	r28, r30
    2240:	d1 1d       	adc	r29, r1
    2242:	0f b6       	in	r0, 0x3f	; 63
    2244:	f8 94       	cli
    2246:	de bf       	out	0x3e, r29	; 62
    2248:	0f be       	out	0x3f, r0	; 63
    224a:	cd bf       	out	0x3d, r28	; 61
    224c:	ed 01       	movw	r28, r26
    224e:	08 95       	ret

00002250 <_exit>:
    2250:	f8 94       	cli

00002252 <__stop_program>:
    2252:	ff cf       	rjmp	.-2      	; 0x2252 <__stop_program>
